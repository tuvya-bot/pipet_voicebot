{"ast":null,"code":"import { isPlainObject } from 'is-plain-object';\nimport { Operation, Editor, Transforms, Path } from 'slate';\n\n// eslint-disable-next-line no-redeclare\nvar History = {\n  /**\n   * Check if a value is a `History` object.\n   */\n  isHistory(value) {\n    return isPlainObject(value) && Array.isArray(value.redos) && Array.isArray(value.undos) && (value.redos.length === 0 || Operation.isOperationList(value.redos[0].operations)) && (value.undos.length === 0 || Operation.isOperationList(value.undos[0].operations));\n  }\n};\n\n/**\n * Weakmaps for attaching state to the editor.\n */\nvar HISTORY = new WeakMap();\nvar SAVING = new WeakMap();\nvar MERGING = new WeakMap();\n// eslint-disable-next-line no-redeclare\nvar HistoryEditor = {\n  /**\n   * Check if a value is a `HistoryEditor` object.\n   */\n  isHistoryEditor(value) {\n    return History.isHistory(value.history) && Editor.isEditor(value);\n  },\n  /**\n   * Get the merge flag's current value.\n   */\n  isMerging(editor) {\n    return MERGING.get(editor);\n  },\n  /**\n   * Get the saving flag's current value.\n   */\n  isSaving(editor) {\n    return SAVING.get(editor);\n  },\n  /**\n   * Redo to the previous saved state.\n   */\n  redo(editor) {\n    editor.redo();\n  },\n  /**\n   * Undo to the previous saved state.\n   */\n  undo(editor) {\n    editor.undo();\n  },\n  /**\n   * Apply a series of changes inside a synchronous `fn`, without merging any of\n   * the new operations into previous save point in the history.\n   */\n  withoutMerging(editor, fn) {\n    var prev = HistoryEditor.isMerging(editor);\n    MERGING.set(editor, false);\n    fn();\n    MERGING.set(editor, prev);\n  },\n  /**\n   * Apply a series of changes inside a synchronous `fn`, without saving any of\n   * their operations into the history.\n   */\n  withoutSaving(editor, fn) {\n    var prev = HistoryEditor.isSaving(editor);\n    SAVING.set(editor, false);\n    fn();\n    SAVING.set(editor, prev);\n  }\n};\n\n/**\n * The `withHistory` plugin keeps track of the operation history of a Slate\n * editor as operations are applied to it, using undo and redo stacks.\n *\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\n * this plugin.\n *\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\n */\nvar withHistory = editor => {\n  var e = editor;\n  var {\n    apply\n  } = e;\n  e.history = {\n    undos: [],\n    redos: []\n  };\n  e.redo = () => {\n    var {\n      history\n    } = e;\n    var {\n      redos\n    } = history;\n    if (redos.length > 0) {\n      var batch = redos[redos.length - 1];\n      if (batch.selectionBefore) {\n        Transforms.setSelection(e, batch.selectionBefore);\n      }\n      HistoryEditor.withoutSaving(e, () => {\n        Editor.withoutNormalizing(e, () => {\n          for (var op of batch.operations) {\n            e.apply(op);\n          }\n        });\n      });\n      history.redos.pop();\n      e.writeHistory('undos', batch);\n    }\n  };\n  e.undo = () => {\n    var {\n      history\n    } = e;\n    var {\n      undos\n    } = history;\n    if (undos.length > 0) {\n      var batch = undos[undos.length - 1];\n      HistoryEditor.withoutSaving(e, () => {\n        Editor.withoutNormalizing(e, () => {\n          var inverseOps = batch.operations.map(Operation.inverse).reverse();\n          for (var op of inverseOps) {\n            e.apply(op);\n          }\n          if (batch.selectionBefore) {\n            Transforms.setSelection(e, batch.selectionBefore);\n          }\n        });\n      });\n      e.writeHistory('redos', batch);\n      history.undos.pop();\n    }\n  };\n  e.apply = op => {\n    var {\n      operations,\n      history\n    } = e;\n    var {\n      undos\n    } = history;\n    var lastBatch = undos[undos.length - 1];\n    var lastOp = lastBatch && lastBatch.operations[lastBatch.operations.length - 1];\n    var save = HistoryEditor.isSaving(e);\n    var merge = HistoryEditor.isMerging(e);\n    if (save == null) {\n      save = shouldSave(op);\n    }\n    if (save) {\n      if (merge == null) {\n        if (lastBatch == null) {\n          merge = false;\n        } else if (operations.length !== 0) {\n          merge = true;\n        } else {\n          merge = shouldMerge(op, lastOp);\n        }\n      }\n      if (lastBatch && merge) {\n        lastBatch.operations.push(op);\n      } else {\n        var batch = {\n          operations: [op],\n          selectionBefore: e.selection\n        };\n        e.writeHistory('undos', batch);\n      }\n      while (undos.length > 100) {\n        undos.shift();\n      }\n      history.redos = [];\n    }\n    apply(op);\n  };\n  e.writeHistory = (stack, batch) => {\n    e.history[stack].push(batch);\n  };\n  return e;\n};\n/**\n * Check whether to merge an operation into the previous operation.\n */\nvar shouldMerge = (op, prev) => {\n  if (prev && op.type === 'insert_text' && prev.type === 'insert_text' && op.offset === prev.offset + prev.text.length && Path.equals(op.path, prev.path)) {\n    return true;\n  }\n  if (prev && op.type === 'remove_text' && prev.type === 'remove_text' && op.offset + op.text.length === prev.offset && Path.equals(op.path, prev.path)) {\n    return true;\n  }\n  return false;\n};\n/**\n * Check whether an operation needs to be saved to the history.\n */\nvar shouldSave = (op, prev) => {\n  if (op.type === 'set_selection') {\n    return false;\n  }\n  return true;\n};\nexport { HISTORY, History, HistoryEditor, MERGING, SAVING, withHistory };","map":{"version":3,"names":["History","isHistory","value","isPlainObject","Array","isArray","redos","undos","length","Operation","isOperationList","operations","HISTORY","WeakMap","SAVING","MERGING","HistoryEditor","isHistoryEditor","history","Editor","isEditor","isMerging","editor","get","isSaving","redo","undo","withoutMerging","fn","prev","set","withoutSaving","withHistory","e","apply","batch","selectionBefore","Transforms","setSelection","withoutNormalizing","op","pop","writeHistory","inverseOps","map","inverse","reverse","lastBatch","lastOp","save","merge","shouldSave","shouldMerge","push","selection","shift","stack","type","offset","text","Path","equals","path"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/slate-history/src/history.ts","/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/slate-history/src/history-editor.ts","/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/slate-history/src/with-history.ts"],"sourcesContent":["import { isPlainObject } from 'is-plain-object'\nimport { Operation, Range } from 'slate'\n\ninterface Batch {\n  operations: Operation[]\n  selectionBefore: Range | null\n}\n\n/**\n * `History` objects hold all of the operations that are applied to a value, so\n * they can be undone or redone as necessary.\n */\n\nexport interface History {\n  redos: Batch[]\n  undos: Batch[]\n}\n\n// eslint-disable-next-line no-redeclare\nexport const History = {\n  /**\n   * Check if a value is a `History` object.\n   */\n\n  isHistory(value: any): value is History {\n    return (\n      isPlainObject(value) &&\n      Array.isArray(value.redos) &&\n      Array.isArray(value.undos) &&\n      (value.redos.length === 0 ||\n        Operation.isOperationList(value.redos[0].operations)) &&\n      (value.undos.length === 0 ||\n        Operation.isOperationList(value.undos[0].operations))\n    )\n  },\n}\n","import { BaseEditor, Editor } from 'slate'\nimport { History } from './history'\n\n/**\n * Weakmaps for attaching state to the editor.\n */\n\nexport const HISTORY = new WeakMap<Editor, History>()\nexport const SAVING = new WeakMap<Editor, boolean | undefined>()\nexport const MERGING = new WeakMap<Editor, boolean | undefined>()\n\n/**\n * `HistoryEditor` contains helpers for history-enabled editors.\n */\n\nexport interface HistoryEditor extends BaseEditor {\n  history: History\n  undo: () => void\n  redo: () => void\n  writeHistory: (stack: 'undos' | 'redos', batch: any) => void\n}\n\n// eslint-disable-next-line no-redeclare\nexport const HistoryEditor = {\n  /**\n   * Check if a value is a `HistoryEditor` object.\n   */\n\n  isHistoryEditor(value: any): value is HistoryEditor {\n    return History.isHistory(value.history) && Editor.isEditor(value)\n  },\n\n  /**\n   * Get the merge flag's current value.\n   */\n\n  isMerging(editor: HistoryEditor): boolean | undefined {\n    return MERGING.get(editor)\n  },\n\n  /**\n   * Get the saving flag's current value.\n   */\n\n  isSaving(editor: HistoryEditor): boolean | undefined {\n    return SAVING.get(editor)\n  },\n\n  /**\n   * Redo to the previous saved state.\n   */\n\n  redo(editor: HistoryEditor): void {\n    editor.redo()\n  },\n\n  /**\n   * Undo to the previous saved state.\n   */\n\n  undo(editor: HistoryEditor): void {\n    editor.undo()\n  },\n\n  /**\n   * Apply a series of changes inside a synchronous `fn`, without merging any of\n   * the new operations into previous save point in the history.\n   */\n\n  withoutMerging(editor: HistoryEditor, fn: () => void): void {\n    const prev = HistoryEditor.isMerging(editor)\n    MERGING.set(editor, false)\n    fn()\n    MERGING.set(editor, prev)\n  },\n\n  /**\n   * Apply a series of changes inside a synchronous `fn`, without saving any of\n   * their operations into the history.\n   */\n\n  withoutSaving(editor: HistoryEditor, fn: () => void): void {\n    const prev = HistoryEditor.isSaving(editor)\n    SAVING.set(editor, false)\n    fn()\n    SAVING.set(editor, prev)\n  },\n}\n","import { Editor, Operation, Path, Range, Transforms } from 'slate'\n\nimport { HistoryEditor } from './history-editor'\n\n/**\n * The `withHistory` plugin keeps track of the operation history of a Slate\n * editor as operations are applied to it, using undo and redo stacks.\n *\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\n * this plugin.\n *\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\n */\n\nexport const withHistory = <T extends Editor>(editor: T) => {\n  const e = editor as T & HistoryEditor\n  const { apply } = e\n  e.history = { undos: [], redos: [] }\n\n  e.redo = () => {\n    const { history } = e\n    const { redos } = history\n\n    if (redos.length > 0) {\n      const batch = redos[redos.length - 1]\n\n      if (batch.selectionBefore) {\n        Transforms.setSelection(e, batch.selectionBefore)\n      }\n\n      HistoryEditor.withoutSaving(e, () => {\n        Editor.withoutNormalizing(e, () => {\n          for (const op of batch.operations) {\n            e.apply(op)\n          }\n        })\n      })\n\n      history.redos.pop()\n      e.writeHistory('undos', batch)\n    }\n  }\n\n  e.undo = () => {\n    const { history } = e\n    const { undos } = history\n\n    if (undos.length > 0) {\n      const batch = undos[undos.length - 1]\n\n      HistoryEditor.withoutSaving(e, () => {\n        Editor.withoutNormalizing(e, () => {\n          const inverseOps = batch.operations.map(Operation.inverse).reverse()\n\n          for (const op of inverseOps) {\n            e.apply(op)\n          }\n          if (batch.selectionBefore) {\n            Transforms.setSelection(e, batch.selectionBefore)\n          }\n        })\n      })\n\n      e.writeHistory('redos', batch)\n      history.undos.pop()\n    }\n  }\n\n  e.apply = (op: Operation) => {\n    const { operations, history } = e\n    const { undos } = history\n    const lastBatch = undos[undos.length - 1]\n    const lastOp =\n      lastBatch && lastBatch.operations[lastBatch.operations.length - 1]\n    let save = HistoryEditor.isSaving(e)\n    let merge = HistoryEditor.isMerging(e)\n\n    if (save == null) {\n      save = shouldSave(op, lastOp)\n    }\n\n    if (save) {\n      if (merge == null) {\n        if (lastBatch == null) {\n          merge = false\n        } else if (operations.length !== 0) {\n          merge = true\n        } else {\n          merge = shouldMerge(op, lastOp)\n        }\n      }\n\n      if (lastBatch && merge) {\n        lastBatch.operations.push(op)\n      } else {\n        const batch = {\n          operations: [op],\n          selectionBefore: e.selection,\n        }\n        e.writeHistory('undos', batch)\n      }\n\n      while (undos.length > 100) {\n        undos.shift()\n      }\n\n      history.redos = []\n    }\n\n    apply(op)\n  }\n\n  e.writeHistory = (stack: 'undos' | 'redos', batch: any) => {\n    e.history[stack].push(batch)\n  }\n\n  return e\n}\n\n/**\n * Check whether to merge an operation into the previous operation.\n */\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Check whether an operation needs to be saved to the history.\n */\n\nconst shouldSave = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}