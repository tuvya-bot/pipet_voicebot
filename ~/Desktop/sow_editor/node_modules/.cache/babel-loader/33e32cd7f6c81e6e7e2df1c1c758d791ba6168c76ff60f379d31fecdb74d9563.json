{"ast":null,"code":"export function getUnmarshalledStream(source, options) {\n  const messageUnmarshaller = getMessageUnmarshaller(options.deserializer, options.toUtf8);\n  return {\n    [Symbol.asyncIterator]: async function* () {\n      for await (const chunk of source) {\n        const message = options.eventStreamCodec.decode(chunk);\n        const type = await messageUnmarshaller(message);\n        if (type === undefined) continue;\n        yield type;\n      }\n    }\n  };\n}\nexport function getMessageUnmarshaller(deserializer, toUtf8) {\n  return async function (message) {\n    const {\n      value: messageType\n    } = message.headers[\":message-type\"];\n    if (messageType === \"error\") {\n      const unmodeledError = new Error(message.headers[\":error-message\"].value || \"UnknownError\");\n      unmodeledError.name = message.headers[\":error-code\"].value;\n      throw unmodeledError;\n    } else if (messageType === \"exception\") {\n      const code = message.headers[\":exception-type\"].value;\n      const exception = {\n        [code]: message\n      };\n      const deserializedException = await deserializer(exception);\n      if (deserializedException.$unknown) {\n        const error = new Error(toUtf8(message.body));\n        error.name = code;\n        throw error;\n      }\n      throw deserializedException[code];\n    } else if (messageType === \"event\") {\n      const event = {\n        [message.headers[\":event-type\"].value]: message\n      };\n      const deserialized = await deserializer(event);\n      if (deserialized.$unknown) return;\n      return deserialized;\n    } else {\n      throw Error(`Unrecognizable event type: ${message.headers[\":event-type\"].value}`);\n    }\n  };\n}","map":{"version":3,"names":["getUnmarshalledStream","source","options","messageUnmarshaller","getMessageUnmarshaller","deserializer","toUtf8","Symbol","asyncIterator","chunk","message","eventStreamCodec","decode","type","undefined","value","messageType","headers","unmodeledError","Error","name","code","exception","deserializedException","$unknown","error","body","event","deserialized"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@smithy/eventstream-serde-universal/dist-es/getUnmarshalledStream.js"],"sourcesContent":["export function getUnmarshalledStream(source, options) {\n    const messageUnmarshaller = getMessageUnmarshaller(options.deserializer, options.toUtf8);\n    return {\n        [Symbol.asyncIterator]: async function* () {\n            for await (const chunk of source) {\n                const message = options.eventStreamCodec.decode(chunk);\n                const type = await messageUnmarshaller(message);\n                if (type === undefined)\n                    continue;\n                yield type;\n            }\n        },\n    };\n}\nexport function getMessageUnmarshaller(deserializer, toUtf8) {\n    return async function (message) {\n        const { value: messageType } = message.headers[\":message-type\"];\n        if (messageType === \"error\") {\n            const unmodeledError = new Error(message.headers[\":error-message\"].value || \"UnknownError\");\n            unmodeledError.name = message.headers[\":error-code\"].value;\n            throw unmodeledError;\n        }\n        else if (messageType === \"exception\") {\n            const code = message.headers[\":exception-type\"].value;\n            const exception = { [code]: message };\n            const deserializedException = await deserializer(exception);\n            if (deserializedException.$unknown) {\n                const error = new Error(toUtf8(message.body));\n                error.name = code;\n                throw error;\n            }\n            throw deserializedException[code];\n        }\n        else if (messageType === \"event\") {\n            const event = {\n                [message.headers[\":event-type\"].value]: message,\n            };\n            const deserialized = await deserializer(event);\n            if (deserialized.$unknown)\n                return;\n            return deserialized;\n        }\n        else {\n            throw Error(`Unrecognizable event type: ${message.headers[\":event-type\"].value}`);\n        }\n    };\n}\n"],"mappings":"AAAA,OAAO,SAASA,qBAAqBA,CAACC,MAAM,EAAEC,OAAO,EAAE;EACnD,MAAMC,mBAAmB,GAAGC,sBAAsB,CAACF,OAAO,CAACG,YAAY,EAAEH,OAAO,CAACI,MAAM,CAAC;EACxF,OAAO;IACH,CAACC,MAAM,CAACC,aAAa,GAAG,mBAAmB;MACvC,WAAW,MAAMC,KAAK,IAAIR,MAAM,EAAE;QAC9B,MAAMS,OAAO,GAAGR,OAAO,CAACS,gBAAgB,CAACC,MAAM,CAACH,KAAK,CAAC;QACtD,MAAMI,IAAI,GAAG,MAAMV,mBAAmB,CAACO,OAAO,CAAC;QAC/C,IAAIG,IAAI,KAAKC,SAAS,EAClB;QACJ,MAAMD,IAAI;MACd;IACJ;EACJ,CAAC;AACL;AACA,OAAO,SAAST,sBAAsBA,CAACC,YAAY,EAAEC,MAAM,EAAE;EACzD,OAAO,gBAAgBI,OAAO,EAAE;IAC5B,MAAM;MAAEK,KAAK,EAAEC;IAAY,CAAC,GAAGN,OAAO,CAACO,OAAO,CAAC,eAAe,CAAC;IAC/D,IAAID,WAAW,KAAK,OAAO,EAAE;MACzB,MAAME,cAAc,GAAG,IAAIC,KAAK,CAACT,OAAO,CAACO,OAAO,CAAC,gBAAgB,CAAC,CAACF,KAAK,IAAI,cAAc,CAAC;MAC3FG,cAAc,CAACE,IAAI,GAAGV,OAAO,CAACO,OAAO,CAAC,aAAa,CAAC,CAACF,KAAK;MAC1D,MAAMG,cAAc;IACxB,CAAC,MACI,IAAIF,WAAW,KAAK,WAAW,EAAE;MAClC,MAAMK,IAAI,GAAGX,OAAO,CAACO,OAAO,CAAC,iBAAiB,CAAC,CAACF,KAAK;MACrD,MAAMO,SAAS,GAAG;QAAE,CAACD,IAAI,GAAGX;MAAQ,CAAC;MACrC,MAAMa,qBAAqB,GAAG,MAAMlB,YAAY,CAACiB,SAAS,CAAC;MAC3D,IAAIC,qBAAqB,CAACC,QAAQ,EAAE;QAChC,MAAMC,KAAK,GAAG,IAAIN,KAAK,CAACb,MAAM,CAACI,OAAO,CAACgB,IAAI,CAAC,CAAC;QAC7CD,KAAK,CAACL,IAAI,GAAGC,IAAI;QACjB,MAAMI,KAAK;MACf;MACA,MAAMF,qBAAqB,CAACF,IAAI,CAAC;IACrC,CAAC,MACI,IAAIL,WAAW,KAAK,OAAO,EAAE;MAC9B,MAAMW,KAAK,GAAG;QACV,CAACjB,OAAO,CAACO,OAAO,CAAC,aAAa,CAAC,CAACF,KAAK,GAAGL;MAC5C,CAAC;MACD,MAAMkB,YAAY,GAAG,MAAMvB,YAAY,CAACsB,KAAK,CAAC;MAC9C,IAAIC,YAAY,CAACJ,QAAQ,EACrB;MACJ,OAAOI,YAAY;IACvB,CAAC,MACI;MACD,MAAMT,KAAK,CAAC,8BAA8BT,OAAO,CAACO,OAAO,CAAC,aAAa,CAAC,CAACF,KAAK,EAAE,CAAC;IACrF;EACJ,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}