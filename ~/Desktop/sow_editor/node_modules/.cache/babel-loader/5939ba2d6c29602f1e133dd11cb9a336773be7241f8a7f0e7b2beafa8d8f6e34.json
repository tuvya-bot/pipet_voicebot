{"ast":null,"code":"import { getRealRegion } from \"./getRealRegion\";\nimport { isFipsRegion } from \"./isFipsRegion\";\nexport const resolveRegionConfig = input => {\n  const {\n    region,\n    useFipsEndpoint\n  } = input;\n  if (!region) {\n    throw new Error(\"Region is missing\");\n  }\n  return Object.assign(input, {\n    region: async () => {\n      if (typeof region === \"string\") {\n        return getRealRegion(region);\n      }\n      const providedRegion = await region();\n      return getRealRegion(providedRegion);\n    },\n    useFipsEndpoint: async () => {\n      const providedRegion = typeof region === \"string\" ? region : await region();\n      if (isFipsRegion(providedRegion)) {\n        return true;\n      }\n      return typeof useFipsEndpoint !== \"function\" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();\n    }\n  });\n};","map":{"version":3,"names":["getRealRegion","isFipsRegion","resolveRegionConfig","input","region","useFipsEndpoint","Error","Object","assign","providedRegion","Promise","resolve"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/resolveRegionConfig.js"],"sourcesContent":["import { getRealRegion } from \"./getRealRegion\";\nimport { isFipsRegion } from \"./isFipsRegion\";\nexport const resolveRegionConfig = (input) => {\n    const { region, useFipsEndpoint } = input;\n    if (!region) {\n        throw new Error(\"Region is missing\");\n    }\n    return Object.assign(input, {\n        region: async () => {\n            if (typeof region === \"string\") {\n                return getRealRegion(region);\n            }\n            const providedRegion = await region();\n            return getRealRegion(providedRegion);\n        },\n        useFipsEndpoint: async () => {\n            const providedRegion = typeof region === \"string\" ? region : await region();\n            if (isFipsRegion(providedRegion)) {\n                return true;\n            }\n            return typeof useFipsEndpoint !== \"function\" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();\n        },\n    });\n};\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,OAAO,MAAMC,mBAAmB,GAAIC,KAAK,IAAK;EAC1C,MAAM;IAAEC,MAAM;IAAEC;EAAgB,CAAC,GAAGF,KAAK;EACzC,IAAI,CAACC,MAAM,EAAE;IACT,MAAM,IAAIE,KAAK,CAAC,mBAAmB,CAAC;EACxC;EACA,OAAOC,MAAM,CAACC,MAAM,CAACL,KAAK,EAAE;IACxBC,MAAM,EAAE,MAAAA,CAAA,KAAY;MAChB,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;QAC5B,OAAOJ,aAAa,CAACI,MAAM,CAAC;MAChC;MACA,MAAMK,cAAc,GAAG,MAAML,MAAM,CAAC,CAAC;MACrC,OAAOJ,aAAa,CAACS,cAAc,CAAC;IACxC,CAAC;IACDJ,eAAe,EAAE,MAAAA,CAAA,KAAY;MACzB,MAAMI,cAAc,GAAG,OAAOL,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAG,MAAMA,MAAM,CAAC,CAAC;MAC3E,IAAIH,YAAY,CAACQ,cAAc,CAAC,EAAE;QAC9B,OAAO,IAAI;MACf;MACA,OAAO,OAAOJ,eAAe,KAAK,UAAU,GAAGK,OAAO,CAACC,OAAO,CAAC,CAAC,CAACN,eAAe,CAAC,GAAGA,eAAe,CAAC,CAAC;IACzG;EACJ,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}