{"ast":null,"code":"import { HttpRequest } from \"@smithy/protocol-http\";\nimport { getDateHeader, getSkewCorrectedDate, getUpdatedSystemClockOffset } from \"../utils\";\nconst throwSigningPropertyError = (name, property) => {\n  if (!property) {\n    throw new Error(`Property \\`${name}\\` is not resolved for AWS SDK SigV4Auth`);\n  }\n  return property;\n};\nexport const validateSigningProperties = async signingProperties => {\n  const context = throwSigningPropertyError(\"context\", signingProperties.context);\n  const config = throwSigningPropertyError(\"config\", signingProperties.config);\n  const authScheme = context.endpointV2?.properties?.authSchemes?.[0];\n  const signerFunction = throwSigningPropertyError(\"signer\", config.signer);\n  const signer = await signerFunction(authScheme);\n  const signingRegion = signingProperties?.signingRegion;\n  const signingRegionSet = signingProperties?.signingRegionSet;\n  const signingName = signingProperties?.signingName;\n  return {\n    config,\n    signer,\n    signingRegion,\n    signingRegionSet,\n    signingName\n  };\n};\nexport class AwsSdkSigV4Signer {\n  async sign(httpRequest, identity, signingProperties) {\n    if (!HttpRequest.isInstance(httpRequest)) {\n      throw new Error(\"The request is not an instance of `HttpRequest` and cannot be signed\");\n    }\n    const validatedProps = await validateSigningProperties(signingProperties);\n    const {\n      config,\n      signer\n    } = validatedProps;\n    let {\n      signingRegion,\n      signingName\n    } = validatedProps;\n    const handlerExecutionContext = signingProperties.context;\n    if (handlerExecutionContext?.authSchemes?.length ?? 0 > 1) {\n      const [first, second] = handlerExecutionContext.authSchemes;\n      if (first?.name === \"sigv4a\" && second?.name === \"sigv4\") {\n        signingRegion = second?.signingRegion ?? signingRegion;\n        signingName = second?.signingName ?? signingName;\n      }\n    }\n    const signedRequest = await signer.sign(httpRequest, {\n      signingDate: getSkewCorrectedDate(config.systemClockOffset),\n      signingRegion: signingRegion,\n      signingService: signingName\n    });\n    return signedRequest;\n  }\n  errorHandler(signingProperties) {\n    return error => {\n      const serverTime = error.ServerTime ?? getDateHeader(error.$response);\n      if (serverTime) {\n        const config = throwSigningPropertyError(\"config\", signingProperties.config);\n        const initialSystemClockOffset = config.systemClockOffset;\n        config.systemClockOffset = getUpdatedSystemClockOffset(serverTime, config.systemClockOffset);\n        const clockSkewCorrected = config.systemClockOffset !== initialSystemClockOffset;\n        if (clockSkewCorrected && error.$metadata) {\n          error.$metadata.clockSkewCorrected = true;\n        }\n      }\n      throw error;\n    };\n  }\n  successHandler(httpResponse, signingProperties) {\n    const dateHeader = getDateHeader(httpResponse);\n    if (dateHeader) {\n      const config = throwSigningPropertyError(\"config\", signingProperties.config);\n      config.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, config.systemClockOffset);\n    }\n  }\n}\nexport const AWSSDKSigV4Signer = AwsSdkSigV4Signer;","map":{"version":3,"names":["HttpRequest","getDateHeader","getSkewCorrectedDate","getUpdatedSystemClockOffset","throwSigningPropertyError","name","property","Error","validateSigningProperties","signingProperties","context","config","authScheme","endpointV2","properties","authSchemes","signerFunction","signer","signingRegion","signingRegionSet","signingName","AwsSdkSigV4Signer","sign","httpRequest","identity","isInstance","validatedProps","handlerExecutionContext","length","first","second","signedRequest","signingDate","systemClockOffset","signingService","errorHandler","error","serverTime","ServerTime","$response","initialSystemClockOffset","clockSkewCorrected","$metadata","successHandler","httpResponse","dateHeader","AWSSDKSigV4Signer"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js"],"sourcesContent":["import { HttpRequest } from \"@smithy/protocol-http\";\nimport { getDateHeader, getSkewCorrectedDate, getUpdatedSystemClockOffset } from \"../utils\";\nconst throwSigningPropertyError = (name, property) => {\n    if (!property) {\n        throw new Error(`Property \\`${name}\\` is not resolved for AWS SDK SigV4Auth`);\n    }\n    return property;\n};\nexport const validateSigningProperties = async (signingProperties) => {\n    const context = throwSigningPropertyError(\"context\", signingProperties.context);\n    const config = throwSigningPropertyError(\"config\", signingProperties.config);\n    const authScheme = context.endpointV2?.properties?.authSchemes?.[0];\n    const signerFunction = throwSigningPropertyError(\"signer\", config.signer);\n    const signer = await signerFunction(authScheme);\n    const signingRegion = signingProperties?.signingRegion;\n    const signingRegionSet = signingProperties?.signingRegionSet;\n    const signingName = signingProperties?.signingName;\n    return {\n        config,\n        signer,\n        signingRegion,\n        signingRegionSet,\n        signingName,\n    };\n};\nexport class AwsSdkSigV4Signer {\n    async sign(httpRequest, identity, signingProperties) {\n        if (!HttpRequest.isInstance(httpRequest)) {\n            throw new Error(\"The request is not an instance of `HttpRequest` and cannot be signed\");\n        }\n        const validatedProps = await validateSigningProperties(signingProperties);\n        const { config, signer } = validatedProps;\n        let { signingRegion, signingName } = validatedProps;\n        const handlerExecutionContext = signingProperties.context;\n        if (handlerExecutionContext?.authSchemes?.length ?? 0 > 1) {\n            const [first, second] = handlerExecutionContext.authSchemes;\n            if (first?.name === \"sigv4a\" && second?.name === \"sigv4\") {\n                signingRegion = second?.signingRegion ?? signingRegion;\n                signingName = second?.signingName ?? signingName;\n            }\n        }\n        const signedRequest = await signer.sign(httpRequest, {\n            signingDate: getSkewCorrectedDate(config.systemClockOffset),\n            signingRegion: signingRegion,\n            signingService: signingName,\n        });\n        return signedRequest;\n    }\n    errorHandler(signingProperties) {\n        return (error) => {\n            const serverTime = error.ServerTime ?? getDateHeader(error.$response);\n            if (serverTime) {\n                const config = throwSigningPropertyError(\"config\", signingProperties.config);\n                const initialSystemClockOffset = config.systemClockOffset;\n                config.systemClockOffset = getUpdatedSystemClockOffset(serverTime, config.systemClockOffset);\n                const clockSkewCorrected = config.systemClockOffset !== initialSystemClockOffset;\n                if (clockSkewCorrected && error.$metadata) {\n                    error.$metadata.clockSkewCorrected = true;\n                }\n            }\n            throw error;\n        };\n    }\n    successHandler(httpResponse, signingProperties) {\n        const dateHeader = getDateHeader(httpResponse);\n        if (dateHeader) {\n            const config = throwSigningPropertyError(\"config\", signingProperties.config);\n            config.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, config.systemClockOffset);\n        }\n    }\n}\nexport const AWSSDKSigV4Signer = AwsSdkSigV4Signer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,uBAAuB;AACnD,SAASC,aAAa,EAAEC,oBAAoB,EAAEC,2BAA2B,QAAQ,UAAU;AAC3F,MAAMC,yBAAyB,GAAGA,CAACC,IAAI,EAAEC,QAAQ,KAAK;EAClD,IAAI,CAACA,QAAQ,EAAE;IACX,MAAM,IAAIC,KAAK,CAAC,cAAcF,IAAI,0CAA0C,CAAC;EACjF;EACA,OAAOC,QAAQ;AACnB,CAAC;AACD,OAAO,MAAME,yBAAyB,GAAG,MAAOC,iBAAiB,IAAK;EAClE,MAAMC,OAAO,GAAGN,yBAAyB,CAAC,SAAS,EAAEK,iBAAiB,CAACC,OAAO,CAAC;EAC/E,MAAMC,MAAM,GAAGP,yBAAyB,CAAC,QAAQ,EAAEK,iBAAiB,CAACE,MAAM,CAAC;EAC5E,MAAMC,UAAU,GAAGF,OAAO,CAACG,UAAU,EAAEC,UAAU,EAAEC,WAAW,GAAG,CAAC,CAAC;EACnE,MAAMC,cAAc,GAAGZ,yBAAyB,CAAC,QAAQ,EAAEO,MAAM,CAACM,MAAM,CAAC;EACzE,MAAMA,MAAM,GAAG,MAAMD,cAAc,CAACJ,UAAU,CAAC;EAC/C,MAAMM,aAAa,GAAGT,iBAAiB,EAAES,aAAa;EACtD,MAAMC,gBAAgB,GAAGV,iBAAiB,EAAEU,gBAAgB;EAC5D,MAAMC,WAAW,GAAGX,iBAAiB,EAAEW,WAAW;EAClD,OAAO;IACHT,MAAM;IACNM,MAAM;IACNC,aAAa;IACbC,gBAAgB;IAChBC;EACJ,CAAC;AACL,CAAC;AACD,OAAO,MAAMC,iBAAiB,CAAC;EAC3B,MAAMC,IAAIA,CAACC,WAAW,EAAEC,QAAQ,EAAEf,iBAAiB,EAAE;IACjD,IAAI,CAACT,WAAW,CAACyB,UAAU,CAACF,WAAW,CAAC,EAAE;MACtC,MAAM,IAAIhB,KAAK,CAAC,sEAAsE,CAAC;IAC3F;IACA,MAAMmB,cAAc,GAAG,MAAMlB,yBAAyB,CAACC,iBAAiB,CAAC;IACzE,MAAM;MAAEE,MAAM;MAAEM;IAAO,CAAC,GAAGS,cAAc;IACzC,IAAI;MAAER,aAAa;MAAEE;IAAY,CAAC,GAAGM,cAAc;IACnD,MAAMC,uBAAuB,GAAGlB,iBAAiB,CAACC,OAAO;IACzD,IAAIiB,uBAAuB,EAAEZ,WAAW,EAAEa,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE;MACvD,MAAM,CAACC,KAAK,EAAEC,MAAM,CAAC,GAAGH,uBAAuB,CAACZ,WAAW;MAC3D,IAAIc,KAAK,EAAExB,IAAI,KAAK,QAAQ,IAAIyB,MAAM,EAAEzB,IAAI,KAAK,OAAO,EAAE;QACtDa,aAAa,GAAGY,MAAM,EAAEZ,aAAa,IAAIA,aAAa;QACtDE,WAAW,GAAGU,MAAM,EAAEV,WAAW,IAAIA,WAAW;MACpD;IACJ;IACA,MAAMW,aAAa,GAAG,MAAMd,MAAM,CAACK,IAAI,CAACC,WAAW,EAAE;MACjDS,WAAW,EAAE9B,oBAAoB,CAACS,MAAM,CAACsB,iBAAiB,CAAC;MAC3Df,aAAa,EAAEA,aAAa;MAC5BgB,cAAc,EAAEd;IACpB,CAAC,CAAC;IACF,OAAOW,aAAa;EACxB;EACAI,YAAYA,CAAC1B,iBAAiB,EAAE;IAC5B,OAAQ2B,KAAK,IAAK;MACd,MAAMC,UAAU,GAAGD,KAAK,CAACE,UAAU,IAAIrC,aAAa,CAACmC,KAAK,CAACG,SAAS,CAAC;MACrE,IAAIF,UAAU,EAAE;QACZ,MAAM1B,MAAM,GAAGP,yBAAyB,CAAC,QAAQ,EAAEK,iBAAiB,CAACE,MAAM,CAAC;QAC5E,MAAM6B,wBAAwB,GAAG7B,MAAM,CAACsB,iBAAiB;QACzDtB,MAAM,CAACsB,iBAAiB,GAAG9B,2BAA2B,CAACkC,UAAU,EAAE1B,MAAM,CAACsB,iBAAiB,CAAC;QAC5F,MAAMQ,kBAAkB,GAAG9B,MAAM,CAACsB,iBAAiB,KAAKO,wBAAwB;QAChF,IAAIC,kBAAkB,IAAIL,KAAK,CAACM,SAAS,EAAE;UACvCN,KAAK,CAACM,SAAS,CAACD,kBAAkB,GAAG,IAAI;QAC7C;MACJ;MACA,MAAML,KAAK;IACf,CAAC;EACL;EACAO,cAAcA,CAACC,YAAY,EAAEnC,iBAAiB,EAAE;IAC5C,MAAMoC,UAAU,GAAG5C,aAAa,CAAC2C,YAAY,CAAC;IAC9C,IAAIC,UAAU,EAAE;MACZ,MAAMlC,MAAM,GAAGP,yBAAyB,CAAC,QAAQ,EAAEK,iBAAiB,CAACE,MAAM,CAAC;MAC5EA,MAAM,CAACsB,iBAAiB,GAAG9B,2BAA2B,CAAC0C,UAAU,EAAElC,MAAM,CAACsB,iBAAiB,CAAC;IAChG;EACJ;AACJ;AACA,OAAO,MAAMa,iBAAiB,GAAGzB,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}