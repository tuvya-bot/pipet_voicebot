{"ast":null,"code":"import { fromHex } from \"@smithy/util-hex-encoding\";\nexport const getEventSigningTransformStream = (initialSignature, messageSigner, eventStreamCodec, systemClockOffsetProvider) => {\n  let priorSignature = initialSignature;\n  const transformer = {\n    start() {},\n    async transform(chunk, controller) {\n      try {\n        const now = new Date(Date.now() + (await systemClockOffsetProvider()));\n        const dateHeader = {\n          \":date\": {\n            type: \"timestamp\",\n            value: now\n          }\n        };\n        const signedMessage = await messageSigner.sign({\n          message: {\n            body: chunk,\n            headers: dateHeader\n          },\n          priorSignature: priorSignature\n        }, {\n          signingDate: now\n        });\n        priorSignature = signedMessage.signature;\n        const serializedSigned = eventStreamCodec.encode({\n          headers: {\n            ...dateHeader,\n            \":chunk-signature\": {\n              type: \"binary\",\n              value: fromHex(signedMessage.signature)\n            }\n          },\n          body: chunk\n        });\n        controller.enqueue(serializedSigned);\n      } catch (error) {\n        controller.error(error);\n      }\n    }\n  };\n  return new TransformStream({\n    ...transformer\n  });\n};","map":{"version":3,"names":["fromHex","getEventSigningTransformStream","initialSignature","messageSigner","eventStreamCodec","systemClockOffsetProvider","priorSignature","transformer","start","transform","chunk","controller","now","Date","dateHeader","type","value","signedMessage","sign","message","body","headers","signingDate","signature","serializedSigned","encode","enqueue","error","TransformStream"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@aws-sdk/middleware-websocket/dist-es/get-event-signing-stream.js"],"sourcesContent":["import { fromHex } from \"@smithy/util-hex-encoding\";\nexport const getEventSigningTransformStream = (initialSignature, messageSigner, eventStreamCodec, systemClockOffsetProvider) => {\n    let priorSignature = initialSignature;\n    const transformer = {\n        start() { },\n        async transform(chunk, controller) {\n            try {\n                const now = new Date(Date.now() + (await systemClockOffsetProvider()));\n                const dateHeader = {\n                    \":date\": { type: \"timestamp\", value: now },\n                };\n                const signedMessage = await messageSigner.sign({\n                    message: {\n                        body: chunk,\n                        headers: dateHeader,\n                    },\n                    priorSignature: priorSignature,\n                }, {\n                    signingDate: now,\n                });\n                priorSignature = signedMessage.signature;\n                const serializedSigned = eventStreamCodec.encode({\n                    headers: {\n                        ...dateHeader,\n                        \":chunk-signature\": {\n                            type: \"binary\",\n                            value: fromHex(signedMessage.signature),\n                        },\n                    },\n                    body: chunk,\n                });\n                controller.enqueue(serializedSigned);\n            }\n            catch (error) {\n                controller.error(error);\n            }\n        },\n    };\n    return new TransformStream({ ...transformer });\n};\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,OAAO,MAAMC,8BAA8B,GAAGA,CAACC,gBAAgB,EAAEC,aAAa,EAAEC,gBAAgB,EAAEC,yBAAyB,KAAK;EAC5H,IAAIC,cAAc,GAAGJ,gBAAgB;EACrC,MAAMK,WAAW,GAAG;IAChBC,KAAKA,CAAA,EAAG,CAAE,CAAC;IACX,MAAMC,SAASA,CAACC,KAAK,EAAEC,UAAU,EAAE;MAC/B,IAAI;QACA,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAACA,IAAI,CAACD,GAAG,CAAC,CAAC,IAAI,MAAMP,yBAAyB,CAAC,CAAC,CAAC,CAAC;QACtE,MAAMS,UAAU,GAAG;UACf,OAAO,EAAE;YAAEC,IAAI,EAAE,WAAW;YAAEC,KAAK,EAAEJ;UAAI;QAC7C,CAAC;QACD,MAAMK,aAAa,GAAG,MAAMd,aAAa,CAACe,IAAI,CAAC;UAC3CC,OAAO,EAAE;YACLC,IAAI,EAAEV,KAAK;YACXW,OAAO,EAAEP;UACb,CAAC;UACDR,cAAc,EAAEA;QACpB,CAAC,EAAE;UACCgB,WAAW,EAAEV;QACjB,CAAC,CAAC;QACFN,cAAc,GAAGW,aAAa,CAACM,SAAS;QACxC,MAAMC,gBAAgB,GAAGpB,gBAAgB,CAACqB,MAAM,CAAC;UAC7CJ,OAAO,EAAE;YACL,GAAGP,UAAU;YACb,kBAAkB,EAAE;cAChBC,IAAI,EAAE,QAAQ;cACdC,KAAK,EAAEhB,OAAO,CAACiB,aAAa,CAACM,SAAS;YAC1C;UACJ,CAAC;UACDH,IAAI,EAAEV;QACV,CAAC,CAAC;QACFC,UAAU,CAACe,OAAO,CAACF,gBAAgB,CAAC;MACxC,CAAC,CACD,OAAOG,KAAK,EAAE;QACVhB,UAAU,CAACgB,KAAK,CAACA,KAAK,CAAC;MAC3B;IACJ;EACJ,CAAC;EACD,OAAO,IAAIC,eAAe,CAAC;IAAE,GAAGrB;EAAY,CAAC,CAAC;AAClD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}