{"ast":null,"code":"import { NormalizedSchema, SCHEMA } from \"@smithy/core/schema\";\nimport { dateToUtcString, generateIdempotencyToken, LazyJsonString } from \"@smithy/core/serde\";\nimport { SerdeContextConfig } from \"../ConfigurableSerdeContext\";\nimport { JsonReplacer } from \"./jsonReplacer\";\nexport class JsonShapeSerializer extends SerdeContextConfig {\n  settings;\n  buffer;\n  rootSchema;\n  constructor(settings) {\n    super();\n    this.settings = settings;\n  }\n  write(schema, value) {\n    this.rootSchema = NormalizedSchema.of(schema);\n    this.buffer = this._write(this.rootSchema, value);\n  }\n  flush() {\n    if (this.rootSchema?.isStructSchema() || this.rootSchema?.isDocumentSchema()) {\n      const replacer = new JsonReplacer();\n      return replacer.replaceInJson(JSON.stringify(this.buffer, replacer.createReplacer(), 0));\n    }\n    return this.buffer;\n  }\n  _write(schema, value, container) {\n    const isObject = value !== null && typeof value === \"object\";\n    const ns = NormalizedSchema.of(schema);\n    if (ns.isListSchema() && Array.isArray(value)) {\n      const listMember = ns.getValueSchema();\n      const out = [];\n      const sparse = !!ns.getMergedTraits().sparse;\n      for (const item of value) {\n        if (sparse || item != null) {\n          out.push(this._write(listMember, item));\n        }\n      }\n      return out;\n    } else if (ns.isMapSchema() && isObject) {\n      const mapMember = ns.getValueSchema();\n      const out = {};\n      const sparse = !!ns.getMergedTraits().sparse;\n      for (const [_k, _v] of Object.entries(value)) {\n        if (sparse || _v != null) {\n          out[_k] = this._write(mapMember, _v);\n        }\n      }\n      return out;\n    } else if (ns.isStructSchema() && isObject) {\n      const out = {};\n      for (const [memberName, memberSchema] of ns.structIterator()) {\n        const targetKey = this.settings.jsonName ? memberSchema.getMergedTraits().jsonName ?? memberName : memberName;\n        const serializableValue = this._write(memberSchema, value[memberName], ns);\n        if (serializableValue !== undefined) {\n          out[targetKey] = serializableValue;\n        }\n      }\n      return out;\n    }\n    if (value === null && container?.isStructSchema()) {\n      return void 0;\n    }\n    if (ns.isBlobSchema() && (value instanceof Uint8Array || typeof value === \"string\")) {\n      if (ns === this.rootSchema) {\n        return value;\n      }\n      if (!this.serdeContext?.base64Encoder) {\n        throw new Error(\"Missing base64Encoder in serdeContext\");\n      }\n      return this.serdeContext?.base64Encoder(value);\n    }\n    if (ns.isTimestampSchema() && value instanceof Date) {\n      const options = this.settings.timestampFormat;\n      const format = options.useTrait ? ns.getSchema() === SCHEMA.TIMESTAMP_DEFAULT ? options.default : ns.getSchema() ?? options.default : options.default;\n      switch (format) {\n        case SCHEMA.TIMESTAMP_DATE_TIME:\n          return value.toISOString().replace(\".000Z\", \"Z\");\n        case SCHEMA.TIMESTAMP_HTTP_DATE:\n          return dateToUtcString(value);\n        case SCHEMA.TIMESTAMP_EPOCH_SECONDS:\n          return value.getTime() / 1000;\n        default:\n          console.warn(\"Missing timestamp format, using epoch seconds\", value);\n          return value.getTime() / 1000;\n      }\n    }\n    if (ns.isNumericSchema() && typeof value === \"number\") {\n      if (Math.abs(value) === Infinity || isNaN(value)) {\n        return String(value);\n      }\n    }\n    if (ns.isStringSchema()) {\n      if (typeof value === \"undefined\" && ns.isIdempotencyToken()) {\n        return generateIdempotencyToken();\n      }\n      const mediaType = ns.getMergedTraits().mediaType;\n      if (typeof value === \"string\" && mediaType) {\n        const isJson = mediaType === \"application/json\" || mediaType.endsWith(\"+json\");\n        if (isJson) {\n          return LazyJsonString.from(value);\n        }\n      }\n    }\n    return value;\n  }\n}","map":{"version":3,"names":["NormalizedSchema","SCHEMA","dateToUtcString","generateIdempotencyToken","LazyJsonString","SerdeContextConfig","JsonReplacer","JsonShapeSerializer","settings","buffer","rootSchema","constructor","write","schema","value","of","_write","flush","isStructSchema","isDocumentSchema","replacer","replaceInJson","JSON","stringify","createReplacer","container","isObject","ns","isListSchema","Array","isArray","listMember","getValueSchema","out","sparse","getMergedTraits","item","push","isMapSchema","mapMember","_k","_v","Object","entries","memberName","memberSchema","structIterator","targetKey","jsonName","serializableValue","undefined","isBlobSchema","Uint8Array","serdeContext","base64Encoder","Error","isTimestampSchema","Date","options","timestampFormat","format","useTrait","getSchema","TIMESTAMP_DEFAULT","default","TIMESTAMP_DATE_TIME","toISOString","replace","TIMESTAMP_HTTP_DATE","TIMESTAMP_EPOCH_SECONDS","getTime","console","warn","isNumericSchema","Math","abs","Infinity","isNaN","String","isStringSchema","isIdempotencyToken","mediaType","isJson","endsWith","from"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/JsonShapeSerializer.js"],"sourcesContent":["import { NormalizedSchema, SCHEMA } from \"@smithy/core/schema\";\nimport { dateToUtcString, generateIdempotencyToken, LazyJsonString } from \"@smithy/core/serde\";\nimport { SerdeContextConfig } from \"../ConfigurableSerdeContext\";\nimport { JsonReplacer } from \"./jsonReplacer\";\nexport class JsonShapeSerializer extends SerdeContextConfig {\n    settings;\n    buffer;\n    rootSchema;\n    constructor(settings) {\n        super();\n        this.settings = settings;\n    }\n    write(schema, value) {\n        this.rootSchema = NormalizedSchema.of(schema);\n        this.buffer = this._write(this.rootSchema, value);\n    }\n    flush() {\n        if (this.rootSchema?.isStructSchema() || this.rootSchema?.isDocumentSchema()) {\n            const replacer = new JsonReplacer();\n            return replacer.replaceInJson(JSON.stringify(this.buffer, replacer.createReplacer(), 0));\n        }\n        return this.buffer;\n    }\n    _write(schema, value, container) {\n        const isObject = value !== null && typeof value === \"object\";\n        const ns = NormalizedSchema.of(schema);\n        if (ns.isListSchema() && Array.isArray(value)) {\n            const listMember = ns.getValueSchema();\n            const out = [];\n            const sparse = !!ns.getMergedTraits().sparse;\n            for (const item of value) {\n                if (sparse || item != null) {\n                    out.push(this._write(listMember, item));\n                }\n            }\n            return out;\n        }\n        else if (ns.isMapSchema() && isObject) {\n            const mapMember = ns.getValueSchema();\n            const out = {};\n            const sparse = !!ns.getMergedTraits().sparse;\n            for (const [_k, _v] of Object.entries(value)) {\n                if (sparse || _v != null) {\n                    out[_k] = this._write(mapMember, _v);\n                }\n            }\n            return out;\n        }\n        else if (ns.isStructSchema() && isObject) {\n            const out = {};\n            for (const [memberName, memberSchema] of ns.structIterator()) {\n                const targetKey = this.settings.jsonName ? memberSchema.getMergedTraits().jsonName ?? memberName : memberName;\n                const serializableValue = this._write(memberSchema, value[memberName], ns);\n                if (serializableValue !== undefined) {\n                    out[targetKey] = serializableValue;\n                }\n            }\n            return out;\n        }\n        if (value === null && container?.isStructSchema()) {\n            return void 0;\n        }\n        if (ns.isBlobSchema() && (value instanceof Uint8Array || typeof value === \"string\")) {\n            if (ns === this.rootSchema) {\n                return value;\n            }\n            if (!this.serdeContext?.base64Encoder) {\n                throw new Error(\"Missing base64Encoder in serdeContext\");\n            }\n            return this.serdeContext?.base64Encoder(value);\n        }\n        if (ns.isTimestampSchema() && value instanceof Date) {\n            const options = this.settings.timestampFormat;\n            const format = options.useTrait\n                ? ns.getSchema() === SCHEMA.TIMESTAMP_DEFAULT\n                    ? options.default\n                    : ns.getSchema() ?? options.default\n                : options.default;\n            switch (format) {\n                case SCHEMA.TIMESTAMP_DATE_TIME:\n                    return value.toISOString().replace(\".000Z\", \"Z\");\n                case SCHEMA.TIMESTAMP_HTTP_DATE:\n                    return dateToUtcString(value);\n                case SCHEMA.TIMESTAMP_EPOCH_SECONDS:\n                    return value.getTime() / 1000;\n                default:\n                    console.warn(\"Missing timestamp format, using epoch seconds\", value);\n                    return value.getTime() / 1000;\n            }\n        }\n        if (ns.isNumericSchema() && typeof value === \"number\") {\n            if (Math.abs(value) === Infinity || isNaN(value)) {\n                return String(value);\n            }\n        }\n        if (ns.isStringSchema()) {\n            if (typeof value === \"undefined\" && ns.isIdempotencyToken()) {\n                return generateIdempotencyToken();\n            }\n            const mediaType = ns.getMergedTraits().mediaType;\n            if (typeof value === \"string\" && mediaType) {\n                const isJson = mediaType === \"application/json\" || mediaType.endsWith(\"+json\");\n                if (isJson) {\n                    return LazyJsonString.from(value);\n                }\n            }\n        }\n        return value;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}