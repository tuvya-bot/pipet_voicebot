{"ast":null,"code":"export const resolveParamsForS3 = async endpointParams => {\n  const bucket = endpointParams?.Bucket || \"\";\n  if (typeof endpointParams.Bucket === \"string\") {\n    endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent(\"#\")).replace(/\\?/g, encodeURIComponent(\"?\"));\n  }\n  if (isArnBucketName(bucket)) {\n    if (endpointParams.ForcePathStyle === true) {\n      throw new Error(\"Path-style addressing cannot be used with ARN buckets\");\n    }\n  } else if (!isDnsCompatibleBucketName(bucket) || bucket.indexOf(\".\") !== -1 && !String(endpointParams.Endpoint).startsWith(\"http:\") || bucket.toLowerCase() !== bucket || bucket.length < 3) {\n    endpointParams.ForcePathStyle = true;\n  }\n  if (endpointParams.DisableMultiRegionAccessPoints) {\n    endpointParams.disableMultiRegionAccessPoints = true;\n    endpointParams.DisableMRAP = true;\n  }\n  return endpointParams;\n};\nconst DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/;\nconst IP_ADDRESS_PATTERN = /(\\d+\\.){3}\\d+/;\nconst DOTS_PATTERN = /\\.\\./;\nexport const DOT_PATTERN = /\\./;\nexport const S3_HOSTNAME_PATTERN = /^(.+\\.)?s3(-fips)?(\\.dualstack)?[.-]([a-z0-9-]+)\\./;\nexport const isDnsCompatibleBucketName = bucketName => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);\nexport const isArnBucketName = bucketName => {\n  const [arn, partition, service,,, bucket] = bucketName.split(\":\");\n  const isArn = arn === \"arn\" && bucketName.split(\":\").length >= 6;\n  const isValidArn = Boolean(isArn && partition && service && bucket);\n  if (isArn && !isValidArn) {\n    throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);\n  }\n  return isValidArn;\n};","map":{"version":3,"names":["resolveParamsForS3","endpointParams","bucket","Bucket","replace","encodeURIComponent","isArnBucketName","ForcePathStyle","Error","isDnsCompatibleBucketName","indexOf","String","Endpoint","startsWith","toLowerCase","length","DisableMultiRegionAccessPoints","disableMultiRegionAccessPoints","DisableMRAP","DOMAIN_PATTERN","IP_ADDRESS_PATTERN","DOTS_PATTERN","DOT_PATTERN","S3_HOSTNAME_PATTERN","bucketName","test","arn","partition","service","split","isArn","isValidArn","Boolean"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@smithy/middleware-endpoint/dist-es/service-customizations/s3.js"],"sourcesContent":["export const resolveParamsForS3 = async (endpointParams) => {\n    const bucket = endpointParams?.Bucket || \"\";\n    if (typeof endpointParams.Bucket === \"string\") {\n        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent(\"#\")).replace(/\\?/g, encodeURIComponent(\"?\"));\n    }\n    if (isArnBucketName(bucket)) {\n        if (endpointParams.ForcePathStyle === true) {\n            throw new Error(\"Path-style addressing cannot be used with ARN buckets\");\n        }\n    }\n    else if (!isDnsCompatibleBucketName(bucket) ||\n        (bucket.indexOf(\".\") !== -1 && !String(endpointParams.Endpoint).startsWith(\"http:\")) ||\n        bucket.toLowerCase() !== bucket ||\n        bucket.length < 3) {\n        endpointParams.ForcePathStyle = true;\n    }\n    if (endpointParams.DisableMultiRegionAccessPoints) {\n        endpointParams.disableMultiRegionAccessPoints = true;\n        endpointParams.DisableMRAP = true;\n    }\n    return endpointParams;\n};\nconst DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/;\nconst IP_ADDRESS_PATTERN = /(\\d+\\.){3}\\d+/;\nconst DOTS_PATTERN = /\\.\\./;\nexport const DOT_PATTERN = /\\./;\nexport const S3_HOSTNAME_PATTERN = /^(.+\\.)?s3(-fips)?(\\.dualstack)?[.-]([a-z0-9-]+)\\./;\nexport const isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);\nexport const isArnBucketName = (bucketName) => {\n    const [arn, partition, service, , , bucket] = bucketName.split(\":\");\n    const isArn = arn === \"arn\" && bucketName.split(\":\").length >= 6;\n    const isValidArn = Boolean(isArn && partition && service && bucket);\n    if (isArn && !isValidArn) {\n        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);\n    }\n    return isValidArn;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,kBAAkB,GAAG,MAAOC,cAAc,IAAK;EACxD,MAAMC,MAAM,GAAGD,cAAc,EAAEE,MAAM,IAAI,EAAE;EAC3C,IAAI,OAAOF,cAAc,CAACE,MAAM,KAAK,QAAQ,EAAE;IAC3CF,cAAc,CAACE,MAAM,GAAGD,MAAM,CAACE,OAAO,CAAC,IAAI,EAAEC,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAACD,OAAO,CAAC,KAAK,EAAEC,kBAAkB,CAAC,GAAG,CAAC,CAAC;EACjH;EACA,IAAIC,eAAe,CAACJ,MAAM,CAAC,EAAE;IACzB,IAAID,cAAc,CAACM,cAAc,KAAK,IAAI,EAAE;MACxC,MAAM,IAAIC,KAAK,CAAC,uDAAuD,CAAC;IAC5E;EACJ,CAAC,MACI,IAAI,CAACC,yBAAyB,CAACP,MAAM,CAAC,IACtCA,MAAM,CAACQ,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAACC,MAAM,CAACV,cAAc,CAACW,QAAQ,CAAC,CAACC,UAAU,CAAC,OAAO,CAAE,IACpFX,MAAM,CAACY,WAAW,CAAC,CAAC,KAAKZ,MAAM,IAC/BA,MAAM,CAACa,MAAM,GAAG,CAAC,EAAE;IACnBd,cAAc,CAACM,cAAc,GAAG,IAAI;EACxC;EACA,IAAIN,cAAc,CAACe,8BAA8B,EAAE;IAC/Cf,cAAc,CAACgB,8BAA8B,GAAG,IAAI;IACpDhB,cAAc,CAACiB,WAAW,GAAG,IAAI;EACrC;EACA,OAAOjB,cAAc;AACzB,CAAC;AACD,MAAMkB,cAAc,GAAG,sCAAsC;AAC7D,MAAMC,kBAAkB,GAAG,eAAe;AAC1C,MAAMC,YAAY,GAAG,MAAM;AAC3B,OAAO,MAAMC,WAAW,GAAG,IAAI;AAC/B,OAAO,MAAMC,mBAAmB,GAAG,oDAAoD;AACvF,OAAO,MAAMd,yBAAyB,GAAIe,UAAU,IAAKL,cAAc,CAACM,IAAI,CAACD,UAAU,CAAC,IAAI,CAACJ,kBAAkB,CAACK,IAAI,CAACD,UAAU,CAAC,IAAI,CAACH,YAAY,CAACI,IAAI,CAACD,UAAU,CAAC;AAClK,OAAO,MAAMlB,eAAe,GAAIkB,UAAU,IAAK;EAC3C,MAAM,CAACE,GAAG,EAAEC,SAAS,EAAEC,OAAO,IAAM1B,MAAM,CAAC,GAAGsB,UAAU,CAACK,KAAK,CAAC,GAAG,CAAC;EACnE,MAAMC,KAAK,GAAGJ,GAAG,KAAK,KAAK,IAAIF,UAAU,CAACK,KAAK,CAAC,GAAG,CAAC,CAACd,MAAM,IAAI,CAAC;EAChE,MAAMgB,UAAU,GAAGC,OAAO,CAACF,KAAK,IAAIH,SAAS,IAAIC,OAAO,IAAI1B,MAAM,CAAC;EACnE,IAAI4B,KAAK,IAAI,CAACC,UAAU,EAAE;IACtB,MAAM,IAAIvB,KAAK,CAAC,gBAAgBgB,UAAU,sBAAsB,CAAC;EACrE;EACA,OAAOO,UAAU;AACrB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}