{"ast":null,"code":"import { Crc32 } from \"@aws-crypto/crc32\";\nimport { HeaderMarshaller } from \"./HeaderMarshaller\";\nimport { splitMessage } from \"./splitMessage\";\nexport class EventStreamCodec {\n  constructor(toUtf8, fromUtf8) {\n    this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);\n    this.messageBuffer = [];\n    this.isEndOfStream = false;\n  }\n  feed(message) {\n    this.messageBuffer.push(this.decode(message));\n  }\n  endOfStream() {\n    this.isEndOfStream = true;\n  }\n  getMessage() {\n    const message = this.messageBuffer.pop();\n    const isEndOfStream = this.isEndOfStream;\n    return {\n      getMessage() {\n        return message;\n      },\n      isEndOfStream() {\n        return isEndOfStream;\n      }\n    };\n  }\n  getAvailableMessages() {\n    const messages = this.messageBuffer;\n    this.messageBuffer = [];\n    const isEndOfStream = this.isEndOfStream;\n    return {\n      getMessages() {\n        return messages;\n      },\n      isEndOfStream() {\n        return isEndOfStream;\n      }\n    };\n  }\n  encode({\n    headers: rawHeaders,\n    body\n  }) {\n    const headers = this.headerMarshaller.format(rawHeaders);\n    const length = headers.byteLength + body.byteLength + 16;\n    const out = new Uint8Array(length);\n    const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    const checksum = new Crc32();\n    view.setUint32(0, length, false);\n    view.setUint32(4, headers.byteLength, false);\n    view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);\n    out.set(headers, 12);\n    out.set(body, headers.byteLength + 12);\n    view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);\n    return out;\n  }\n  decode(message) {\n    const {\n      headers,\n      body\n    } = splitMessage(message);\n    return {\n      headers: this.headerMarshaller.parse(headers),\n      body\n    };\n  }\n  formatHeaders(rawHeaders) {\n    return this.headerMarshaller.format(rawHeaders);\n  }\n}","map":{"version":3,"names":["Crc32","HeaderMarshaller","splitMessage","EventStreamCodec","constructor","toUtf8","fromUtf8","headerMarshaller","messageBuffer","isEndOfStream","feed","message","push","decode","endOfStream","getMessage","pop","getAvailableMessages","messages","getMessages","encode","headers","rawHeaders","body","format","length","byteLength","out","Uint8Array","view","DataView","buffer","byteOffset","checksum","setUint32","update","subarray","digest","set","parse","formatHeaders"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@smithy/eventstream-codec/dist-es/EventStreamCodec.js"],"sourcesContent":["import { Crc32 } from \"@aws-crypto/crc32\";\nimport { HeaderMarshaller } from \"./HeaderMarshaller\";\nimport { splitMessage } from \"./splitMessage\";\nexport class EventStreamCodec {\n    constructor(toUtf8, fromUtf8) {\n        this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);\n        this.messageBuffer = [];\n        this.isEndOfStream = false;\n    }\n    feed(message) {\n        this.messageBuffer.push(this.decode(message));\n    }\n    endOfStream() {\n        this.isEndOfStream = true;\n    }\n    getMessage() {\n        const message = this.messageBuffer.pop();\n        const isEndOfStream = this.isEndOfStream;\n        return {\n            getMessage() {\n                return message;\n            },\n            isEndOfStream() {\n                return isEndOfStream;\n            },\n        };\n    }\n    getAvailableMessages() {\n        const messages = this.messageBuffer;\n        this.messageBuffer = [];\n        const isEndOfStream = this.isEndOfStream;\n        return {\n            getMessages() {\n                return messages;\n            },\n            isEndOfStream() {\n                return isEndOfStream;\n            },\n        };\n    }\n    encode({ headers: rawHeaders, body }) {\n        const headers = this.headerMarshaller.format(rawHeaders);\n        const length = headers.byteLength + body.byteLength + 16;\n        const out = new Uint8Array(length);\n        const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n        const checksum = new Crc32();\n        view.setUint32(0, length, false);\n        view.setUint32(4, headers.byteLength, false);\n        view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);\n        out.set(headers, 12);\n        out.set(body, headers.byteLength + 12);\n        view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);\n        return out;\n    }\n    decode(message) {\n        const { headers, body } = splitMessage(message);\n        return { headers: this.headerMarshaller.parse(headers), body };\n    }\n    formatHeaders(rawHeaders) {\n        return this.headerMarshaller.format(rawHeaders);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}