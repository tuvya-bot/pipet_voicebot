{"ast":null,"code":"export const createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {\n  const configProvider = async () => {\n    const configValue = config[configKey] ?? config[canonicalEndpointParamKey];\n    if (typeof configValue === \"function\") {\n      return configValue();\n    }\n    return configValue;\n  };\n  if (configKey === \"credentialScope\" || canonicalEndpointParamKey === \"CredentialScope\") {\n    return async () => {\n      const credentials = typeof config.credentials === \"function\" ? await config.credentials() : config.credentials;\n      const configValue = credentials?.credentialScope ?? credentials?.CredentialScope;\n      return configValue;\n    };\n  }\n  if (configKey === \"accountId\" || canonicalEndpointParamKey === \"AccountId\") {\n    return async () => {\n      const credentials = typeof config.credentials === \"function\" ? await config.credentials() : config.credentials;\n      const configValue = credentials?.accountId ?? credentials?.AccountId;\n      return configValue;\n    };\n  }\n  if (configKey === \"endpoint\" || canonicalEndpointParamKey === \"endpoint\") {\n    return async () => {\n      if (config.isCustomEndpoint === false) {\n        return undefined;\n      }\n      const endpoint = await configProvider();\n      if (endpoint && typeof endpoint === \"object\") {\n        if (\"url\" in endpoint) {\n          return endpoint.url.href;\n        }\n        if (\"hostname\" in endpoint) {\n          const {\n            protocol,\n            hostname,\n            port,\n            path\n          } = endpoint;\n          return `${protocol}//${hostname}${port ? \":\" + port : \"\"}${path}`;\n        }\n      }\n      return endpoint;\n    };\n  }\n  return configProvider;\n};","map":{"version":3,"names":["createConfigValueProvider","configKey","canonicalEndpointParamKey","config","configProvider","configValue","credentials","credentialScope","CredentialScope","accountId","AccountId","isCustomEndpoint","undefined","endpoint","url","href","protocol","hostname","port","path"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/createConfigValueProvider.js"],"sourcesContent":["export const createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {\n    const configProvider = async () => {\n        const configValue = config[configKey] ?? config[canonicalEndpointParamKey];\n        if (typeof configValue === \"function\") {\n            return configValue();\n        }\n        return configValue;\n    };\n    if (configKey === \"credentialScope\" || canonicalEndpointParamKey === \"CredentialScope\") {\n        return async () => {\n            const credentials = typeof config.credentials === \"function\" ? await config.credentials() : config.credentials;\n            const configValue = credentials?.credentialScope ?? credentials?.CredentialScope;\n            return configValue;\n        };\n    }\n    if (configKey === \"accountId\" || canonicalEndpointParamKey === \"AccountId\") {\n        return async () => {\n            const credentials = typeof config.credentials === \"function\" ? await config.credentials() : config.credentials;\n            const configValue = credentials?.accountId ?? credentials?.AccountId;\n            return configValue;\n        };\n    }\n    if (configKey === \"endpoint\" || canonicalEndpointParamKey === \"endpoint\") {\n        return async () => {\n            if (config.isCustomEndpoint === false) {\n                return undefined;\n            }\n            const endpoint = await configProvider();\n            if (endpoint && typeof endpoint === \"object\") {\n                if (\"url\" in endpoint) {\n                    return endpoint.url.href;\n                }\n                if (\"hostname\" in endpoint) {\n                    const { protocol, hostname, port, path } = endpoint;\n                    return `${protocol}//${hostname}${port ? \":\" + port : \"\"}${path}`;\n                }\n            }\n            return endpoint;\n        };\n    }\n    return configProvider;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,yBAAyB,GAAGA,CAACC,SAAS,EAAEC,yBAAyB,EAAEC,MAAM,KAAK;EACvF,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMC,WAAW,GAAGF,MAAM,CAACF,SAAS,CAAC,IAAIE,MAAM,CAACD,yBAAyB,CAAC;IAC1E,IAAI,OAAOG,WAAW,KAAK,UAAU,EAAE;MACnC,OAAOA,WAAW,CAAC,CAAC;IACxB;IACA,OAAOA,WAAW;EACtB,CAAC;EACD,IAAIJ,SAAS,KAAK,iBAAiB,IAAIC,yBAAyB,KAAK,iBAAiB,EAAE;IACpF,OAAO,YAAY;MACf,MAAMI,WAAW,GAAG,OAAOH,MAAM,CAACG,WAAW,KAAK,UAAU,GAAG,MAAMH,MAAM,CAACG,WAAW,CAAC,CAAC,GAAGH,MAAM,CAACG,WAAW;MAC9G,MAAMD,WAAW,GAAGC,WAAW,EAAEC,eAAe,IAAID,WAAW,EAAEE,eAAe;MAChF,OAAOH,WAAW;IACtB,CAAC;EACL;EACA,IAAIJ,SAAS,KAAK,WAAW,IAAIC,yBAAyB,KAAK,WAAW,EAAE;IACxE,OAAO,YAAY;MACf,MAAMI,WAAW,GAAG,OAAOH,MAAM,CAACG,WAAW,KAAK,UAAU,GAAG,MAAMH,MAAM,CAACG,WAAW,CAAC,CAAC,GAAGH,MAAM,CAACG,WAAW;MAC9G,MAAMD,WAAW,GAAGC,WAAW,EAAEG,SAAS,IAAIH,WAAW,EAAEI,SAAS;MACpE,OAAOL,WAAW;IACtB,CAAC;EACL;EACA,IAAIJ,SAAS,KAAK,UAAU,IAAIC,yBAAyB,KAAK,UAAU,EAAE;IACtE,OAAO,YAAY;MACf,IAAIC,MAAM,CAACQ,gBAAgB,KAAK,KAAK,EAAE;QACnC,OAAOC,SAAS;MACpB;MACA,MAAMC,QAAQ,GAAG,MAAMT,cAAc,CAAC,CAAC;MACvC,IAAIS,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;QAC1C,IAAI,KAAK,IAAIA,QAAQ,EAAE;UACnB,OAAOA,QAAQ,CAACC,GAAG,CAACC,IAAI;QAC5B;QACA,IAAI,UAAU,IAAIF,QAAQ,EAAE;UACxB,MAAM;YAAEG,QAAQ;YAAEC,QAAQ;YAAEC,IAAI;YAAEC;UAAK,CAAC,GAAGN,QAAQ;UACnD,OAAO,GAAGG,QAAQ,KAAKC,QAAQ,GAAGC,IAAI,GAAG,GAAG,GAAGA,IAAI,GAAG,EAAE,GAAGC,IAAI,EAAE;QACrE;MACJ;MACA,OAAON,QAAQ;IACnB,CAAC;EACL;EACA,OAAOT,cAAc;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}