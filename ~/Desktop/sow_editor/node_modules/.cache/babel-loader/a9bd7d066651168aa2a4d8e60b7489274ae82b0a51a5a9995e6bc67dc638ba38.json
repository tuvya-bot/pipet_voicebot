{"ast":null,"code":"import { determineTimestampFormat, extendedEncodeURIComponent } from \"@smithy/core/protocols\";\nimport { NormalizedSchema, SCHEMA } from \"@smithy/core/schema\";\nimport { generateIdempotencyToken, NumericValue } from \"@smithy/core/serde\";\nimport { dateToUtcString } from \"@smithy/smithy-client\";\nimport { toBase64 } from \"@smithy/util-base64\";\nimport { SerdeContextConfig } from \"../ConfigurableSerdeContext\";\nexport class QueryShapeSerializer extends SerdeContextConfig {\n  settings;\n  buffer;\n  constructor(settings) {\n    super();\n    this.settings = settings;\n  }\n  write(schema, value, prefix = \"\") {\n    if (this.buffer === undefined) {\n      this.buffer = \"\";\n    }\n    const ns = NormalizedSchema.of(schema);\n    if (prefix && !prefix.endsWith(\".\")) {\n      prefix += \".\";\n    }\n    if (ns.isBlobSchema()) {\n      if (typeof value === \"string\" || value instanceof Uint8Array) {\n        this.writeKey(prefix);\n        this.writeValue((this.serdeContext?.base64Encoder ?? toBase64)(value));\n      }\n    } else if (ns.isBooleanSchema() || ns.isNumericSchema() || ns.isStringSchema()) {\n      if (value != null) {\n        this.writeKey(prefix);\n        this.writeValue(String(value));\n      } else if (ns.isIdempotencyToken()) {\n        this.writeKey(prefix);\n        this.writeValue(generateIdempotencyToken());\n      }\n    } else if (ns.isBigIntegerSchema()) {\n      if (value != null) {\n        this.writeKey(prefix);\n        this.writeValue(String(value));\n      }\n    } else if (ns.isBigDecimalSchema()) {\n      if (value != null) {\n        this.writeKey(prefix);\n        this.writeValue(value instanceof NumericValue ? value.string : String(value));\n      }\n    } else if (ns.isTimestampSchema()) {\n      if (value instanceof Date) {\n        this.writeKey(prefix);\n        const format = determineTimestampFormat(ns, this.settings);\n        switch (format) {\n          case SCHEMA.TIMESTAMP_DATE_TIME:\n            this.writeValue(value.toISOString().replace(\".000Z\", \"Z\"));\n            break;\n          case SCHEMA.TIMESTAMP_HTTP_DATE:\n            this.writeValue(dateToUtcString(value));\n            break;\n          case SCHEMA.TIMESTAMP_EPOCH_SECONDS:\n            this.writeValue(String(value.getTime() / 1000));\n            break;\n        }\n      }\n    } else if (ns.isDocumentSchema()) {\n      throw new Error(`@aws-sdk/core/protocols - QuerySerializer unsupported document type ${ns.getName(true)}`);\n    } else if (ns.isListSchema()) {\n      if (Array.isArray(value)) {\n        if (value.length === 0) {\n          if (this.settings.serializeEmptyLists) {\n            this.writeKey(prefix);\n            this.writeValue(\"\");\n          }\n        } else {\n          const member = ns.getValueSchema();\n          const flat = this.settings.flattenLists || ns.getMergedTraits().xmlFlattened;\n          let i = 1;\n          for (const item of value) {\n            if (item == null) {\n              continue;\n            }\n            const suffix = this.getKey(\"member\", member.getMergedTraits().xmlName);\n            const key = flat ? `${prefix}${i}` : `${prefix}${suffix}.${i}`;\n            this.write(member, item, key);\n            ++i;\n          }\n        }\n      }\n    } else if (ns.isMapSchema()) {\n      if (value && typeof value === \"object\") {\n        const keySchema = ns.getKeySchema();\n        const memberSchema = ns.getValueSchema();\n        const flat = ns.getMergedTraits().xmlFlattened;\n        let i = 1;\n        for (const [k, v] of Object.entries(value)) {\n          if (v == null) {\n            continue;\n          }\n          const keySuffix = this.getKey(\"key\", keySchema.getMergedTraits().xmlName);\n          const key = flat ? `${prefix}${i}.${keySuffix}` : `${prefix}entry.${i}.${keySuffix}`;\n          const valueSuffix = this.getKey(\"value\", memberSchema.getMergedTraits().xmlName);\n          const valueKey = flat ? `${prefix}${i}.${valueSuffix}` : `${prefix}entry.${i}.${valueSuffix}`;\n          this.write(keySchema, k, key);\n          this.write(memberSchema, v, valueKey);\n          ++i;\n        }\n      }\n    } else if (ns.isStructSchema()) {\n      if (value && typeof value === \"object\") {\n        for (const [memberName, member] of ns.structIterator()) {\n          if (value[memberName] == null && !member.isIdempotencyToken()) {\n            continue;\n          }\n          const suffix = this.getKey(memberName, member.getMergedTraits().xmlName);\n          const key = `${prefix}${suffix}`;\n          this.write(member, value[memberName], key);\n        }\n      }\n    } else if (ns.isUnitSchema()) {} else {\n      throw new Error(`@aws-sdk/core/protocols - QuerySerializer unrecognized schema type ${ns.getName(true)}`);\n    }\n  }\n  flush() {\n    if (this.buffer === undefined) {\n      throw new Error(\"@aws-sdk/core/protocols - QuerySerializer cannot flush with nothing written to buffer.\");\n    }\n    const str = this.buffer;\n    delete this.buffer;\n    return str;\n  }\n  getKey(memberName, xmlName) {\n    const key = xmlName ?? memberName;\n    if (this.settings.capitalizeKeys) {\n      return key[0].toUpperCase() + key.slice(1);\n    }\n    return key;\n  }\n  writeKey(key) {\n    if (key.endsWith(\".\")) {\n      key = key.slice(0, key.length - 1);\n    }\n    this.buffer += `&${extendedEncodeURIComponent(key)}=`;\n  }\n  writeValue(value) {\n    this.buffer += extendedEncodeURIComponent(value);\n  }\n}","map":{"version":3,"names":["determineTimestampFormat","extendedEncodeURIComponent","NormalizedSchema","SCHEMA","generateIdempotencyToken","NumericValue","dateToUtcString","toBase64","SerdeContextConfig","QueryShapeSerializer","settings","buffer","constructor","write","schema","value","prefix","undefined","ns","of","endsWith","isBlobSchema","Uint8Array","writeKey","writeValue","serdeContext","base64Encoder","isBooleanSchema","isNumericSchema","isStringSchema","String","isIdempotencyToken","isBigIntegerSchema","isBigDecimalSchema","string","isTimestampSchema","Date","format","TIMESTAMP_DATE_TIME","toISOString","replace","TIMESTAMP_HTTP_DATE","TIMESTAMP_EPOCH_SECONDS","getTime","isDocumentSchema","Error","getName","isListSchema","Array","isArray","length","serializeEmptyLists","member","getValueSchema","flat","flattenLists","getMergedTraits","xmlFlattened","i","item","suffix","getKey","xmlName","key","isMapSchema","keySchema","getKeySchema","memberSchema","k","v","Object","entries","keySuffix","valueSuffix","valueKey","isStructSchema","memberName","structIterator","isUnitSchema","flush","str","capitalizeKeys","toUpperCase","slice"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@aws-sdk/core/dist-es/submodules/protocols/query/QueryShapeSerializer.js"],"sourcesContent":["import { determineTimestampFormat, extendedEncodeURIComponent } from \"@smithy/core/protocols\";\nimport { NormalizedSchema, SCHEMA } from \"@smithy/core/schema\";\nimport { generateIdempotencyToken, NumericValue } from \"@smithy/core/serde\";\nimport { dateToUtcString } from \"@smithy/smithy-client\";\nimport { toBase64 } from \"@smithy/util-base64\";\nimport { SerdeContextConfig } from \"../ConfigurableSerdeContext\";\nexport class QueryShapeSerializer extends SerdeContextConfig {\n    settings;\n    buffer;\n    constructor(settings) {\n        super();\n        this.settings = settings;\n    }\n    write(schema, value, prefix = \"\") {\n        if (this.buffer === undefined) {\n            this.buffer = \"\";\n        }\n        const ns = NormalizedSchema.of(schema);\n        if (prefix && !prefix.endsWith(\".\")) {\n            prefix += \".\";\n        }\n        if (ns.isBlobSchema()) {\n            if (typeof value === \"string\" || value instanceof Uint8Array) {\n                this.writeKey(prefix);\n                this.writeValue((this.serdeContext?.base64Encoder ?? toBase64)(value));\n            }\n        }\n        else if (ns.isBooleanSchema() || ns.isNumericSchema() || ns.isStringSchema()) {\n            if (value != null) {\n                this.writeKey(prefix);\n                this.writeValue(String(value));\n            }\n            else if (ns.isIdempotencyToken()) {\n                this.writeKey(prefix);\n                this.writeValue(generateIdempotencyToken());\n            }\n        }\n        else if (ns.isBigIntegerSchema()) {\n            if (value != null) {\n                this.writeKey(prefix);\n                this.writeValue(String(value));\n            }\n        }\n        else if (ns.isBigDecimalSchema()) {\n            if (value != null) {\n                this.writeKey(prefix);\n                this.writeValue(value instanceof NumericValue ? value.string : String(value));\n            }\n        }\n        else if (ns.isTimestampSchema()) {\n            if (value instanceof Date) {\n                this.writeKey(prefix);\n                const format = determineTimestampFormat(ns, this.settings);\n                switch (format) {\n                    case SCHEMA.TIMESTAMP_DATE_TIME:\n                        this.writeValue(value.toISOString().replace(\".000Z\", \"Z\"));\n                        break;\n                    case SCHEMA.TIMESTAMP_HTTP_DATE:\n                        this.writeValue(dateToUtcString(value));\n                        break;\n                    case SCHEMA.TIMESTAMP_EPOCH_SECONDS:\n                        this.writeValue(String(value.getTime() / 1000));\n                        break;\n                }\n            }\n        }\n        else if (ns.isDocumentSchema()) {\n            throw new Error(`@aws-sdk/core/protocols - QuerySerializer unsupported document type ${ns.getName(true)}`);\n        }\n        else if (ns.isListSchema()) {\n            if (Array.isArray(value)) {\n                if (value.length === 0) {\n                    if (this.settings.serializeEmptyLists) {\n                        this.writeKey(prefix);\n                        this.writeValue(\"\");\n                    }\n                }\n                else {\n                    const member = ns.getValueSchema();\n                    const flat = this.settings.flattenLists || ns.getMergedTraits().xmlFlattened;\n                    let i = 1;\n                    for (const item of value) {\n                        if (item == null) {\n                            continue;\n                        }\n                        const suffix = this.getKey(\"member\", member.getMergedTraits().xmlName);\n                        const key = flat ? `${prefix}${i}` : `${prefix}${suffix}.${i}`;\n                        this.write(member, item, key);\n                        ++i;\n                    }\n                }\n            }\n        }\n        else if (ns.isMapSchema()) {\n            if (value && typeof value === \"object\") {\n                const keySchema = ns.getKeySchema();\n                const memberSchema = ns.getValueSchema();\n                const flat = ns.getMergedTraits().xmlFlattened;\n                let i = 1;\n                for (const [k, v] of Object.entries(value)) {\n                    if (v == null) {\n                        continue;\n                    }\n                    const keySuffix = this.getKey(\"key\", keySchema.getMergedTraits().xmlName);\n                    const key = flat ? `${prefix}${i}.${keySuffix}` : `${prefix}entry.${i}.${keySuffix}`;\n                    const valueSuffix = this.getKey(\"value\", memberSchema.getMergedTraits().xmlName);\n                    const valueKey = flat ? `${prefix}${i}.${valueSuffix}` : `${prefix}entry.${i}.${valueSuffix}`;\n                    this.write(keySchema, k, key);\n                    this.write(memberSchema, v, valueKey);\n                    ++i;\n                }\n            }\n        }\n        else if (ns.isStructSchema()) {\n            if (value && typeof value === \"object\") {\n                for (const [memberName, member] of ns.structIterator()) {\n                    if (value[memberName] == null && !member.isIdempotencyToken()) {\n                        continue;\n                    }\n                    const suffix = this.getKey(memberName, member.getMergedTraits().xmlName);\n                    const key = `${prefix}${suffix}`;\n                    this.write(member, value[memberName], key);\n                }\n            }\n        }\n        else if (ns.isUnitSchema()) {\n        }\n        else {\n            throw new Error(`@aws-sdk/core/protocols - QuerySerializer unrecognized schema type ${ns.getName(true)}`);\n        }\n    }\n    flush() {\n        if (this.buffer === undefined) {\n            throw new Error(\"@aws-sdk/core/protocols - QuerySerializer cannot flush with nothing written to buffer.\");\n        }\n        const str = this.buffer;\n        delete this.buffer;\n        return str;\n    }\n    getKey(memberName, xmlName) {\n        const key = xmlName ?? memberName;\n        if (this.settings.capitalizeKeys) {\n            return key[0].toUpperCase() + key.slice(1);\n        }\n        return key;\n    }\n    writeKey(key) {\n        if (key.endsWith(\".\")) {\n            key = key.slice(0, key.length - 1);\n        }\n        this.buffer += `&${extendedEncodeURIComponent(key)}=`;\n    }\n    writeValue(value) {\n        this.buffer += extendedEncodeURIComponent(value);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}