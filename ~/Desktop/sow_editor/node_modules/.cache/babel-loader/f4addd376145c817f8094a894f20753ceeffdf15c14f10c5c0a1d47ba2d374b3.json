{"ast":null,"code":"import { NormalizedSchema } from \"@smithy/core/schema\";\nimport { HttpRequest, HttpResponse } from \"@smithy/protocol-http\";\nexport class HttpProtocol {\n  constructor(options) {\n    this.options = options;\n  }\n  getRequestType() {\n    return HttpRequest;\n  }\n  getResponseType() {\n    return HttpResponse;\n  }\n  setSerdeContext(serdeContext) {\n    this.serdeContext = serdeContext;\n    this.serializer.setSerdeContext(serdeContext);\n    this.deserializer.setSerdeContext(serdeContext);\n    if (this.getPayloadCodec()) {\n      this.getPayloadCodec().setSerdeContext(serdeContext);\n    }\n  }\n  updateServiceEndpoint(request, endpoint) {\n    if (\"url\" in endpoint) {\n      request.protocol = endpoint.url.protocol;\n      request.hostname = endpoint.url.hostname;\n      request.port = endpoint.url.port ? Number(endpoint.url.port) : undefined;\n      request.path = endpoint.url.pathname;\n      request.fragment = endpoint.url.hash || void 0;\n      request.username = endpoint.url.username || void 0;\n      request.password = endpoint.url.password || void 0;\n      for (const [k, v] of endpoint.url.searchParams.entries()) {\n        if (!request.query) {\n          request.query = {};\n        }\n        request.query[k] = v;\n      }\n      return request;\n    } else {\n      request.protocol = endpoint.protocol;\n      request.hostname = endpoint.hostname;\n      request.port = endpoint.port ? Number(endpoint.port) : undefined;\n      request.path = endpoint.path;\n      request.query = {\n        ...endpoint.query\n      };\n      return request;\n    }\n  }\n  setHostPrefix(request, operationSchema, input) {\n    const operationNs = NormalizedSchema.of(operationSchema);\n    const inputNs = NormalizedSchema.of(operationSchema.input);\n    if (operationNs.getMergedTraits().endpoint) {\n      let hostPrefix = operationNs.getMergedTraits().endpoint?.[0];\n      if (typeof hostPrefix === \"string\") {\n        const hostLabelInputs = [...inputNs.structIterator()].filter(([, member]) => member.getMergedTraits().hostLabel);\n        for (const [name] of hostLabelInputs) {\n          const replacement = input[name];\n          if (typeof replacement !== \"string\") {\n            throw new Error(`@smithy/core/schema - ${name} in input must be a string as hostLabel.`);\n          }\n          hostPrefix = hostPrefix.replace(`{${name}}`, replacement);\n        }\n        request.hostname = hostPrefix + request.hostname;\n      }\n    }\n  }\n  deserializeMetadata(output) {\n    return {\n      httpStatusCode: output.statusCode,\n      requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n      extendedRequestId: output.headers[\"x-amz-id-2\"],\n      cfId: output.headers[\"x-amz-cf-id\"]\n    };\n  }\n  async deserializeHttpMessage(schema, context, response, arg4, arg5) {\n    void schema;\n    void context;\n    void response;\n    void arg4;\n    void arg5;\n    return [];\n  }\n}","map":{"version":3,"names":["NormalizedSchema","HttpRequest","HttpResponse","HttpProtocol","constructor","options","getRequestType","getResponseType","setSerdeContext","serdeContext","serializer","deserializer","getPayloadCodec","updateServiceEndpoint","request","endpoint","protocol","url","hostname","port","Number","undefined","path","pathname","fragment","hash","username","password","k","v","searchParams","entries","query","setHostPrefix","operationSchema","input","operationNs","of","inputNs","getMergedTraits","hostPrefix","hostLabelInputs","structIterator","filter","member","hostLabel","name","replacement","Error","replace","deserializeMetadata","output","httpStatusCode","statusCode","requestId","headers","extendedRequestId","cfId","deserializeHttpMessage","schema","context","response","arg4","arg5"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@smithy/core/dist-es/submodules/protocols/HttpProtocol.js"],"sourcesContent":["import { NormalizedSchema } from \"@smithy/core/schema\";\nimport { HttpRequest, HttpResponse } from \"@smithy/protocol-http\";\nexport class HttpProtocol {\n    constructor(options) {\n        this.options = options;\n    }\n    getRequestType() {\n        return HttpRequest;\n    }\n    getResponseType() {\n        return HttpResponse;\n    }\n    setSerdeContext(serdeContext) {\n        this.serdeContext = serdeContext;\n        this.serializer.setSerdeContext(serdeContext);\n        this.deserializer.setSerdeContext(serdeContext);\n        if (this.getPayloadCodec()) {\n            this.getPayloadCodec().setSerdeContext(serdeContext);\n        }\n    }\n    updateServiceEndpoint(request, endpoint) {\n        if (\"url\" in endpoint) {\n            request.protocol = endpoint.url.protocol;\n            request.hostname = endpoint.url.hostname;\n            request.port = endpoint.url.port ? Number(endpoint.url.port) : undefined;\n            request.path = endpoint.url.pathname;\n            request.fragment = endpoint.url.hash || void 0;\n            request.username = endpoint.url.username || void 0;\n            request.password = endpoint.url.password || void 0;\n            for (const [k, v] of endpoint.url.searchParams.entries()) {\n                if (!request.query) {\n                    request.query = {};\n                }\n                request.query[k] = v;\n            }\n            return request;\n        }\n        else {\n            request.protocol = endpoint.protocol;\n            request.hostname = endpoint.hostname;\n            request.port = endpoint.port ? Number(endpoint.port) : undefined;\n            request.path = endpoint.path;\n            request.query = {\n                ...endpoint.query,\n            };\n            return request;\n        }\n    }\n    setHostPrefix(request, operationSchema, input) {\n        const operationNs = NormalizedSchema.of(operationSchema);\n        const inputNs = NormalizedSchema.of(operationSchema.input);\n        if (operationNs.getMergedTraits().endpoint) {\n            let hostPrefix = operationNs.getMergedTraits().endpoint?.[0];\n            if (typeof hostPrefix === \"string\") {\n                const hostLabelInputs = [...inputNs.structIterator()].filter(([, member]) => member.getMergedTraits().hostLabel);\n                for (const [name] of hostLabelInputs) {\n                    const replacement = input[name];\n                    if (typeof replacement !== \"string\") {\n                        throw new Error(`@smithy/core/schema - ${name} in input must be a string as hostLabel.`);\n                    }\n                    hostPrefix = hostPrefix.replace(`{${name}}`, replacement);\n                }\n                request.hostname = hostPrefix + request.hostname;\n            }\n        }\n    }\n    deserializeMetadata(output) {\n        return {\n            httpStatusCode: output.statusCode,\n            requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n            extendedRequestId: output.headers[\"x-amz-id-2\"],\n            cfId: output.headers[\"x-amz-cf-id\"],\n        };\n    }\n    async deserializeHttpMessage(schema, context, response, arg4, arg5) {\n        void schema;\n        void context;\n        void response;\n        void arg4;\n        void arg5;\n        return [];\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}