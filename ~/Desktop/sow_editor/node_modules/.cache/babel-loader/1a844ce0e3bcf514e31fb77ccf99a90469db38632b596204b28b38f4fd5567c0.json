{"ast":null,"code":"import { NormalizedSchema, SCHEMA } from \"@smithy/core/schema\";\nimport { LazyJsonString, NumericValue, parseEpochTimestamp, parseRfc3339DateTimeWithOffset, parseRfc7231DateTime } from \"@smithy/core/serde\";\nimport { fromBase64 } from \"@smithy/util-base64\";\nimport { SerdeContextConfig } from \"../ConfigurableSerdeContext\";\nimport { jsonReviver } from \"./jsonReviver\";\nimport { parseJsonBody } from \"./parseJsonBody\";\nexport class JsonShapeDeserializer extends SerdeContextConfig {\n  settings;\n  constructor(settings) {\n    super();\n    this.settings = settings;\n  }\n  async read(schema, data) {\n    return this._read(schema, typeof data === \"string\" ? JSON.parse(data, jsonReviver) : await parseJsonBody(data, this.serdeContext));\n  }\n  readObject(schema, data) {\n    return this._read(schema, data);\n  }\n  _read(schema, value) {\n    const isObject = value !== null && typeof value === \"object\";\n    const ns = NormalizedSchema.of(schema);\n    if (ns.isListSchema() && Array.isArray(value)) {\n      const listMember = ns.getValueSchema();\n      const out = [];\n      const sparse = !!ns.getMergedTraits().sparse;\n      for (const item of value) {\n        if (sparse || item != null) {\n          out.push(this._read(listMember, item));\n        }\n      }\n      return out;\n    } else if (ns.isMapSchema() && isObject) {\n      const mapMember = ns.getValueSchema();\n      const out = {};\n      const sparse = !!ns.getMergedTraits().sparse;\n      for (const [_k, _v] of Object.entries(value)) {\n        if (sparse || _v != null) {\n          out[_k] = this._read(mapMember, _v);\n        }\n      }\n      return out;\n    } else if (ns.isStructSchema() && isObject) {\n      const out = {};\n      for (const [memberName, memberSchema] of ns.structIterator()) {\n        const fromKey = this.settings.jsonName ? memberSchema.getMergedTraits().jsonName ?? memberName : memberName;\n        const deserializedValue = this._read(memberSchema, value[fromKey]);\n        if (deserializedValue != null) {\n          out[memberName] = deserializedValue;\n        }\n      }\n      return out;\n    }\n    if (ns.isBlobSchema() && typeof value === \"string\") {\n      return fromBase64(value);\n    }\n    const mediaType = ns.getMergedTraits().mediaType;\n    if (ns.isStringSchema() && typeof value === \"string\" && mediaType) {\n      const isJson = mediaType === \"application/json\" || mediaType.endsWith(\"+json\");\n      if (isJson) {\n        return LazyJsonString.from(value);\n      }\n    }\n    if (ns.isTimestampSchema()) {\n      const options = this.settings.timestampFormat;\n      const format = options.useTrait ? ns.getSchema() === SCHEMA.TIMESTAMP_DEFAULT ? options.default : ns.getSchema() ?? options.default : options.default;\n      switch (format) {\n        case SCHEMA.TIMESTAMP_DATE_TIME:\n          return parseRfc3339DateTimeWithOffset(value);\n        case SCHEMA.TIMESTAMP_HTTP_DATE:\n          return parseRfc7231DateTime(value);\n        case SCHEMA.TIMESTAMP_EPOCH_SECONDS:\n          return parseEpochTimestamp(value);\n        default:\n          console.warn(\"Missing timestamp format, parsing value with Date constructor:\", value);\n          return new Date(value);\n      }\n    }\n    if (ns.isBigIntegerSchema() && (typeof value === \"number\" || typeof value === \"string\")) {\n      return BigInt(value);\n    }\n    if (ns.isBigDecimalSchema() && value != undefined) {\n      if (value instanceof NumericValue) {\n        return value;\n      }\n      return new NumericValue(String(value), \"bigDecimal\");\n    }\n    if (ns.isNumericSchema() && typeof value === \"string\") {\n      switch (value) {\n        case \"Infinity\":\n          return Infinity;\n        case \"-Infinity\":\n          return -Infinity;\n        case \"NaN\":\n          return NaN;\n      }\n    }\n    return value;\n  }\n}","map":{"version":3,"names":["NormalizedSchema","SCHEMA","LazyJsonString","NumericValue","parseEpochTimestamp","parseRfc3339DateTimeWithOffset","parseRfc7231DateTime","fromBase64","SerdeContextConfig","jsonReviver","parseJsonBody","JsonShapeDeserializer","settings","constructor","read","schema","data","_read","JSON","parse","serdeContext","readObject","value","isObject","ns","of","isListSchema","Array","isArray","listMember","getValueSchema","out","sparse","getMergedTraits","item","push","isMapSchema","mapMember","_k","_v","Object","entries","isStructSchema","memberName","memberSchema","structIterator","fromKey","jsonName","deserializedValue","isBlobSchema","mediaType","isStringSchema","isJson","endsWith","from","isTimestampSchema","options","timestampFormat","format","useTrait","getSchema","TIMESTAMP_DEFAULT","default","TIMESTAMP_DATE_TIME","TIMESTAMP_HTTP_DATE","TIMESTAMP_EPOCH_SECONDS","console","warn","Date","isBigIntegerSchema","BigInt","isBigDecimalSchema","undefined","String","isNumericSchema","Infinity","NaN"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/JsonShapeDeserializer.js"],"sourcesContent":["import { NormalizedSchema, SCHEMA } from \"@smithy/core/schema\";\nimport { LazyJsonString, NumericValue, parseEpochTimestamp, parseRfc3339DateTimeWithOffset, parseRfc7231DateTime, } from \"@smithy/core/serde\";\nimport { fromBase64 } from \"@smithy/util-base64\";\nimport { SerdeContextConfig } from \"../ConfigurableSerdeContext\";\nimport { jsonReviver } from \"./jsonReviver\";\nimport { parseJsonBody } from \"./parseJsonBody\";\nexport class JsonShapeDeserializer extends SerdeContextConfig {\n    settings;\n    constructor(settings) {\n        super();\n        this.settings = settings;\n    }\n    async read(schema, data) {\n        return this._read(schema, typeof data === \"string\" ? JSON.parse(data, jsonReviver) : await parseJsonBody(data, this.serdeContext));\n    }\n    readObject(schema, data) {\n        return this._read(schema, data);\n    }\n    _read(schema, value) {\n        const isObject = value !== null && typeof value === \"object\";\n        const ns = NormalizedSchema.of(schema);\n        if (ns.isListSchema() && Array.isArray(value)) {\n            const listMember = ns.getValueSchema();\n            const out = [];\n            const sparse = !!ns.getMergedTraits().sparse;\n            for (const item of value) {\n                if (sparse || item != null) {\n                    out.push(this._read(listMember, item));\n                }\n            }\n            return out;\n        }\n        else if (ns.isMapSchema() && isObject) {\n            const mapMember = ns.getValueSchema();\n            const out = {};\n            const sparse = !!ns.getMergedTraits().sparse;\n            for (const [_k, _v] of Object.entries(value)) {\n                if (sparse || _v != null) {\n                    out[_k] = this._read(mapMember, _v);\n                }\n            }\n            return out;\n        }\n        else if (ns.isStructSchema() && isObject) {\n            const out = {};\n            for (const [memberName, memberSchema] of ns.structIterator()) {\n                const fromKey = this.settings.jsonName ? memberSchema.getMergedTraits().jsonName ?? memberName : memberName;\n                const deserializedValue = this._read(memberSchema, value[fromKey]);\n                if (deserializedValue != null) {\n                    out[memberName] = deserializedValue;\n                }\n            }\n            return out;\n        }\n        if (ns.isBlobSchema() && typeof value === \"string\") {\n            return fromBase64(value);\n        }\n        const mediaType = ns.getMergedTraits().mediaType;\n        if (ns.isStringSchema() && typeof value === \"string\" && mediaType) {\n            const isJson = mediaType === \"application/json\" || mediaType.endsWith(\"+json\");\n            if (isJson) {\n                return LazyJsonString.from(value);\n            }\n        }\n        if (ns.isTimestampSchema()) {\n            const options = this.settings.timestampFormat;\n            const format = options.useTrait\n                ? ns.getSchema() === SCHEMA.TIMESTAMP_DEFAULT\n                    ? options.default\n                    : ns.getSchema() ?? options.default\n                : options.default;\n            switch (format) {\n                case SCHEMA.TIMESTAMP_DATE_TIME:\n                    return parseRfc3339DateTimeWithOffset(value);\n                case SCHEMA.TIMESTAMP_HTTP_DATE:\n                    return parseRfc7231DateTime(value);\n                case SCHEMA.TIMESTAMP_EPOCH_SECONDS:\n                    return parseEpochTimestamp(value);\n                default:\n                    console.warn(\"Missing timestamp format, parsing value with Date constructor:\", value);\n                    return new Date(value);\n            }\n        }\n        if (ns.isBigIntegerSchema() && (typeof value === \"number\" || typeof value === \"string\")) {\n            return BigInt(value);\n        }\n        if (ns.isBigDecimalSchema() && value != undefined) {\n            if (value instanceof NumericValue) {\n                return value;\n            }\n            return new NumericValue(String(value), \"bigDecimal\");\n        }\n        if (ns.isNumericSchema() && typeof value === \"string\") {\n            switch (value) {\n                case \"Infinity\":\n                    return Infinity;\n                case \"-Infinity\":\n                    return -Infinity;\n                case \"NaN\":\n                    return NaN;\n            }\n        }\n        return value;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}