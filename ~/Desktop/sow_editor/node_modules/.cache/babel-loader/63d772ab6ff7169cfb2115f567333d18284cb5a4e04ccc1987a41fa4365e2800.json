{"ast":null,"code":"export class TypeRegistry {\n  constructor(namespace, schemas = new Map()) {\n    this.namespace = namespace;\n    this.schemas = schemas;\n  }\n  static for(namespace) {\n    if (!TypeRegistry.registries.has(namespace)) {\n      TypeRegistry.registries.set(namespace, new TypeRegistry(namespace));\n    }\n    return TypeRegistry.registries.get(namespace);\n  }\n  register(shapeId, schema) {\n    const qualifiedName = this.normalizeShapeId(shapeId);\n    const registry = TypeRegistry.for(this.getNamespace(shapeId));\n    registry.schemas.set(qualifiedName, schema);\n  }\n  getSchema(shapeId) {\n    const id = this.normalizeShapeId(shapeId);\n    if (!this.schemas.has(id)) {\n      throw new Error(`@smithy/core/schema - schema not found for ${id}`);\n    }\n    return this.schemas.get(id);\n  }\n  getBaseException() {\n    for (const [id, schema] of this.schemas.entries()) {\n      if (id.startsWith(\"smithy.ts.sdk.synthetic.\") && id.endsWith(\"ServiceException\")) {\n        return schema;\n      }\n    }\n    return undefined;\n  }\n  find(predicate) {\n    return [...this.schemas.values()].find(predicate);\n  }\n  destroy() {\n    TypeRegistry.registries.delete(this.namespace);\n    this.schemas.clear();\n  }\n  normalizeShapeId(shapeId) {\n    if (shapeId.includes(\"#\")) {\n      return shapeId;\n    }\n    return this.namespace + \"#\" + shapeId;\n  }\n  getNamespace(shapeId) {\n    return this.normalizeShapeId(shapeId).split(\"#\")[0];\n  }\n}\nTypeRegistry.registries = new Map();","map":{"version":3,"names":["TypeRegistry","constructor","namespace","schemas","Map","for","registries","has","set","get","register","shapeId","schema","qualifiedName","normalizeShapeId","registry","getNamespace","getSchema","id","Error","getBaseException","entries","startsWith","endsWith","undefined","find","predicate","values","destroy","delete","clear","includes","split"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@smithy/core/dist-es/submodules/schema/TypeRegistry.js"],"sourcesContent":["export class TypeRegistry {\n    constructor(namespace, schemas = new Map()) {\n        this.namespace = namespace;\n        this.schemas = schemas;\n    }\n    static for(namespace) {\n        if (!TypeRegistry.registries.has(namespace)) {\n            TypeRegistry.registries.set(namespace, new TypeRegistry(namespace));\n        }\n        return TypeRegistry.registries.get(namespace);\n    }\n    register(shapeId, schema) {\n        const qualifiedName = this.normalizeShapeId(shapeId);\n        const registry = TypeRegistry.for(this.getNamespace(shapeId));\n        registry.schemas.set(qualifiedName, schema);\n    }\n    getSchema(shapeId) {\n        const id = this.normalizeShapeId(shapeId);\n        if (!this.schemas.has(id)) {\n            throw new Error(`@smithy/core/schema - schema not found for ${id}`);\n        }\n        return this.schemas.get(id);\n    }\n    getBaseException() {\n        for (const [id, schema] of this.schemas.entries()) {\n            if (id.startsWith(\"smithy.ts.sdk.synthetic.\") && id.endsWith(\"ServiceException\")) {\n                return schema;\n            }\n        }\n        return undefined;\n    }\n    find(predicate) {\n        return [...this.schemas.values()].find(predicate);\n    }\n    destroy() {\n        TypeRegistry.registries.delete(this.namespace);\n        this.schemas.clear();\n    }\n    normalizeShapeId(shapeId) {\n        if (shapeId.includes(\"#\")) {\n            return shapeId;\n        }\n        return this.namespace + \"#\" + shapeId;\n    }\n    getNamespace(shapeId) {\n        return this.normalizeShapeId(shapeId).split(\"#\")[0];\n    }\n}\nTypeRegistry.registries = new Map();\n"],"mappings":"AAAA,OAAO,MAAMA,YAAY,CAAC;EACtBC,WAAWA,CAACC,SAAS,EAAEC,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC,EAAE;IACxC,IAAI,CAACF,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,OAAO,GAAGA,OAAO;EAC1B;EACA,OAAOE,GAAGA,CAACH,SAAS,EAAE;IAClB,IAAI,CAACF,YAAY,CAACM,UAAU,CAACC,GAAG,CAACL,SAAS,CAAC,EAAE;MACzCF,YAAY,CAACM,UAAU,CAACE,GAAG,CAACN,SAAS,EAAE,IAAIF,YAAY,CAACE,SAAS,CAAC,CAAC;IACvE;IACA,OAAOF,YAAY,CAACM,UAAU,CAACG,GAAG,CAACP,SAAS,CAAC;EACjD;EACAQ,QAAQA,CAACC,OAAO,EAAEC,MAAM,EAAE;IACtB,MAAMC,aAAa,GAAG,IAAI,CAACC,gBAAgB,CAACH,OAAO,CAAC;IACpD,MAAMI,QAAQ,GAAGf,YAAY,CAACK,GAAG,CAAC,IAAI,CAACW,YAAY,CAACL,OAAO,CAAC,CAAC;IAC7DI,QAAQ,CAACZ,OAAO,CAACK,GAAG,CAACK,aAAa,EAAED,MAAM,CAAC;EAC/C;EACAK,SAASA,CAACN,OAAO,EAAE;IACf,MAAMO,EAAE,GAAG,IAAI,CAACJ,gBAAgB,CAACH,OAAO,CAAC;IACzC,IAAI,CAAC,IAAI,CAACR,OAAO,CAACI,GAAG,CAACW,EAAE,CAAC,EAAE;MACvB,MAAM,IAAIC,KAAK,CAAC,8CAA8CD,EAAE,EAAE,CAAC;IACvE;IACA,OAAO,IAAI,CAACf,OAAO,CAACM,GAAG,CAACS,EAAE,CAAC;EAC/B;EACAE,gBAAgBA,CAAA,EAAG;IACf,KAAK,MAAM,CAACF,EAAE,EAAEN,MAAM,CAAC,IAAI,IAAI,CAACT,OAAO,CAACkB,OAAO,CAAC,CAAC,EAAE;MAC/C,IAAIH,EAAE,CAACI,UAAU,CAAC,0BAA0B,CAAC,IAAIJ,EAAE,CAACK,QAAQ,CAAC,kBAAkB,CAAC,EAAE;QAC9E,OAAOX,MAAM;MACjB;IACJ;IACA,OAAOY,SAAS;EACpB;EACAC,IAAIA,CAACC,SAAS,EAAE;IACZ,OAAO,CAAC,GAAG,IAAI,CAACvB,OAAO,CAACwB,MAAM,CAAC,CAAC,CAAC,CAACF,IAAI,CAACC,SAAS,CAAC;EACrD;EACAE,OAAOA,CAAA,EAAG;IACN5B,YAAY,CAACM,UAAU,CAACuB,MAAM,CAAC,IAAI,CAAC3B,SAAS,CAAC;IAC9C,IAAI,CAACC,OAAO,CAAC2B,KAAK,CAAC,CAAC;EACxB;EACAhB,gBAAgBA,CAACH,OAAO,EAAE;IACtB,IAAIA,OAAO,CAACoB,QAAQ,CAAC,GAAG,CAAC,EAAE;MACvB,OAAOpB,OAAO;IAClB;IACA,OAAO,IAAI,CAACT,SAAS,GAAG,GAAG,GAAGS,OAAO;EACzC;EACAK,YAAYA,CAACL,OAAO,EAAE;IAClB,OAAO,IAAI,CAACG,gBAAgB,CAACH,OAAO,CAAC,CAACqB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACvD;AACJ;AACAhC,YAAY,CAACM,UAAU,GAAG,IAAIF,GAAG,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}