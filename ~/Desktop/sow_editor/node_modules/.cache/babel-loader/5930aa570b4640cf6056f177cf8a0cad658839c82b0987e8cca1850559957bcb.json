{"ast":null,"code":"export const loggerMiddleware = () => (next, context) => async args => {\n  try {\n    const response = await next(args);\n    const {\n      clientName,\n      commandName,\n      logger,\n      dynamoDbDocumentClientOptions = {}\n    } = context;\n    const {\n      overrideInputFilterSensitiveLog,\n      overrideOutputFilterSensitiveLog\n    } = dynamoDbDocumentClientOptions;\n    const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;\n    const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;\n    const {\n      $metadata,\n      ...outputWithoutMetadata\n    } = response.output;\n    logger?.info?.({\n      clientName,\n      commandName,\n      input: inputFilterSensitiveLog(args.input),\n      output: outputFilterSensitiveLog(outputWithoutMetadata),\n      metadata: $metadata\n    });\n    return response;\n  } catch (error) {\n    const {\n      clientName,\n      commandName,\n      logger,\n      dynamoDbDocumentClientOptions = {}\n    } = context;\n    const {\n      overrideInputFilterSensitiveLog\n    } = dynamoDbDocumentClientOptions;\n    const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;\n    logger?.error?.({\n      clientName,\n      commandName,\n      input: inputFilterSensitiveLog(args.input),\n      error,\n      metadata: error.$metadata\n    });\n    throw error;\n  }\n};\nexport const loggerMiddlewareOptions = {\n  name: \"loggerMiddleware\",\n  tags: [\"LOGGER\"],\n  step: \"initialize\",\n  override: true\n};\nexport const getLoggerPlugin = options => ({\n  applyToStack: clientStack => {\n    clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n  }\n});","map":{"version":3,"names":["loggerMiddleware","next","context","args","response","clientName","commandName","logger","dynamoDbDocumentClientOptions","overrideInputFilterSensitiveLog","overrideOutputFilterSensitiveLog","inputFilterSensitiveLog","outputFilterSensitiveLog","$metadata","outputWithoutMetadata","output","info","input","metadata","error","loggerMiddlewareOptions","name","tags","step","override","getLoggerPlugin","options","applyToStack","clientStack","add"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js"],"sourcesContent":["export const loggerMiddleware = () => (next, context) => async (args) => {\n    try {\n        const response = await next(args);\n        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;\n        const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;\n        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;\n        const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;\n        const { $metadata, ...outputWithoutMetadata } = response.output;\n        logger?.info?.({\n            clientName,\n            commandName,\n            input: inputFilterSensitiveLog(args.input),\n            output: outputFilterSensitiveLog(outputWithoutMetadata),\n            metadata: $metadata,\n        });\n        return response;\n    }\n    catch (error) {\n        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;\n        const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;\n        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;\n        logger?.error?.({\n            clientName,\n            commandName,\n            input: inputFilterSensitiveLog(args.input),\n            error,\n            metadata: error.$metadata,\n        });\n        throw error;\n    }\n};\nexport const loggerMiddlewareOptions = {\n    name: \"loggerMiddleware\",\n    tags: [\"LOGGER\"],\n    step: \"initialize\",\n    override: true,\n};\nexport const getLoggerPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n    },\n});\n"],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,GAAGA,CAAA,KAAM,CAACC,IAAI,EAAEC,OAAO,KAAK,MAAOC,IAAI,IAAK;EACrE,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMH,IAAI,CAACE,IAAI,CAAC;IACjC,MAAM;MAAEE,UAAU;MAAEC,WAAW;MAAEC,MAAM;MAAEC,6BAA6B,GAAG,CAAC;IAAE,CAAC,GAAGN,OAAO;IACvF,MAAM;MAAEO,+BAA+B;MAAEC;IAAiC,CAAC,GAAGF,6BAA6B;IAC3G,MAAMG,uBAAuB,GAAGF,+BAA+B,IAAIP,OAAO,CAACS,uBAAuB;IAClG,MAAMC,wBAAwB,GAAGF,gCAAgC,IAAIR,OAAO,CAACU,wBAAwB;IACrG,MAAM;MAAEC,SAAS;MAAE,GAAGC;IAAsB,CAAC,GAAGV,QAAQ,CAACW,MAAM;IAC/DR,MAAM,EAAES,IAAI,GAAG;MACXX,UAAU;MACVC,WAAW;MACXW,KAAK,EAAEN,uBAAuB,CAACR,IAAI,CAACc,KAAK,CAAC;MAC1CF,MAAM,EAAEH,wBAAwB,CAACE,qBAAqB,CAAC;MACvDI,QAAQ,EAAEL;IACd,CAAC,CAAC;IACF,OAAOT,QAAQ;EACnB,CAAC,CACD,OAAOe,KAAK,EAAE;IACV,MAAM;MAAEd,UAAU;MAAEC,WAAW;MAAEC,MAAM;MAAEC,6BAA6B,GAAG,CAAC;IAAE,CAAC,GAAGN,OAAO;IACvF,MAAM;MAAEO;IAAgC,CAAC,GAAGD,6BAA6B;IACzE,MAAMG,uBAAuB,GAAGF,+BAA+B,IAAIP,OAAO,CAACS,uBAAuB;IAClGJ,MAAM,EAAEY,KAAK,GAAG;MACZd,UAAU;MACVC,WAAW;MACXW,KAAK,EAAEN,uBAAuB,CAACR,IAAI,CAACc,KAAK,CAAC;MAC1CE,KAAK;MACLD,QAAQ,EAAEC,KAAK,CAACN;IACpB,CAAC,CAAC;IACF,MAAMM,KAAK;EACf;AACJ,CAAC;AACD,OAAO,MAAMC,uBAAuB,GAAG;EACnCC,IAAI,EAAE,kBAAkB;EACxBC,IAAI,EAAE,CAAC,QAAQ,CAAC;EAChBC,IAAI,EAAE,YAAY;EAClBC,QAAQ,EAAE;AACd,CAAC;AACD,OAAO,MAAMC,eAAe,GAAIC,OAAO,KAAM;EACzCC,YAAY,EAAGC,WAAW,IAAK;IAC3BA,WAAW,CAACC,GAAG,CAAC7B,gBAAgB,CAAC,CAAC,EAAEoB,uBAAuB,CAAC;EAChE;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}