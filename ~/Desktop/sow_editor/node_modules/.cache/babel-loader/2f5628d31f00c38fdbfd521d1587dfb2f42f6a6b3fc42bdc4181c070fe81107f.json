{"ast":null,"code":"import { toHex } from \"@smithy/util-hex-encoding\";\nimport { toUint8Array } from \"@smithy/util-utf8\";\nimport { ALGORITHM_IDENTIFIER, ALGORITHM_QUERY_PARAM, AMZ_DATE_HEADER, AMZ_DATE_QUERY_PARAM, AUTH_HEADER, CREDENTIAL_QUERY_PARAM, EVENT_ALGORITHM_IDENTIFIER, EXPIRES_QUERY_PARAM, MAX_PRESIGNED_TTL, SHA256_HEADER, SIGNATURE_QUERY_PARAM, SIGNED_HEADERS_QUERY_PARAM, TOKEN_HEADER, TOKEN_QUERY_PARAM } from \"./constants\";\nimport { createScope, getSigningKey } from \"./credentialDerivation\";\nimport { getCanonicalHeaders } from \"./getCanonicalHeaders\";\nimport { getPayloadHash } from \"./getPayloadHash\";\nimport { HeaderFormatter } from \"./HeaderFormatter\";\nimport { hasHeader } from \"./headerUtil\";\nimport { moveHeadersToQuery } from \"./moveHeadersToQuery\";\nimport { prepareRequest } from \"./prepareRequest\";\nimport { SignatureV4Base } from \"./SignatureV4Base\";\nexport class SignatureV4 extends SignatureV4Base {\n  constructor({\n    applyChecksum,\n    credentials,\n    region,\n    service,\n    sha256,\n    uriEscapePath = true\n  }) {\n    super({\n      applyChecksum,\n      credentials,\n      region,\n      service,\n      sha256,\n      uriEscapePath\n    });\n    this.headerFormatter = new HeaderFormatter();\n  }\n  async presign(originalRequest, options = {}) {\n    const {\n      signingDate = new Date(),\n      expiresIn = 3600,\n      unsignableHeaders,\n      unhoistableHeaders,\n      signableHeaders,\n      hoistableHeaders,\n      signingRegion,\n      signingService\n    } = options;\n    const credentials = await this.credentialProvider();\n    this.validateResolvedCredentials(credentials);\n    const region = signingRegion ?? (await this.regionProvider());\n    const {\n      longDate,\n      shortDate\n    } = this.formatDate(signingDate);\n    if (expiresIn > MAX_PRESIGNED_TTL) {\n      return Promise.reject(\"Signature version 4 presigned URLs\" + \" must have an expiration date less than one week in\" + \" the future\");\n    }\n    const scope = createScope(shortDate, region, signingService ?? this.service);\n    const request = moveHeadersToQuery(prepareRequest(originalRequest), {\n      unhoistableHeaders,\n      hoistableHeaders\n    });\n    if (credentials.sessionToken) {\n      request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;\n    }\n    request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;\n    request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;\n    request.query[AMZ_DATE_QUERY_PARAM] = longDate;\n    request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);\n    const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n    request.query[SIGNED_HEADERS_QUERY_PARAM] = this.getCanonicalHeaderList(canonicalHeaders);\n    request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256)));\n    return request;\n  }\n  async sign(toSign, options) {\n    if (typeof toSign === \"string\") {\n      return this.signString(toSign, options);\n    } else if (toSign.headers && toSign.payload) {\n      return this.signEvent(toSign, options);\n    } else if (toSign.message) {\n      return this.signMessage(toSign, options);\n    } else {\n      return this.signRequest(toSign, options);\n    }\n  }\n  async signEvent({\n    headers,\n    payload\n  }, {\n    signingDate = new Date(),\n    priorSignature,\n    signingRegion,\n    signingService\n  }) {\n    const region = signingRegion ?? (await this.regionProvider());\n    const {\n      shortDate,\n      longDate\n    } = this.formatDate(signingDate);\n    const scope = createScope(shortDate, region, signingService ?? this.service);\n    const hashedPayload = await getPayloadHash({\n      headers: {},\n      body: payload\n    }, this.sha256);\n    const hash = new this.sha256();\n    hash.update(headers);\n    const hashedHeaders = toHex(await hash.digest());\n    const stringToSign = [EVENT_ALGORITHM_IDENTIFIER, longDate, scope, priorSignature, hashedHeaders, hashedPayload].join(\"\\n\");\n    return this.signString(stringToSign, {\n      signingDate,\n      signingRegion: region,\n      signingService\n    });\n  }\n  async signMessage(signableMessage, {\n    signingDate = new Date(),\n    signingRegion,\n    signingService\n  }) {\n    const promise = this.signEvent({\n      headers: this.headerFormatter.format(signableMessage.message.headers),\n      payload: signableMessage.message.body\n    }, {\n      signingDate,\n      signingRegion,\n      signingService,\n      priorSignature: signableMessage.priorSignature\n    });\n    return promise.then(signature => {\n      return {\n        message: signableMessage.message,\n        signature\n      };\n    });\n  }\n  async signString(stringToSign, {\n    signingDate = new Date(),\n    signingRegion,\n    signingService\n  } = {}) {\n    const credentials = await this.credentialProvider();\n    this.validateResolvedCredentials(credentials);\n    const region = signingRegion ?? (await this.regionProvider());\n    const {\n      shortDate\n    } = this.formatDate(signingDate);\n    const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));\n    hash.update(toUint8Array(stringToSign));\n    return toHex(await hash.digest());\n  }\n  async signRequest(requestToSign, {\n    signingDate = new Date(),\n    signableHeaders,\n    unsignableHeaders,\n    signingRegion,\n    signingService\n  } = {}) {\n    const credentials = await this.credentialProvider();\n    this.validateResolvedCredentials(credentials);\n    const region = signingRegion ?? (await this.regionProvider());\n    const request = prepareRequest(requestToSign);\n    const {\n      longDate,\n      shortDate\n    } = this.formatDate(signingDate);\n    const scope = createScope(shortDate, region, signingService ?? this.service);\n    request.headers[AMZ_DATE_HEADER] = longDate;\n    if (credentials.sessionToken) {\n      request.headers[TOKEN_HEADER] = credentials.sessionToken;\n    }\n    const payloadHash = await getPayloadHash(request, this.sha256);\n    if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {\n      request.headers[SHA256_HEADER] = payloadHash;\n    }\n    const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n    const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));\n    request.headers[AUTH_HEADER] = `${ALGORITHM_IDENTIFIER} ` + `Credential=${credentials.accessKeyId}/${scope}, ` + `SignedHeaders=${this.getCanonicalHeaderList(canonicalHeaders)}, ` + `Signature=${signature}`;\n    return request;\n  }\n  async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {\n    const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest, ALGORITHM_IDENTIFIER);\n    const hash = new this.sha256(await keyPromise);\n    hash.update(toUint8Array(stringToSign));\n    return toHex(await hash.digest());\n  }\n  getSigningKey(credentials, region, shortDate, service) {\n    return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);\n  }\n}","map":{"version":3,"names":["toHex","toUint8Array","ALGORITHM_IDENTIFIER","ALGORITHM_QUERY_PARAM","AMZ_DATE_HEADER","AMZ_DATE_QUERY_PARAM","AUTH_HEADER","CREDENTIAL_QUERY_PARAM","EVENT_ALGORITHM_IDENTIFIER","EXPIRES_QUERY_PARAM","MAX_PRESIGNED_TTL","SHA256_HEADER","SIGNATURE_QUERY_PARAM","SIGNED_HEADERS_QUERY_PARAM","TOKEN_HEADER","TOKEN_QUERY_PARAM","createScope","getSigningKey","getCanonicalHeaders","getPayloadHash","HeaderFormatter","hasHeader","moveHeadersToQuery","prepareRequest","SignatureV4Base","SignatureV4","constructor","applyChecksum","credentials","region","service","sha256","uriEscapePath","headerFormatter","presign","originalRequest","options","signingDate","Date","expiresIn","unsignableHeaders","unhoistableHeaders","signableHeaders","hoistableHeaders","signingRegion","signingService","credentialProvider","validateResolvedCredentials","regionProvider","longDate","shortDate","formatDate","Promise","reject","scope","request","sessionToken","query","accessKeyId","toString","canonicalHeaders","getCanonicalHeaderList","getSignature","createCanonicalRequest","sign","toSign","signString","headers","payload","signEvent","message","signMessage","signRequest","priorSignature","hashedPayload","body","hash","update","hashedHeaders","digest","stringToSign","join","signableMessage","promise","format","then","signature","requestToSign","payloadHash","credentialScope","keyPromise","canonicalRequest","createStringToSign"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@smithy/signature-v4/dist-es/SignatureV4.js"],"sourcesContent":["import { toHex } from \"@smithy/util-hex-encoding\";\nimport { toUint8Array } from \"@smithy/util-utf8\";\nimport { ALGORITHM_IDENTIFIER, ALGORITHM_QUERY_PARAM, AMZ_DATE_HEADER, AMZ_DATE_QUERY_PARAM, AUTH_HEADER, CREDENTIAL_QUERY_PARAM, EVENT_ALGORITHM_IDENTIFIER, EXPIRES_QUERY_PARAM, MAX_PRESIGNED_TTL, SHA256_HEADER, SIGNATURE_QUERY_PARAM, SIGNED_HEADERS_QUERY_PARAM, TOKEN_HEADER, TOKEN_QUERY_PARAM, } from \"./constants\";\nimport { createScope, getSigningKey } from \"./credentialDerivation\";\nimport { getCanonicalHeaders } from \"./getCanonicalHeaders\";\nimport { getPayloadHash } from \"./getPayloadHash\";\nimport { HeaderFormatter } from \"./HeaderFormatter\";\nimport { hasHeader } from \"./headerUtil\";\nimport { moveHeadersToQuery } from \"./moveHeadersToQuery\";\nimport { prepareRequest } from \"./prepareRequest\";\nimport { SignatureV4Base } from \"./SignatureV4Base\";\nexport class SignatureV4 extends SignatureV4Base {\n    constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true, }) {\n        super({\n            applyChecksum,\n            credentials,\n            region,\n            service,\n            sha256,\n            uriEscapePath,\n        });\n        this.headerFormatter = new HeaderFormatter();\n    }\n    async presign(originalRequest, options = {}) {\n        const { signingDate = new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, hoistableHeaders, signingRegion, signingService, } = options;\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const { longDate, shortDate } = this.formatDate(signingDate);\n        if (expiresIn > MAX_PRESIGNED_TTL) {\n            return Promise.reject(\"Signature version 4 presigned URLs\" + \" must have an expiration date less than one week in\" + \" the future\");\n        }\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        const request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders, hoistableHeaders });\n        if (credentials.sessionToken) {\n            request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;\n        }\n        request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;\n        request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;\n        request.query[AMZ_DATE_QUERY_PARAM] = longDate;\n        request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);\n        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n        request.query[SIGNED_HEADERS_QUERY_PARAM] = this.getCanonicalHeaderList(canonicalHeaders);\n        request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256)));\n        return request;\n    }\n    async sign(toSign, options) {\n        if (typeof toSign === \"string\") {\n            return this.signString(toSign, options);\n        }\n        else if (toSign.headers && toSign.payload) {\n            return this.signEvent(toSign, options);\n        }\n        else if (toSign.message) {\n            return this.signMessage(toSign, options);\n        }\n        else {\n            return this.signRequest(toSign, options);\n        }\n    }\n    async signEvent({ headers, payload }, { signingDate = new Date(), priorSignature, signingRegion, signingService }) {\n        const region = signingRegion ?? (await this.regionProvider());\n        const { shortDate, longDate } = this.formatDate(signingDate);\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        const hashedPayload = await getPayloadHash({ headers: {}, body: payload }, this.sha256);\n        const hash = new this.sha256();\n        hash.update(headers);\n        const hashedHeaders = toHex(await hash.digest());\n        const stringToSign = [\n            EVENT_ALGORITHM_IDENTIFIER,\n            longDate,\n            scope,\n            priorSignature,\n            hashedHeaders,\n            hashedPayload,\n        ].join(\"\\n\");\n        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });\n    }\n    async signMessage(signableMessage, { signingDate = new Date(), signingRegion, signingService }) {\n        const promise = this.signEvent({\n            headers: this.headerFormatter.format(signableMessage.message.headers),\n            payload: signableMessage.message.body,\n        }, {\n            signingDate,\n            signingRegion,\n            signingService,\n            priorSignature: signableMessage.priorSignature,\n        });\n        return promise.then((signature) => {\n            return { message: signableMessage.message, signature };\n        });\n    }\n    async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const { shortDate } = this.formatDate(signingDate);\n        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));\n        hash.update(toUint8Array(stringToSign));\n        return toHex(await hash.digest());\n    }\n    async signRequest(requestToSign, { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService, } = {}) {\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const request = prepareRequest(requestToSign);\n        const { longDate, shortDate } = this.formatDate(signingDate);\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        request.headers[AMZ_DATE_HEADER] = longDate;\n        if (credentials.sessionToken) {\n            request.headers[TOKEN_HEADER] = credentials.sessionToken;\n        }\n        const payloadHash = await getPayloadHash(request, this.sha256);\n        if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {\n            request.headers[SHA256_HEADER] = payloadHash;\n        }\n        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));\n        request.headers[AUTH_HEADER] =\n            `${ALGORITHM_IDENTIFIER} ` +\n                `Credential=${credentials.accessKeyId}/${scope}, ` +\n                `SignedHeaders=${this.getCanonicalHeaderList(canonicalHeaders)}, ` +\n                `Signature=${signature}`;\n        return request;\n    }\n    async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {\n        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest, ALGORITHM_IDENTIFIER);\n        const hash = new this.sha256(await keyPromise);\n        hash.update(toUint8Array(stringToSign));\n        return toHex(await hash.digest());\n    }\n    getSigningKey(credentials, region, shortDate, service) {\n        return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}