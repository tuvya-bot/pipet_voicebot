{"ast":null,"code":"import { HttpRequest } from \"@smithy/protocol-http\";\nconst TRACE_ID_HEADER_NAME = \"X-Amzn-Trace-Id\";\nconst ENV_LAMBDA_FUNCTION_NAME = \"AWS_LAMBDA_FUNCTION_NAME\";\nconst ENV_TRACE_ID = \"_X_AMZN_TRACE_ID\";\nexport const recursionDetectionMiddleware = options => next => async args => {\n  const {\n    request\n  } = args;\n  if (!HttpRequest.isInstance(request) || options.runtime !== \"node\") {\n    return next(args);\n  }\n  const traceIdHeader = Object.keys(request.headers ?? {}).find(h => h.toLowerCase() === TRACE_ID_HEADER_NAME.toLowerCase()) ?? TRACE_ID_HEADER_NAME;\n  if (request.headers.hasOwnProperty(traceIdHeader)) {\n    return next(args);\n  }\n  const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];\n  const traceId = process.env[ENV_TRACE_ID];\n  const nonEmptyString = str => typeof str === \"string\" && str.length > 0;\n  if (nonEmptyString(functionName) && nonEmptyString(traceId)) {\n    request.headers[TRACE_ID_HEADER_NAME] = traceId;\n  }\n  return next({\n    ...args,\n    request\n  });\n};\nexport const addRecursionDetectionMiddlewareOptions = {\n  step: \"build\",\n  tags: [\"RECURSION_DETECTION\"],\n  name: \"recursionDetectionMiddleware\",\n  override: true,\n  priority: \"low\"\n};\nexport const getRecursionDetectionPlugin = options => ({\n  applyToStack: clientStack => {\n    clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);\n  }\n});","map":{"version":3,"names":["HttpRequest","TRACE_ID_HEADER_NAME","ENV_LAMBDA_FUNCTION_NAME","ENV_TRACE_ID","recursionDetectionMiddleware","options","next","args","request","isInstance","runtime","traceIdHeader","Object","keys","headers","find","h","toLowerCase","hasOwnProperty","functionName","process","env","traceId","nonEmptyString","str","length","addRecursionDetectionMiddlewareOptions","step","tags","name","override","priority","getRecursionDetectionPlugin","applyToStack","clientStack","add"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js"],"sourcesContent":["import { HttpRequest } from \"@smithy/protocol-http\";\nconst TRACE_ID_HEADER_NAME = \"X-Amzn-Trace-Id\";\nconst ENV_LAMBDA_FUNCTION_NAME = \"AWS_LAMBDA_FUNCTION_NAME\";\nconst ENV_TRACE_ID = \"_X_AMZN_TRACE_ID\";\nexport const recursionDetectionMiddleware = (options) => (next) => async (args) => {\n    const { request } = args;\n    if (!HttpRequest.isInstance(request) || options.runtime !== \"node\") {\n        return next(args);\n    }\n    const traceIdHeader = Object.keys(request.headers ?? {}).find((h) => h.toLowerCase() === TRACE_ID_HEADER_NAME.toLowerCase()) ??\n        TRACE_ID_HEADER_NAME;\n    if (request.headers.hasOwnProperty(traceIdHeader)) {\n        return next(args);\n    }\n    const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];\n    const traceId = process.env[ENV_TRACE_ID];\n    const nonEmptyString = (str) => typeof str === \"string\" && str.length > 0;\n    if (nonEmptyString(functionName) && nonEmptyString(traceId)) {\n        request.headers[TRACE_ID_HEADER_NAME] = traceId;\n    }\n    return next({\n        ...args,\n        request,\n    });\n};\nexport const addRecursionDetectionMiddlewareOptions = {\n    step: \"build\",\n    tags: [\"RECURSION_DETECTION\"],\n    name: \"recursionDetectionMiddleware\",\n    override: true,\n    priority: \"low\",\n};\nexport const getRecursionDetectionPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);\n    },\n});\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,uBAAuB;AACnD,MAAMC,oBAAoB,GAAG,iBAAiB;AAC9C,MAAMC,wBAAwB,GAAG,0BAA0B;AAC3D,MAAMC,YAAY,GAAG,kBAAkB;AACvC,OAAO,MAAMC,4BAA4B,GAAIC,OAAO,IAAMC,IAAI,IAAK,MAAOC,IAAI,IAAK;EAC/E,MAAM;IAAEC;EAAQ,CAAC,GAAGD,IAAI;EACxB,IAAI,CAACP,WAAW,CAACS,UAAU,CAACD,OAAO,CAAC,IAAIH,OAAO,CAACK,OAAO,KAAK,MAAM,EAAE;IAChE,OAAOJ,IAAI,CAACC,IAAI,CAAC;EACrB;EACA,MAAMI,aAAa,GAAGC,MAAM,CAACC,IAAI,CAACL,OAAO,CAACM,OAAO,IAAI,CAAC,CAAC,CAAC,CAACC,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,WAAW,CAAC,CAAC,KAAKhB,oBAAoB,CAACgB,WAAW,CAAC,CAAC,CAAC,IACxHhB,oBAAoB;EACxB,IAAIO,OAAO,CAACM,OAAO,CAACI,cAAc,CAACP,aAAa,CAAC,EAAE;IAC/C,OAAOL,IAAI,CAACC,IAAI,CAAC;EACrB;EACA,MAAMY,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACnB,wBAAwB,CAAC;EAC1D,MAAMoB,OAAO,GAAGF,OAAO,CAACC,GAAG,CAAClB,YAAY,CAAC;EACzC,MAAMoB,cAAc,GAAIC,GAAG,IAAK,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAACC,MAAM,GAAG,CAAC;EACzE,IAAIF,cAAc,CAACJ,YAAY,CAAC,IAAII,cAAc,CAACD,OAAO,CAAC,EAAE;IACzDd,OAAO,CAACM,OAAO,CAACb,oBAAoB,CAAC,GAAGqB,OAAO;EACnD;EACA,OAAOhB,IAAI,CAAC;IACR,GAAGC,IAAI;IACPC;EACJ,CAAC,CAAC;AACN,CAAC;AACD,OAAO,MAAMkB,sCAAsC,GAAG;EAClDC,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,CAAC,qBAAqB,CAAC;EAC7BC,IAAI,EAAE,8BAA8B;EACpCC,QAAQ,EAAE,IAAI;EACdC,QAAQ,EAAE;AACd,CAAC;AACD,OAAO,MAAMC,2BAA2B,GAAI3B,OAAO,KAAM;EACrD4B,YAAY,EAAGC,WAAW,IAAK;IAC3BA,WAAW,CAACC,GAAG,CAAC/B,4BAA4B,CAACC,OAAO,CAAC,EAAEqB,sCAAsC,CAAC;EAClG;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}