{"ast":null,"code":"import { fromHex, toHex } from \"@smithy/util-hex-encoding\";\nimport { fromUtf8 } from \"@smithy/util-utf8\";\nexport class HeaderFormatter {\n  format(headers) {\n    const chunks = [];\n    for (const headerName of Object.keys(headers)) {\n      const bytes = fromUtf8(headerName);\n      chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));\n    }\n    const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));\n    let position = 0;\n    for (const chunk of chunks) {\n      out.set(chunk, position);\n      position += chunk.byteLength;\n    }\n    return out;\n  }\n  formatHeaderValue(header) {\n    switch (header.type) {\n      case \"boolean\":\n        return Uint8Array.from([header.value ? 0 : 1]);\n      case \"byte\":\n        return Uint8Array.from([2, header.value]);\n      case \"short\":\n        const shortView = new DataView(new ArrayBuffer(3));\n        shortView.setUint8(0, 3);\n        shortView.setInt16(1, header.value, false);\n        return new Uint8Array(shortView.buffer);\n      case \"integer\":\n        const intView = new DataView(new ArrayBuffer(5));\n        intView.setUint8(0, 4);\n        intView.setInt32(1, header.value, false);\n        return new Uint8Array(intView.buffer);\n      case \"long\":\n        const longBytes = new Uint8Array(9);\n        longBytes[0] = 5;\n        longBytes.set(header.value.bytes, 1);\n        return longBytes;\n      case \"binary\":\n        const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));\n        binView.setUint8(0, 6);\n        binView.setUint16(1, header.value.byteLength, false);\n        const binBytes = new Uint8Array(binView.buffer);\n        binBytes.set(header.value, 3);\n        return binBytes;\n      case \"string\":\n        const utf8Bytes = fromUtf8(header.value);\n        const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));\n        strView.setUint8(0, 7);\n        strView.setUint16(1, utf8Bytes.byteLength, false);\n        const strBytes = new Uint8Array(strView.buffer);\n        strBytes.set(utf8Bytes, 3);\n        return strBytes;\n      case \"timestamp\":\n        const tsBytes = new Uint8Array(9);\n        tsBytes[0] = 8;\n        tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);\n        return tsBytes;\n      case \"uuid\":\n        if (!UUID_PATTERN.test(header.value)) {\n          throw new Error(`Invalid UUID received: ${header.value}`);\n        }\n        const uuidBytes = new Uint8Array(17);\n        uuidBytes[0] = 9;\n        uuidBytes.set(fromHex(header.value.replace(/\\-/g, \"\")), 1);\n        return uuidBytes;\n    }\n  }\n}\nvar HEADER_VALUE_TYPE;\n(function (HEADER_VALUE_TYPE) {\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolTrue\"] = 0] = \"boolTrue\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolFalse\"] = 1] = \"boolFalse\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byte\"] = 2] = \"byte\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"short\"] = 3] = \"short\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"integer\"] = 4] = \"integer\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"long\"] = 5] = \"long\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byteArray\"] = 6] = \"byteArray\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"string\"] = 7] = \"string\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"timestamp\"] = 8] = \"timestamp\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"uuid\"] = 9] = \"uuid\";\n})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));\nconst UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;\nexport class Int64 {\n  constructor(bytes) {\n    this.bytes = bytes;\n    if (bytes.byteLength !== 8) {\n      throw new Error(\"Int64 buffers must be exactly 8 bytes\");\n    }\n  }\n  static fromNumber(number) {\n    if (number > 9223372036854776000 || number < -9223372036854776000) {\n      throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);\n    }\n    const bytes = new Uint8Array(8);\n    for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {\n      bytes[i] = remaining;\n    }\n    if (number < 0) {\n      negate(bytes);\n    }\n    return new Int64(bytes);\n  }\n  valueOf() {\n    const bytes = this.bytes.slice(0);\n    const negative = bytes[0] & 0b10000000;\n    if (negative) {\n      negate(bytes);\n    }\n    return parseInt(toHex(bytes), 16) * (negative ? -1 : 1);\n  }\n  toString() {\n    return String(this.valueOf());\n  }\n}\nfunction negate(bytes) {\n  for (let i = 0; i < 8; i++) {\n    bytes[i] ^= 0xff;\n  }\n  for (let i = 7; i > -1; i--) {\n    bytes[i]++;\n    if (bytes[i] !== 0) break;\n  }\n}","map":{"version":3,"names":["fromHex","toHex","fromUtf8","HeaderFormatter","format","headers","chunks","headerName","Object","keys","bytes","push","Uint8Array","from","byteLength","formatHeaderValue","out","reduce","carry","position","chunk","set","header","type","value","shortView","DataView","ArrayBuffer","setUint8","setInt16","buffer","intView","setInt32","longBytes","binView","setUint16","binBytes","utf8Bytes","strView","strBytes","tsBytes","Int64","fromNumber","valueOf","UUID_PATTERN","test","Error","uuidBytes","replace","HEADER_VALUE_TYPE","constructor","number","i","remaining","Math","abs","round","negate","slice","negative","parseInt","toString","String"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@smithy/signature-v4/dist-es/HeaderFormatter.js"],"sourcesContent":["import { fromHex, toHex } from \"@smithy/util-hex-encoding\";\nimport { fromUtf8 } from \"@smithy/util-utf8\";\nexport class HeaderFormatter {\n    format(headers) {\n        const chunks = [];\n        for (const headerName of Object.keys(headers)) {\n            const bytes = fromUtf8(headerName);\n            chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));\n        }\n        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));\n        let position = 0;\n        for (const chunk of chunks) {\n            out.set(chunk, position);\n            position += chunk.byteLength;\n        }\n        return out;\n    }\n    formatHeaderValue(header) {\n        switch (header.type) {\n            case \"boolean\":\n                return Uint8Array.from([header.value ? 0 : 1]);\n            case \"byte\":\n                return Uint8Array.from([2, header.value]);\n            case \"short\":\n                const shortView = new DataView(new ArrayBuffer(3));\n                shortView.setUint8(0, 3);\n                shortView.setInt16(1, header.value, false);\n                return new Uint8Array(shortView.buffer);\n            case \"integer\":\n                const intView = new DataView(new ArrayBuffer(5));\n                intView.setUint8(0, 4);\n                intView.setInt32(1, header.value, false);\n                return new Uint8Array(intView.buffer);\n            case \"long\":\n                const longBytes = new Uint8Array(9);\n                longBytes[0] = 5;\n                longBytes.set(header.value.bytes, 1);\n                return longBytes;\n            case \"binary\":\n                const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));\n                binView.setUint8(0, 6);\n                binView.setUint16(1, header.value.byteLength, false);\n                const binBytes = new Uint8Array(binView.buffer);\n                binBytes.set(header.value, 3);\n                return binBytes;\n            case \"string\":\n                const utf8Bytes = fromUtf8(header.value);\n                const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));\n                strView.setUint8(0, 7);\n                strView.setUint16(1, utf8Bytes.byteLength, false);\n                const strBytes = new Uint8Array(strView.buffer);\n                strBytes.set(utf8Bytes, 3);\n                return strBytes;\n            case \"timestamp\":\n                const tsBytes = new Uint8Array(9);\n                tsBytes[0] = 8;\n                tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);\n                return tsBytes;\n            case \"uuid\":\n                if (!UUID_PATTERN.test(header.value)) {\n                    throw new Error(`Invalid UUID received: ${header.value}`);\n                }\n                const uuidBytes = new Uint8Array(17);\n                uuidBytes[0] = 9;\n                uuidBytes.set(fromHex(header.value.replace(/\\-/g, \"\")), 1);\n                return uuidBytes;\n        }\n    }\n}\nvar HEADER_VALUE_TYPE;\n(function (HEADER_VALUE_TYPE) {\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolTrue\"] = 0] = \"boolTrue\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolFalse\"] = 1] = \"boolFalse\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byte\"] = 2] = \"byte\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"short\"] = 3] = \"short\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"integer\"] = 4] = \"integer\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"long\"] = 5] = \"long\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byteArray\"] = 6] = \"byteArray\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"string\"] = 7] = \"string\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"timestamp\"] = 8] = \"timestamp\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"uuid\"] = 9] = \"uuid\";\n})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));\nconst UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;\nexport class Int64 {\n    constructor(bytes) {\n        this.bytes = bytes;\n        if (bytes.byteLength !== 8) {\n            throw new Error(\"Int64 buffers must be exactly 8 bytes\");\n        }\n    }\n    static fromNumber(number) {\n        if (number > 9223372036854776000 || number < -9223372036854776000) {\n            throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);\n        }\n        const bytes = new Uint8Array(8);\n        for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {\n            bytes[i] = remaining;\n        }\n        if (number < 0) {\n            negate(bytes);\n        }\n        return new Int64(bytes);\n    }\n    valueOf() {\n        const bytes = this.bytes.slice(0);\n        const negative = bytes[0] & 0b10000000;\n        if (negative) {\n            negate(bytes);\n        }\n        return parseInt(toHex(bytes), 16) * (negative ? -1 : 1);\n    }\n    toString() {\n        return String(this.valueOf());\n    }\n}\nfunction negate(bytes) {\n    for (let i = 0; i < 8; i++) {\n        bytes[i] ^= 0xff;\n    }\n    for (let i = 7; i > -1; i--) {\n        bytes[i]++;\n        if (bytes[i] !== 0)\n            break;\n    }\n}\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,KAAK,QAAQ,2BAA2B;AAC1D,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,OAAO,MAAMC,eAAe,CAAC;EACzBC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,MAAM,GAAG,EAAE;IACjB,KAAK,MAAMC,UAAU,IAAIC,MAAM,CAACC,IAAI,CAACJ,OAAO,CAAC,EAAE;MAC3C,MAAMK,KAAK,GAAGR,QAAQ,CAACK,UAAU,CAAC;MAClCD,MAAM,CAACK,IAAI,CAACC,UAAU,CAACC,IAAI,CAAC,CAACH,KAAK,CAACI,UAAU,CAAC,CAAC,EAAEJ,KAAK,EAAE,IAAI,CAACK,iBAAiB,CAACV,OAAO,CAACE,UAAU,CAAC,CAAC,CAAC;IACxG;IACA,MAAMS,GAAG,GAAG,IAAIJ,UAAU,CAACN,MAAM,CAACW,MAAM,CAAC,CAACC,KAAK,EAAER,KAAK,KAAKQ,KAAK,GAAGR,KAAK,CAACI,UAAU,EAAE,CAAC,CAAC,CAAC;IACxF,IAAIK,QAAQ,GAAG,CAAC;IAChB,KAAK,MAAMC,KAAK,IAAId,MAAM,EAAE;MACxBU,GAAG,CAACK,GAAG,CAACD,KAAK,EAAED,QAAQ,CAAC;MACxBA,QAAQ,IAAIC,KAAK,CAACN,UAAU;IAChC;IACA,OAAOE,GAAG;EACd;EACAD,iBAAiBA,CAACO,MAAM,EAAE;IACtB,QAAQA,MAAM,CAACC,IAAI;MACf,KAAK,SAAS;QACV,OAAOX,UAAU,CAACC,IAAI,CAAC,CAACS,MAAM,CAACE,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;MAClD,KAAK,MAAM;QACP,OAAOZ,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC,EAAES,MAAM,CAACE,KAAK,CAAC,CAAC;MAC7C,KAAK,OAAO;QACR,MAAMC,SAAS,GAAG,IAAIC,QAAQ,CAAC,IAAIC,WAAW,CAAC,CAAC,CAAC,CAAC;QAClDF,SAAS,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;QACxBH,SAAS,CAACI,QAAQ,CAAC,CAAC,EAAEP,MAAM,CAACE,KAAK,EAAE,KAAK,CAAC;QAC1C,OAAO,IAAIZ,UAAU,CAACa,SAAS,CAACK,MAAM,CAAC;MAC3C,KAAK,SAAS;QACV,MAAMC,OAAO,GAAG,IAAIL,QAAQ,CAAC,IAAIC,WAAW,CAAC,CAAC,CAAC,CAAC;QAChDI,OAAO,CAACH,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;QACtBG,OAAO,CAACC,QAAQ,CAAC,CAAC,EAAEV,MAAM,CAACE,KAAK,EAAE,KAAK,CAAC;QACxC,OAAO,IAAIZ,UAAU,CAACmB,OAAO,CAACD,MAAM,CAAC;MACzC,KAAK,MAAM;QACP,MAAMG,SAAS,GAAG,IAAIrB,UAAU,CAAC,CAAC,CAAC;QACnCqB,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;QAChBA,SAAS,CAACZ,GAAG,CAACC,MAAM,CAACE,KAAK,CAACd,KAAK,EAAE,CAAC,CAAC;QACpC,OAAOuB,SAAS;MACpB,KAAK,QAAQ;QACT,MAAMC,OAAO,GAAG,IAAIR,QAAQ,CAAC,IAAIC,WAAW,CAAC,CAAC,GAAGL,MAAM,CAACE,KAAK,CAACV,UAAU,CAAC,CAAC;QAC1EoB,OAAO,CAACN,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;QACtBM,OAAO,CAACC,SAAS,CAAC,CAAC,EAAEb,MAAM,CAACE,KAAK,CAACV,UAAU,EAAE,KAAK,CAAC;QACpD,MAAMsB,QAAQ,GAAG,IAAIxB,UAAU,CAACsB,OAAO,CAACJ,MAAM,CAAC;QAC/CM,QAAQ,CAACf,GAAG,CAACC,MAAM,CAACE,KAAK,EAAE,CAAC,CAAC;QAC7B,OAAOY,QAAQ;MACnB,KAAK,QAAQ;QACT,MAAMC,SAAS,GAAGnC,QAAQ,CAACoB,MAAM,CAACE,KAAK,CAAC;QACxC,MAAMc,OAAO,GAAG,IAAIZ,QAAQ,CAAC,IAAIC,WAAW,CAAC,CAAC,GAAGU,SAAS,CAACvB,UAAU,CAAC,CAAC;QACvEwB,OAAO,CAACV,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;QACtBU,OAAO,CAACH,SAAS,CAAC,CAAC,EAAEE,SAAS,CAACvB,UAAU,EAAE,KAAK,CAAC;QACjD,MAAMyB,QAAQ,GAAG,IAAI3B,UAAU,CAAC0B,OAAO,CAACR,MAAM,CAAC;QAC/CS,QAAQ,CAAClB,GAAG,CAACgB,SAAS,EAAE,CAAC,CAAC;QAC1B,OAAOE,QAAQ;MACnB,KAAK,WAAW;QACZ,MAAMC,OAAO,GAAG,IAAI5B,UAAU,CAAC,CAAC,CAAC;QACjC4B,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;QACdA,OAAO,CAACnB,GAAG,CAACoB,KAAK,CAACC,UAAU,CAACpB,MAAM,CAACE,KAAK,CAACmB,OAAO,CAAC,CAAC,CAAC,CAACjC,KAAK,EAAE,CAAC,CAAC;QAC9D,OAAO8B,OAAO;MAClB,KAAK,MAAM;QACP,IAAI,CAACI,YAAY,CAACC,IAAI,CAACvB,MAAM,CAACE,KAAK,CAAC,EAAE;UAClC,MAAM,IAAIsB,KAAK,CAAC,0BAA0BxB,MAAM,CAACE,KAAK,EAAE,CAAC;QAC7D;QACA,MAAMuB,SAAS,GAAG,IAAInC,UAAU,CAAC,EAAE,CAAC;QACpCmC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;QAChBA,SAAS,CAAC1B,GAAG,CAACrB,OAAO,CAACsB,MAAM,CAACE,KAAK,CAACwB,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QAC1D,OAAOD,SAAS;IACxB;EACJ;AACJ;AACA,IAAIE,iBAAiB;AACrB,CAAC,UAAUA,iBAAiB,EAAE;EAC1BA,iBAAiB,CAACA,iBAAiB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU;EACjEA,iBAAiB,CAACA,iBAAiB,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW;EACnEA,iBAAiB,CAACA,iBAAiB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;EACzDA,iBAAiB,CAACA,iBAAiB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO;EAC3DA,iBAAiB,CAACA,iBAAiB,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS;EAC/DA,iBAAiB,CAACA,iBAAiB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;EACzDA,iBAAiB,CAACA,iBAAiB,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW;EACnEA,iBAAiB,CAACA,iBAAiB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ;EAC7DA,iBAAiB,CAACA,iBAAiB,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW;EACnEA,iBAAiB,CAACA,iBAAiB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;AAC7D,CAAC,EAAEA,iBAAiB,KAAKA,iBAAiB,GAAG,CAAC,CAAC,CAAC,CAAC;AACjD,MAAML,YAAY,GAAG,gEAAgE;AACrF,OAAO,MAAMH,KAAK,CAAC;EACfS,WAAWA,CAACxC,KAAK,EAAE;IACf,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAIA,KAAK,CAACI,UAAU,KAAK,CAAC,EAAE;MACxB,MAAM,IAAIgC,KAAK,CAAC,uCAAuC,CAAC;IAC5D;EACJ;EACA,OAAOJ,UAAUA,CAACS,MAAM,EAAE;IACtB,IAAIA,MAAM,GAAG,mBAAmB,IAAIA,MAAM,GAAG,CAAC,mBAAmB,EAAE;MAC/D,MAAM,IAAIL,KAAK,CAAC,GAAGK,MAAM,qEAAqE,CAAC;IACnG;IACA,MAAMzC,KAAK,GAAG,IAAIE,UAAU,CAAC,CAAC,CAAC;IAC/B,KAAK,IAAIwC,CAAC,GAAG,CAAC,EAAEC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,KAAK,CAACL,MAAM,CAAC,CAAC,EAAEC,CAAC,GAAG,CAAC,CAAC,IAAIC,SAAS,GAAG,CAAC,EAAED,CAAC,EAAE,EAAEC,SAAS,IAAI,GAAG,EAAE;MACtG3C,KAAK,CAAC0C,CAAC,CAAC,GAAGC,SAAS;IACxB;IACA,IAAIF,MAAM,GAAG,CAAC,EAAE;MACZM,MAAM,CAAC/C,KAAK,CAAC;IACjB;IACA,OAAO,IAAI+B,KAAK,CAAC/B,KAAK,CAAC;EAC3B;EACAiC,OAAOA,CAAA,EAAG;IACN,MAAMjC,KAAK,GAAG,IAAI,CAACA,KAAK,CAACgD,KAAK,CAAC,CAAC,CAAC;IACjC,MAAMC,QAAQ,GAAGjD,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU;IACtC,IAAIiD,QAAQ,EAAE;MACVF,MAAM,CAAC/C,KAAK,CAAC;IACjB;IACA,OAAOkD,QAAQ,CAAC3D,KAAK,CAACS,KAAK,CAAC,EAAE,EAAE,CAAC,IAAIiD,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;EAC3D;EACAE,QAAQA,CAAA,EAAG;IACP,OAAOC,MAAM,CAAC,IAAI,CAACnB,OAAO,CAAC,CAAC,CAAC;EACjC;AACJ;AACA,SAASc,MAAMA,CAAC/C,KAAK,EAAE;EACnB,KAAK,IAAI0C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACxB1C,KAAK,CAAC0C,CAAC,CAAC,IAAI,IAAI;EACpB;EACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,EAAE,EAAE;IACzB1C,KAAK,CAAC0C,CAAC,CAAC,EAAE;IACV,IAAI1C,KAAK,CAAC0C,CAAC,CAAC,KAAK,CAAC,EACd;EACR;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}