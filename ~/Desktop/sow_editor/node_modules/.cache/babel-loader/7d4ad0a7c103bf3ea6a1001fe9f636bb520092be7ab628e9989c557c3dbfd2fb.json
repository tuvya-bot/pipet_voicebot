{"ast":null,"code":"import { getArrayForCommaSeparatedString } from \"../utils/getArrayForCommaSeparatedString\";\nimport { getBearerTokenEnvKey } from \"../utils/getBearerTokenEnvKey\";\nconst NODE_AUTH_SCHEME_PREFERENCE_ENV_KEY = \"AWS_AUTH_SCHEME_PREFERENCE\";\nconst NODE_AUTH_SCHEME_PREFERENCE_CONFIG_KEY = \"auth_scheme_preference\";\nexport const NODE_AUTH_SCHEME_PREFERENCE_OPTIONS = {\n  environmentVariableSelector: (env, options) => {\n    if (options?.signingName) {\n      const bearerTokenKey = getBearerTokenEnvKey(options.signingName);\n      if (bearerTokenKey in env) return [\"httpBearerAuth\"];\n    }\n    if (!(NODE_AUTH_SCHEME_PREFERENCE_ENV_KEY in env)) return undefined;\n    return getArrayForCommaSeparatedString(env[NODE_AUTH_SCHEME_PREFERENCE_ENV_KEY]);\n  },\n  configFileSelector: profile => {\n    if (!(NODE_AUTH_SCHEME_PREFERENCE_CONFIG_KEY in profile)) return undefined;\n    return getArrayForCommaSeparatedString(profile[NODE_AUTH_SCHEME_PREFERENCE_CONFIG_KEY]);\n  },\n  default: []\n};","map":{"version":3,"names":["getArrayForCommaSeparatedString","getBearerTokenEnvKey","NODE_AUTH_SCHEME_PREFERENCE_ENV_KEY","NODE_AUTH_SCHEME_PREFERENCE_CONFIG_KEY","NODE_AUTH_SCHEME_PREFERENCE_OPTIONS","environmentVariableSelector","env","options","signingName","bearerTokenKey","undefined","configFileSelector","profile","default"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/NODE_AUTH_SCHEME_PREFERENCE_OPTIONS.js"],"sourcesContent":["import { getArrayForCommaSeparatedString } from \"../utils/getArrayForCommaSeparatedString\";\nimport { getBearerTokenEnvKey } from \"../utils/getBearerTokenEnvKey\";\nconst NODE_AUTH_SCHEME_PREFERENCE_ENV_KEY = \"AWS_AUTH_SCHEME_PREFERENCE\";\nconst NODE_AUTH_SCHEME_PREFERENCE_CONFIG_KEY = \"auth_scheme_preference\";\nexport const NODE_AUTH_SCHEME_PREFERENCE_OPTIONS = {\n    environmentVariableSelector: (env, options) => {\n        if (options?.signingName) {\n            const bearerTokenKey = getBearerTokenEnvKey(options.signingName);\n            if (bearerTokenKey in env)\n                return [\"httpBearerAuth\"];\n        }\n        if (!(NODE_AUTH_SCHEME_PREFERENCE_ENV_KEY in env))\n            return undefined;\n        return getArrayForCommaSeparatedString(env[NODE_AUTH_SCHEME_PREFERENCE_ENV_KEY]);\n    },\n    configFileSelector: (profile) => {\n        if (!(NODE_AUTH_SCHEME_PREFERENCE_CONFIG_KEY in profile))\n            return undefined;\n        return getArrayForCommaSeparatedString(profile[NODE_AUTH_SCHEME_PREFERENCE_CONFIG_KEY]);\n    },\n    default: [],\n};\n"],"mappings":"AAAA,SAASA,+BAA+B,QAAQ,0CAA0C;AAC1F,SAASC,oBAAoB,QAAQ,+BAA+B;AACpE,MAAMC,mCAAmC,GAAG,4BAA4B;AACxE,MAAMC,sCAAsC,GAAG,wBAAwB;AACvE,OAAO,MAAMC,mCAAmC,GAAG;EAC/CC,2BAA2B,EAAEA,CAACC,GAAG,EAAEC,OAAO,KAAK;IAC3C,IAAIA,OAAO,EAAEC,WAAW,EAAE;MACtB,MAAMC,cAAc,GAAGR,oBAAoB,CAACM,OAAO,CAACC,WAAW,CAAC;MAChE,IAAIC,cAAc,IAAIH,GAAG,EACrB,OAAO,CAAC,gBAAgB,CAAC;IACjC;IACA,IAAI,EAAEJ,mCAAmC,IAAII,GAAG,CAAC,EAC7C,OAAOI,SAAS;IACpB,OAAOV,+BAA+B,CAACM,GAAG,CAACJ,mCAAmC,CAAC,CAAC;EACpF,CAAC;EACDS,kBAAkB,EAAGC,OAAO,IAAK;IAC7B,IAAI,EAAET,sCAAsC,IAAIS,OAAO,CAAC,EACpD,OAAOF,SAAS;IACpB,OAAOV,+BAA+B,CAACY,OAAO,CAACT,sCAAsC,CAAC,CAAC;EAC3F,CAAC;EACDU,OAAO,EAAE;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}