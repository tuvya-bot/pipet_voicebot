{"ast":null,"code":"import { EndpointURLScheme } from \"@smithy/types\";\nimport { isIpAddress } from \"./isIpAddress\";\nconst DEFAULT_PORTS = {\n  [EndpointURLScheme.HTTP]: 80,\n  [EndpointURLScheme.HTTPS]: 443\n};\nexport const parseURL = value => {\n  const whatwgURL = (() => {\n    try {\n      if (value instanceof URL) {\n        return value;\n      }\n      if (typeof value === \"object\" && \"hostname\" in value) {\n        const {\n          hostname,\n          port,\n          protocol = \"\",\n          path = \"\",\n          query = {}\n        } = value;\n        const url = new URL(`${protocol}//${hostname}${port ? `:${port}` : \"\"}${path}`);\n        url.search = Object.entries(query).map(([k, v]) => `${k}=${v}`).join(\"&\");\n        return url;\n      }\n      return new URL(value);\n    } catch (error) {\n      return null;\n    }\n  })();\n  if (!whatwgURL) {\n    console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);\n    return null;\n  }\n  const urlString = whatwgURL.href;\n  const {\n    host,\n    hostname,\n    pathname,\n    protocol,\n    search\n  } = whatwgURL;\n  if (search) {\n    return null;\n  }\n  const scheme = protocol.slice(0, -1);\n  if (!Object.values(EndpointURLScheme).includes(scheme)) {\n    return null;\n  }\n  const isIp = isIpAddress(hostname);\n  const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === \"string\" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);\n  const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;\n  return {\n    scheme,\n    authority,\n    path: pathname,\n    normalizedPath: pathname.endsWith(\"/\") ? pathname : `${pathname}/`,\n    isIp\n  };\n};","map":{"version":3,"names":["EndpointURLScheme","isIpAddress","DEFAULT_PORTS","HTTP","HTTPS","parseURL","value","whatwgURL","URL","hostname","port","protocol","path","query","url","search","Object","entries","map","k","v","join","error","console","JSON","stringify","urlString","href","host","pathname","scheme","slice","values","includes","isIp","inputContainsDefaultPort","authority","normalizedPath","endsWith"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@smithy/util-endpoints/dist-es/lib/parseURL.js"],"sourcesContent":["import { EndpointURLScheme } from \"@smithy/types\";\nimport { isIpAddress } from \"./isIpAddress\";\nconst DEFAULT_PORTS = {\n    [EndpointURLScheme.HTTP]: 80,\n    [EndpointURLScheme.HTTPS]: 443,\n};\nexport const parseURL = (value) => {\n    const whatwgURL = (() => {\n        try {\n            if (value instanceof URL) {\n                return value;\n            }\n            if (typeof value === \"object\" && \"hostname\" in value) {\n                const { hostname, port, protocol = \"\", path = \"\", query = {} } = value;\n                const url = new URL(`${protocol}//${hostname}${port ? `:${port}` : \"\"}${path}`);\n                url.search = Object.entries(query)\n                    .map(([k, v]) => `${k}=${v}`)\n                    .join(\"&\");\n                return url;\n            }\n            return new URL(value);\n        }\n        catch (error) {\n            return null;\n        }\n    })();\n    if (!whatwgURL) {\n        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);\n        return null;\n    }\n    const urlString = whatwgURL.href;\n    const { host, hostname, pathname, protocol, search } = whatwgURL;\n    if (search) {\n        return null;\n    }\n    const scheme = protocol.slice(0, -1);\n    if (!Object.values(EndpointURLScheme).includes(scheme)) {\n        return null;\n    }\n    const isIp = isIpAddress(hostname);\n    const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) ||\n        (typeof value === \"string\" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`));\n    const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;\n    return {\n        scheme,\n        authority,\n        path: pathname,\n        normalizedPath: pathname.endsWith(\"/\") ? pathname : `${pathname}/`,\n        isIp,\n    };\n};\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,eAAe;AACjD,SAASC,WAAW,QAAQ,eAAe;AAC3C,MAAMC,aAAa,GAAG;EAClB,CAACF,iBAAiB,CAACG,IAAI,GAAG,EAAE;EAC5B,CAACH,iBAAiB,CAACI,KAAK,GAAG;AAC/B,CAAC;AACD,OAAO,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAC/B,MAAMC,SAAS,GAAG,CAAC,MAAM;IACrB,IAAI;MACA,IAAID,KAAK,YAAYE,GAAG,EAAE;QACtB,OAAOF,KAAK;MAChB;MACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,UAAU,IAAIA,KAAK,EAAE;QAClD,MAAM;UAAEG,QAAQ;UAAEC,IAAI;UAAEC,QAAQ,GAAG,EAAE;UAAEC,IAAI,GAAG,EAAE;UAAEC,KAAK,GAAG,CAAC;QAAE,CAAC,GAAGP,KAAK;QACtE,MAAMQ,GAAG,GAAG,IAAIN,GAAG,CAAC,GAAGG,QAAQ,KAAKF,QAAQ,GAAGC,IAAI,GAAG,IAAIA,IAAI,EAAE,GAAG,EAAE,GAAGE,IAAI,EAAE,CAAC;QAC/EE,GAAG,CAACC,MAAM,GAAGC,MAAM,CAACC,OAAO,CAACJ,KAAK,CAAC,CAC7BK,GAAG,CAAC,CAAC,CAACC,CAAC,EAAEC,CAAC,CAAC,KAAK,GAAGD,CAAC,IAAIC,CAAC,EAAE,CAAC,CAC5BC,IAAI,CAAC,GAAG,CAAC;QACd,OAAOP,GAAG;MACd;MACA,OAAO,IAAIN,GAAG,CAACF,KAAK,CAAC;IACzB,CAAC,CACD,OAAOgB,KAAK,EAAE;MACV,OAAO,IAAI;IACf;EACJ,CAAC,EAAE,CAAC;EACJ,IAAI,CAACf,SAAS,EAAE;IACZgB,OAAO,CAACD,KAAK,CAAC,mBAAmBE,IAAI,CAACC,SAAS,CAACnB,KAAK,CAAC,mBAAmB,CAAC;IAC1E,OAAO,IAAI;EACf;EACA,MAAMoB,SAAS,GAAGnB,SAAS,CAACoB,IAAI;EAChC,MAAM;IAAEC,IAAI;IAAEnB,QAAQ;IAAEoB,QAAQ;IAAElB,QAAQ;IAAEI;EAAO,CAAC,GAAGR,SAAS;EAChE,IAAIQ,MAAM,EAAE;IACR,OAAO,IAAI;EACf;EACA,MAAMe,MAAM,GAAGnB,QAAQ,CAACoB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACpC,IAAI,CAACf,MAAM,CAACgB,MAAM,CAAChC,iBAAiB,CAAC,CAACiC,QAAQ,CAACH,MAAM,CAAC,EAAE;IACpD,OAAO,IAAI;EACf;EACA,MAAMI,IAAI,GAAGjC,WAAW,CAACQ,QAAQ,CAAC;EAClC,MAAM0B,wBAAwB,GAAGT,SAAS,CAACO,QAAQ,CAAC,GAAGL,IAAI,IAAI1B,aAAa,CAAC4B,MAAM,CAAC,EAAE,CAAC,IAClF,OAAOxB,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAAC2B,QAAQ,CAAC,GAAGL,IAAI,IAAI1B,aAAa,CAAC4B,MAAM,CAAC,EAAE,CAAE;EACrF,MAAMM,SAAS,GAAG,GAAGR,IAAI,GAAGO,wBAAwB,GAAG,IAAIjC,aAAa,CAAC4B,MAAM,CAAC,EAAE,GAAG,EAAE,EAAE;EACzF,OAAO;IACHA,MAAM;IACNM,SAAS;IACTxB,IAAI,EAAEiB,QAAQ;IACdQ,cAAc,EAAER,QAAQ,CAACS,QAAQ,CAAC,GAAG,CAAC,GAAGT,QAAQ,GAAG,GAAGA,QAAQ,GAAG;IAClEK;EACJ,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}