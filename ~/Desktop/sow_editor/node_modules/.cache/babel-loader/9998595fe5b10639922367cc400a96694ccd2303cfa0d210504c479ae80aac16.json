{"ast":null,"code":"import { NormalizedSchema, SCHEMA } from \"@smithy/core/schema\";\nimport { LazyJsonString, NumericValue, parseEpochTimestamp, parseRfc3339DateTimeWithOffset, parseRfc7231DateTime, splitHeader } from \"@smithy/core/serde\";\nimport { fromBase64 } from \"@smithy/util-base64\";\nimport { toUtf8 } from \"@smithy/util-utf8\";\nimport { determineTimestampFormat } from \"./determineTimestampFormat\";\nexport class FromStringShapeDeserializer {\n  constructor(settings) {\n    this.settings = settings;\n  }\n  setSerdeContext(serdeContext) {\n    this.serdeContext = serdeContext;\n  }\n  read(_schema, data) {\n    const ns = NormalizedSchema.of(_schema);\n    if (ns.isListSchema()) {\n      return splitHeader(data).map(item => this.read(ns.getValueSchema(), item));\n    }\n    if (ns.isBlobSchema()) {\n      return (this.serdeContext?.base64Decoder ?? fromBase64)(data);\n    }\n    if (ns.isTimestampSchema()) {\n      const format = determineTimestampFormat(ns, this.settings);\n      switch (format) {\n        case SCHEMA.TIMESTAMP_DATE_TIME:\n          return parseRfc3339DateTimeWithOffset(data);\n        case SCHEMA.TIMESTAMP_HTTP_DATE:\n          return parseRfc7231DateTime(data);\n        case SCHEMA.TIMESTAMP_EPOCH_SECONDS:\n          return parseEpochTimestamp(data);\n        default:\n          console.warn(\"Missing timestamp format, parsing value with Date constructor:\", data);\n          return new Date(data);\n      }\n    }\n    if (ns.isStringSchema()) {\n      const mediaType = ns.getMergedTraits().mediaType;\n      let intermediateValue = data;\n      if (mediaType) {\n        if (ns.getMergedTraits().httpHeader) {\n          intermediateValue = this.base64ToUtf8(intermediateValue);\n        }\n        const isJson = mediaType === \"application/json\" || mediaType.endsWith(\"+json\");\n        if (isJson) {\n          intermediateValue = LazyJsonString.from(intermediateValue);\n        }\n        return intermediateValue;\n      }\n    }\n    switch (true) {\n      case ns.isNumericSchema():\n        return Number(data);\n      case ns.isBigIntegerSchema():\n        return BigInt(data);\n      case ns.isBigDecimalSchema():\n        return new NumericValue(data, \"bigDecimal\");\n      case ns.isBooleanSchema():\n        return String(data).toLowerCase() === \"true\";\n    }\n    return data;\n  }\n  base64ToUtf8(base64String) {\n    return (this.serdeContext?.utf8Encoder ?? toUtf8)((this.serdeContext?.base64Decoder ?? fromBase64)(base64String));\n  }\n}","map":{"version":3,"names":["NormalizedSchema","SCHEMA","LazyJsonString","NumericValue","parseEpochTimestamp","parseRfc3339DateTimeWithOffset","parseRfc7231DateTime","splitHeader","fromBase64","toUtf8","determineTimestampFormat","FromStringShapeDeserializer","constructor","settings","setSerdeContext","serdeContext","read","_schema","data","ns","of","isListSchema","map","item","getValueSchema","isBlobSchema","base64Decoder","isTimestampSchema","format","TIMESTAMP_DATE_TIME","TIMESTAMP_HTTP_DATE","TIMESTAMP_EPOCH_SECONDS","console","warn","Date","isStringSchema","mediaType","getMergedTraits","intermediateValue","httpHeader","base64ToUtf8","isJson","endsWith","from","isNumericSchema","Number","isBigIntegerSchema","BigInt","isBigDecimalSchema","isBooleanSchema","String","toLowerCase","base64String","utf8Encoder"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@smithy/core/dist-es/submodules/protocols/serde/FromStringShapeDeserializer.js"],"sourcesContent":["import { NormalizedSchema, SCHEMA } from \"@smithy/core/schema\";\nimport { LazyJsonString, NumericValue, parseEpochTimestamp, parseRfc3339DateTimeWithOffset, parseRfc7231DateTime, splitHeader, } from \"@smithy/core/serde\";\nimport { fromBase64 } from \"@smithy/util-base64\";\nimport { toUtf8 } from \"@smithy/util-utf8\";\nimport { determineTimestampFormat } from \"./determineTimestampFormat\";\nexport class FromStringShapeDeserializer {\n    constructor(settings) {\n        this.settings = settings;\n    }\n    setSerdeContext(serdeContext) {\n        this.serdeContext = serdeContext;\n    }\n    read(_schema, data) {\n        const ns = NormalizedSchema.of(_schema);\n        if (ns.isListSchema()) {\n            return splitHeader(data).map((item) => this.read(ns.getValueSchema(), item));\n        }\n        if (ns.isBlobSchema()) {\n            return (this.serdeContext?.base64Decoder ?? fromBase64)(data);\n        }\n        if (ns.isTimestampSchema()) {\n            const format = determineTimestampFormat(ns, this.settings);\n            switch (format) {\n                case SCHEMA.TIMESTAMP_DATE_TIME:\n                    return parseRfc3339DateTimeWithOffset(data);\n                case SCHEMA.TIMESTAMP_HTTP_DATE:\n                    return parseRfc7231DateTime(data);\n                case SCHEMA.TIMESTAMP_EPOCH_SECONDS:\n                    return parseEpochTimestamp(data);\n                default:\n                    console.warn(\"Missing timestamp format, parsing value with Date constructor:\", data);\n                    return new Date(data);\n            }\n        }\n        if (ns.isStringSchema()) {\n            const mediaType = ns.getMergedTraits().mediaType;\n            let intermediateValue = data;\n            if (mediaType) {\n                if (ns.getMergedTraits().httpHeader) {\n                    intermediateValue = this.base64ToUtf8(intermediateValue);\n                }\n                const isJson = mediaType === \"application/json\" || mediaType.endsWith(\"+json\");\n                if (isJson) {\n                    intermediateValue = LazyJsonString.from(intermediateValue);\n                }\n                return intermediateValue;\n            }\n        }\n        switch (true) {\n            case ns.isNumericSchema():\n                return Number(data);\n            case ns.isBigIntegerSchema():\n                return BigInt(data);\n            case ns.isBigDecimalSchema():\n                return new NumericValue(data, \"bigDecimal\");\n            case ns.isBooleanSchema():\n                return String(data).toLowerCase() === \"true\";\n        }\n        return data;\n    }\n    base64ToUtf8(base64String) {\n        return (this.serdeContext?.utf8Encoder ?? toUtf8)((this.serdeContext?.base64Decoder ?? fromBase64)(base64String));\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}