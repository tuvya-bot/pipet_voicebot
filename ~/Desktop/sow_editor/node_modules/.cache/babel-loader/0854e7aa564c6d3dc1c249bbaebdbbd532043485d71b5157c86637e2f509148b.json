{"ast":null,"code":"export const getAwsChunkedEncodingStream = (readableStream, options) => {\n  const {\n    base64Encoder,\n    bodyLengthChecker,\n    checksumAlgorithmFn,\n    checksumLocationName,\n    streamHasher\n  } = options;\n  const checksumRequired = base64Encoder !== undefined && bodyLengthChecker !== undefined && checksumAlgorithmFn !== undefined && checksumLocationName !== undefined && streamHasher !== undefined;\n  const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : undefined;\n  const reader = readableStream.getReader();\n  return new ReadableStream({\n    async pull(controller) {\n      const {\n        value,\n        done\n      } = await reader.read();\n      if (done) {\n        controller.enqueue(`0\\r\\n`);\n        if (checksumRequired) {\n          const checksum = base64Encoder(await digest);\n          controller.enqueue(`${checksumLocationName}:${checksum}\\r\\n`);\n          controller.enqueue(`\\r\\n`);\n        }\n        controller.close();\n      } else {\n        controller.enqueue(`${(bodyLengthChecker(value) || 0).toString(16)}\\r\\n${value}\\r\\n`);\n      }\n    }\n  });\n};","map":{"version":3,"names":["getAwsChunkedEncodingStream","readableStream","options","base64Encoder","bodyLengthChecker","checksumAlgorithmFn","checksumLocationName","streamHasher","checksumRequired","undefined","digest","reader","getReader","ReadableStream","pull","controller","value","done","read","enqueue","checksum","close","toString"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@smithy/util-stream/dist-es/getAwsChunkedEncodingStream.browser.js"],"sourcesContent":["export const getAwsChunkedEncodingStream = (readableStream, options) => {\n    const { base64Encoder, bodyLengthChecker, checksumAlgorithmFn, checksumLocationName, streamHasher } = options;\n    const checksumRequired = base64Encoder !== undefined &&\n        bodyLengthChecker !== undefined &&\n        checksumAlgorithmFn !== undefined &&\n        checksumLocationName !== undefined &&\n        streamHasher !== undefined;\n    const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : undefined;\n    const reader = readableStream.getReader();\n    return new ReadableStream({\n        async pull(controller) {\n            const { value, done } = await reader.read();\n            if (done) {\n                controller.enqueue(`0\\r\\n`);\n                if (checksumRequired) {\n                    const checksum = base64Encoder(await digest);\n                    controller.enqueue(`${checksumLocationName}:${checksum}\\r\\n`);\n                    controller.enqueue(`\\r\\n`);\n                }\n                controller.close();\n            }\n            else {\n                controller.enqueue(`${(bodyLengthChecker(value) || 0).toString(16)}\\r\\n${value}\\r\\n`);\n            }\n        },\n    });\n};\n"],"mappings":"AAAA,OAAO,MAAMA,2BAA2B,GAAGA,CAACC,cAAc,EAAEC,OAAO,KAAK;EACpE,MAAM;IAAEC,aAAa;IAAEC,iBAAiB;IAAEC,mBAAmB;IAAEC,oBAAoB;IAAEC;EAAa,CAAC,GAAGL,OAAO;EAC7G,MAAMM,gBAAgB,GAAGL,aAAa,KAAKM,SAAS,IAChDL,iBAAiB,KAAKK,SAAS,IAC/BJ,mBAAmB,KAAKI,SAAS,IACjCH,oBAAoB,KAAKG,SAAS,IAClCF,YAAY,KAAKE,SAAS;EAC9B,MAAMC,MAAM,GAAGF,gBAAgB,GAAGD,YAAY,CAACF,mBAAmB,EAAEJ,cAAc,CAAC,GAAGQ,SAAS;EAC/F,MAAME,MAAM,GAAGV,cAAc,CAACW,SAAS,CAAC,CAAC;EACzC,OAAO,IAAIC,cAAc,CAAC;IACtB,MAAMC,IAAIA,CAACC,UAAU,EAAE;MACnB,MAAM;QAAEC,KAAK;QAAEC;MAAK,CAAC,GAAG,MAAMN,MAAM,CAACO,IAAI,CAAC,CAAC;MAC3C,IAAID,IAAI,EAAE;QACNF,UAAU,CAACI,OAAO,CAAC,OAAO,CAAC;QAC3B,IAAIX,gBAAgB,EAAE;UAClB,MAAMY,QAAQ,GAAGjB,aAAa,CAAC,MAAMO,MAAM,CAAC;UAC5CK,UAAU,CAACI,OAAO,CAAC,GAAGb,oBAAoB,IAAIc,QAAQ,MAAM,CAAC;UAC7DL,UAAU,CAACI,OAAO,CAAC,MAAM,CAAC;QAC9B;QACAJ,UAAU,CAACM,KAAK,CAAC,CAAC;MACtB,CAAC,MACI;QACDN,UAAU,CAACI,OAAO,CAAC,GAAG,CAACf,iBAAiB,CAACY,KAAK,CAAC,IAAI,CAAC,EAAEM,QAAQ,CAAC,EAAE,CAAC,OAAON,KAAK,MAAM,CAAC;MACzF;IACJ;EACJ,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}