{"ast":null,"code":"import { normalizeProvider } from \"@smithy/util-middleware\";\nimport { AdaptiveRetryStrategy, DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, RETRY_MODES, StandardRetryStrategy } from \"@smithy/util-retry\";\nexport const ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexport const CONFIG_MAX_ATTEMPTS = \"max_attempts\";\nexport const NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {\n  environmentVariableSelector: env => {\n    const value = env[ENV_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    const maxAttempt = parseInt(value);\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n    }\n    return maxAttempt;\n  },\n  configFileSelector: profile => {\n    const value = profile[CONFIG_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    const maxAttempt = parseInt(value);\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n    }\n    return maxAttempt;\n  },\n  default: DEFAULT_MAX_ATTEMPTS\n};\nexport const resolveRetryConfig = input => {\n  const {\n    retryStrategy,\n    retryMode: _retryMode,\n    maxAttempts: _maxAttempts\n  } = input;\n  const maxAttempts = normalizeProvider(_maxAttempts ?? DEFAULT_MAX_ATTEMPTS);\n  return Object.assign(input, {\n    maxAttempts,\n    retryStrategy: async () => {\n      if (retryStrategy) {\n        return retryStrategy;\n      }\n      const retryMode = await normalizeProvider(_retryMode)();\n      if (retryMode === RETRY_MODES.ADAPTIVE) {\n        return new AdaptiveRetryStrategy(maxAttempts);\n      }\n      return new StandardRetryStrategy(maxAttempts);\n    }\n  });\n};\nexport const ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexport const CONFIG_RETRY_MODE = \"retry_mode\";\nexport const NODE_RETRY_MODE_CONFIG_OPTIONS = {\n  environmentVariableSelector: env => env[ENV_RETRY_MODE],\n  configFileSelector: profile => profile[CONFIG_RETRY_MODE],\n  default: DEFAULT_RETRY_MODE\n};","map":{"version":3,"names":["normalizeProvider","AdaptiveRetryStrategy","DEFAULT_MAX_ATTEMPTS","DEFAULT_RETRY_MODE","RETRY_MODES","StandardRetryStrategy","ENV_MAX_ATTEMPTS","CONFIG_MAX_ATTEMPTS","NODE_MAX_ATTEMPT_CONFIG_OPTIONS","environmentVariableSelector","env","value","undefined","maxAttempt","parseInt","Number","isNaN","Error","configFileSelector","profile","default","resolveRetryConfig","input","retryStrategy","retryMode","_retryMode","maxAttempts","_maxAttempts","Object","assign","ADAPTIVE","ENV_RETRY_MODE","CONFIG_RETRY_MODE","NODE_RETRY_MODE_CONFIG_OPTIONS"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@smithy/middleware-retry/dist-es/configurations.js"],"sourcesContent":["import { normalizeProvider } from \"@smithy/util-middleware\";\nimport { AdaptiveRetryStrategy, DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, RETRY_MODES, StandardRetryStrategy, } from \"@smithy/util-retry\";\nexport const ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexport const CONFIG_MAX_ATTEMPTS = \"max_attempts\";\nexport const NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => {\n        const value = env[ENV_MAX_ATTEMPTS];\n        if (!value)\n            return undefined;\n        const maxAttempt = parseInt(value);\n        if (Number.isNaN(maxAttempt)) {\n            throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n        }\n        return maxAttempt;\n    },\n    configFileSelector: (profile) => {\n        const value = profile[CONFIG_MAX_ATTEMPTS];\n        if (!value)\n            return undefined;\n        const maxAttempt = parseInt(value);\n        if (Number.isNaN(maxAttempt)) {\n            throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n        }\n        return maxAttempt;\n    },\n    default: DEFAULT_MAX_ATTEMPTS,\n};\nexport const resolveRetryConfig = (input) => {\n    const { retryStrategy, retryMode: _retryMode, maxAttempts: _maxAttempts } = input;\n    const maxAttempts = normalizeProvider(_maxAttempts ?? DEFAULT_MAX_ATTEMPTS);\n    return Object.assign(input, {\n        maxAttempts,\n        retryStrategy: async () => {\n            if (retryStrategy) {\n                return retryStrategy;\n            }\n            const retryMode = await normalizeProvider(_retryMode)();\n            if (retryMode === RETRY_MODES.ADAPTIVE) {\n                return new AdaptiveRetryStrategy(maxAttempts);\n            }\n            return new StandardRetryStrategy(maxAttempts);\n        },\n    });\n};\nexport const ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexport const CONFIG_RETRY_MODE = \"retry_mode\";\nexport const NODE_RETRY_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_RETRY_MODE],\n    configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],\n    default: DEFAULT_RETRY_MODE,\n};\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,yBAAyB;AAC3D,SAASC,qBAAqB,EAAEC,oBAAoB,EAAEC,kBAAkB,EAAEC,WAAW,EAAEC,qBAAqB,QAAS,oBAAoB;AACzI,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,mBAAmB,GAAG,cAAc;AACjD,OAAO,MAAMC,+BAA+B,GAAG;EAC3CC,2BAA2B,EAAGC,GAAG,IAAK;IAClC,MAAMC,KAAK,GAAGD,GAAG,CAACJ,gBAAgB,CAAC;IACnC,IAAI,CAACK,KAAK,EACN,OAAOC,SAAS;IACpB,MAAMC,UAAU,GAAGC,QAAQ,CAACH,KAAK,CAAC;IAClC,IAAII,MAAM,CAACC,KAAK,CAACH,UAAU,CAAC,EAAE;MAC1B,MAAM,IAAII,KAAK,CAAC,wBAAwBX,gBAAgB,2BAA2BK,KAAK,GAAG,CAAC;IAChG;IACA,OAAOE,UAAU;EACrB,CAAC;EACDK,kBAAkB,EAAGC,OAAO,IAAK;IAC7B,MAAMR,KAAK,GAAGQ,OAAO,CAACZ,mBAAmB,CAAC;IAC1C,IAAI,CAACI,KAAK,EACN,OAAOC,SAAS;IACpB,MAAMC,UAAU,GAAGC,QAAQ,CAACH,KAAK,CAAC;IAClC,IAAII,MAAM,CAACC,KAAK,CAACH,UAAU,CAAC,EAAE;MAC1B,MAAM,IAAII,KAAK,CAAC,4BAA4BV,mBAAmB,2BAA2BI,KAAK,GAAG,CAAC;IACvG;IACA,OAAOE,UAAU;EACrB,CAAC;EACDO,OAAO,EAAElB;AACb,CAAC;AACD,OAAO,MAAMmB,kBAAkB,GAAIC,KAAK,IAAK;EACzC,MAAM;IAAEC,aAAa;IAAEC,SAAS,EAAEC,UAAU;IAAEC,WAAW,EAAEC;EAAa,CAAC,GAAGL,KAAK;EACjF,MAAMI,WAAW,GAAG1B,iBAAiB,CAAC2B,YAAY,IAAIzB,oBAAoB,CAAC;EAC3E,OAAO0B,MAAM,CAACC,MAAM,CAACP,KAAK,EAAE;IACxBI,WAAW;IACXH,aAAa,EAAE,MAAAA,CAAA,KAAY;MACvB,IAAIA,aAAa,EAAE;QACf,OAAOA,aAAa;MACxB;MACA,MAAMC,SAAS,GAAG,MAAMxB,iBAAiB,CAACyB,UAAU,CAAC,CAAC,CAAC;MACvD,IAAID,SAAS,KAAKpB,WAAW,CAAC0B,QAAQ,EAAE;QACpC,OAAO,IAAI7B,qBAAqB,CAACyB,WAAW,CAAC;MACjD;MACA,OAAO,IAAIrB,qBAAqB,CAACqB,WAAW,CAAC;IACjD;EACJ,CAAC,CAAC;AACN,CAAC;AACD,OAAO,MAAMK,cAAc,GAAG,gBAAgB;AAC9C,OAAO,MAAMC,iBAAiB,GAAG,YAAY;AAC7C,OAAO,MAAMC,8BAA8B,GAAG;EAC1CxB,2BAA2B,EAAGC,GAAG,IAAKA,GAAG,CAACqB,cAAc,CAAC;EACzDb,kBAAkB,EAAGC,OAAO,IAAKA,OAAO,CAACa,iBAAiB,CAAC;EAC3DZ,OAAO,EAAEjB;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}