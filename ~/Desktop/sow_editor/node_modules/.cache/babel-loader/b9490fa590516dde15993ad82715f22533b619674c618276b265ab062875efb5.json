{"ast":null,"code":"import { BedrockRuntimeClient, InvokeModelCommand } from '@aws-sdk/client-bedrock-runtime';\nexport class BedrockService {\n  constructor() {\n    // Check if AWS credentials are configured\n    this.isConfigured = !!(process.env.REACT_APP_AWS_ACCESS_KEY_ID && process.env.REACT_APP_AWS_SECRET_ACCESS_KEY);\n    if (this.isConfigured) {\n      // Initialize Bedrock client with environment variables\n      this.client = new BedrockRuntimeClient({\n        region: process.env.REACT_APP_AWS_REGION || 'us-east-1',\n        credentials: {\n          accessKeyId: process.env.REACT_APP_AWS_ACCESS_KEY_ID,\n          secretAccessKey: process.env.REACT_APP_AWS_SECRET_ACCESS_KEY\n        }\n      });\n      this.modelId = process.env.REACT_APP_BEDROCK_MODEL_ID || 'anthropic.claude-3-sonnet-20240229-v1:0';\n      console.log('BedrockService initialized with AWS credentials');\n    } else {\n      console.log('BedrockService initialized in placeholder mode - AWS credentials not configured');\n    }\n  }\n  async sendMessage(userMessage, context = {}) {\n    if (!this.isConfigured) {\n      // Placeholder implementation when AWS is not configured\n      console.log('Sending message to Claude (placeholder):', userMessage);\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      return `I understand you said: \"${userMessage}\". This is a placeholder response. Configure AWS credentials in .env file to enable real Claude responses.`;\n    }\n    try {\n      // Prepare the system prompt with SOW-specific context\n      const systemPrompt = this.buildSystemPrompt(context);\n\n      // Prepare the request payload for Claude\n      const payload = {\n        anthropic_version: 'bedrock-2023-05-31',\n        max_tokens: 4000,\n        system: systemPrompt,\n        messages: [{\n          role: 'user',\n          content: userMessage\n        }],\n        temperature: 0.7,\n        top_p: 0.9\n      };\n      const command = new InvokeModelCommand({\n        modelId: this.modelId,\n        contentType: 'application/json',\n        accept: 'application/json',\n        body: JSON.stringify(payload)\n      });\n      const response = await this.client.send(command);\n      const responseBody = JSON.parse(new TextDecoder().decode(response.body));\n      return responseBody.content[0].text;\n    } catch (error) {\n      console.error('Error calling Bedrock:', error);\n      throw new Error(`Failed to get response from Claude: ${error.message}`);\n    }\n  }\n  buildSystemPrompt(context) {\n    var _context$sections;\n    return `You are Claude, an expert AI assistant specializing in helping users write professional Statements of Work (SOW). You have deep knowledge of:\n\n1. SOW structure and best practices\n2. Technical writing and clarity\n3. Project management principles\n4. Industry standards and compliance requirements\n5. Risk assessment and mitigation strategies\n\nCurrent Document Context:\n- Title: ${context.documentTitle || 'Untitled SOW'}\n- Sections: ${((_context$sections = context.sections) === null || _context$sections === void 0 ? void 0 : _context$sections.length) || 0} sections\n- Current Content: ${JSON.stringify(context.currentContent || [])}\n\nYour role is to:\n- Provide clear, actionable suggestions for improving SOW content\n- Help structure sections logically and professionally\n- Identify missing elements or potential issues\n- Suggest industry best practices and standards\n- Clarify ambiguous requirements\n- Ensure completeness and professional tone\n\nGuidelines:\n- Be concise but thorough in your responses\n- Ask clarifying questions when requirements are ambiguous\n- Provide specific, actionable recommendations\n- Consider compliance and risk management aspects\n- Maintain a professional, helpful tone\n- Focus on practical implementation\n\nWhen reviewing content, consider:\n- Clarity and specificity of requirements\n- Completeness of scope definition\n- Risk identification and mitigation\n- Timeline and milestone clarity\n- Deliverable specifications\n- Acceptance criteria\n- Resource requirements\n- Compliance considerations`;\n  }\n  async generateSuggestions(selectedText, sectionType = 'general') {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    return `Here are suggestions for improving this ${sectionType} section: \"${selectedText}\". (Placeholder response)`;\n  }\n  async clarifyRequirements(ambiguousText) {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    return `This section needs clarification: \"${ambiguousText}\". (Placeholder response)`;\n  }\n  async validateSection(sectionContent, sectionType) {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    return `Validation results for ${sectionType} section: \"${sectionContent}\". (Placeholder response)`;\n  }\n}\nexport default BedrockService;","map":{"version":3,"names":["BedrockRuntimeClient","InvokeModelCommand","BedrockService","constructor","isConfigured","process","env","REACT_APP_AWS_ACCESS_KEY_ID","REACT_APP_AWS_SECRET_ACCESS_KEY","client","region","REACT_APP_AWS_REGION","credentials","accessKeyId","secretAccessKey","modelId","REACT_APP_BEDROCK_MODEL_ID","console","log","sendMessage","userMessage","context","Promise","resolve","setTimeout","systemPrompt","buildSystemPrompt","payload","anthropic_version","max_tokens","system","messages","role","content","temperature","top_p","command","contentType","accept","body","JSON","stringify","response","send","responseBody","parse","TextDecoder","decode","text","error","Error","message","_context$sections","documentTitle","sections","length","currentContent","generateSuggestions","selectedText","sectionType","clarifyRequirements","ambiguousText","validateSection","sectionContent"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/src/services/bedrockService.js"],"sourcesContent":["import { \n  BedrockRuntimeClient, \n  InvokeModelCommand \n} from '@aws-sdk/client-bedrock-runtime';\n\nexport class BedrockService {\n  constructor() {\n    // Check if AWS credentials are configured\n    this.isConfigured = !!(\n      process.env.REACT_APP_AWS_ACCESS_KEY_ID && \n      process.env.REACT_APP_AWS_SECRET_ACCESS_KEY\n    );\n\n    if (this.isConfigured) {\n      // Initialize Bedrock client with environment variables\n      this.client = new BedrockRuntimeClient({\n        region: process.env.REACT_APP_AWS_REGION || 'us-east-1',\n        credentials: {\n          accessKeyId: process.env.REACT_APP_AWS_ACCESS_KEY_ID,\n          secretAccessKey: process.env.REACT_APP_AWS_SECRET_ACCESS_KEY,\n        },\n      });\n      \n      this.modelId = process.env.REACT_APP_BEDROCK_MODEL_ID || 'anthropic.claude-3-sonnet-20240229-v1:0';\n      console.log('BedrockService initialized with AWS credentials');\n    } else {\n      console.log('BedrockService initialized in placeholder mode - AWS credentials not configured');\n    }\n  }\n\n  async sendMessage(userMessage, context = {}) {\n    if (!this.isConfigured) {\n      // Placeholder implementation when AWS is not configured\n      console.log('Sending message to Claude (placeholder):', userMessage);\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      return `I understand you said: \"${userMessage}\". This is a placeholder response. Configure AWS credentials in .env file to enable real Claude responses.`;\n    }\n\n    try {\n      // Prepare the system prompt with SOW-specific context\n      const systemPrompt = this.buildSystemPrompt(context);\n      \n      // Prepare the request payload for Claude\n      const payload = {\n        anthropic_version: 'bedrock-2023-05-31',\n        max_tokens: 4000,\n        system: systemPrompt,\n        messages: [\n          {\n            role: 'user',\n            content: userMessage\n          }\n        ],\n        temperature: 0.7,\n        top_p: 0.9\n      };\n\n      const command = new InvokeModelCommand({\n        modelId: this.modelId,\n        contentType: 'application/json',\n        accept: 'application/json',\n        body: JSON.stringify(payload)\n      });\n\n      const response = await this.client.send(command);\n      const responseBody = JSON.parse(new TextDecoder().decode(response.body));\n      \n      return responseBody.content[0].text;\n    } catch (error) {\n      console.error('Error calling Bedrock:', error);\n      throw new Error(`Failed to get response from Claude: ${error.message}`);\n    }\n  }\n\n  buildSystemPrompt(context) {\n    return `You are Claude, an expert AI assistant specializing in helping users write professional Statements of Work (SOW). You have deep knowledge of:\n\n1. SOW structure and best practices\n2. Technical writing and clarity\n3. Project management principles\n4. Industry standards and compliance requirements\n5. Risk assessment and mitigation strategies\n\nCurrent Document Context:\n- Title: ${context.documentTitle || 'Untitled SOW'}\n- Sections: ${context.sections?.length || 0} sections\n- Current Content: ${JSON.stringify(context.currentContent || [])}\n\nYour role is to:\n- Provide clear, actionable suggestions for improving SOW content\n- Help structure sections logically and professionally\n- Identify missing elements or potential issues\n- Suggest industry best practices and standards\n- Clarify ambiguous requirements\n- Ensure completeness and professional tone\n\nGuidelines:\n- Be concise but thorough in your responses\n- Ask clarifying questions when requirements are ambiguous\n- Provide specific, actionable recommendations\n- Consider compliance and risk management aspects\n- Maintain a professional, helpful tone\n- Focus on practical implementation\n\nWhen reviewing content, consider:\n- Clarity and specificity of requirements\n- Completeness of scope definition\n- Risk identification and mitigation\n- Timeline and milestone clarity\n- Deliverable specifications\n- Acceptance criteria\n- Resource requirements\n- Compliance considerations`;\n  }\n\n  async generateSuggestions(selectedText, sectionType = 'general') {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    return `Here are suggestions for improving this ${sectionType} section: \"${selectedText}\". (Placeholder response)`;\n  }\n\n  async clarifyRequirements(ambiguousText) {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    return `This section needs clarification: \"${ambiguousText}\". (Placeholder response)`;\n  }\n\n  async validateSection(sectionContent, sectionType) {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    return `Validation results for ${sectionType} section: \"${sectionContent}\". (Placeholder response)`;\n  }\n}\n\nexport default BedrockService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}