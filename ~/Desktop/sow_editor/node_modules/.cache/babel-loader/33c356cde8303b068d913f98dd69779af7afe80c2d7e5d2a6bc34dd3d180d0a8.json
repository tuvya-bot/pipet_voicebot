{"ast":null,"code":"import { toBase64 } from \"@smithy/util-base64\";\nimport { isReadableStream } from \"../stream-type-check\";\nimport { ChecksumStream } from \"./ChecksumStream.browser\";\nexport const createChecksumStream = ({\n  expectedChecksum,\n  checksum,\n  source,\n  checksumSourceLocation,\n  base64Encoder\n}) => {\n  if (!isReadableStream(source)) {\n    throw new Error(`@smithy/util-stream: unsupported source type ${source?.constructor?.name ?? source} in ChecksumStream.`);\n  }\n  const encoder = base64Encoder ?? toBase64;\n  if (typeof TransformStream !== \"function\") {\n    throw new Error(\"@smithy/util-stream: unable to instantiate ChecksumStream because API unavailable: ReadableStream/TransformStream.\");\n  }\n  const transform = new TransformStream({\n    start() {},\n    async transform(chunk, controller) {\n      checksum.update(chunk);\n      controller.enqueue(chunk);\n    },\n    async flush(controller) {\n      const digest = await checksum.digest();\n      const received = encoder(digest);\n      if (expectedChecksum !== received) {\n        const error = new Error(`Checksum mismatch: expected \"${expectedChecksum}\" but received \"${received}\"` + ` in response header \"${checksumSourceLocation}\".`);\n        controller.error(error);\n      } else {\n        controller.terminate();\n      }\n    }\n  });\n  source.pipeThrough(transform);\n  const readable = transform.readable;\n  Object.setPrototypeOf(readable, ChecksumStream.prototype);\n  return readable;\n};","map":{"version":3,"names":["toBase64","isReadableStream","ChecksumStream","createChecksumStream","expectedChecksum","checksum","source","checksumSourceLocation","base64Encoder","Error","constructor","name","encoder","TransformStream","transform","start","chunk","controller","update","enqueue","flush","digest","received","error","terminate","pipeThrough","readable","Object","setPrototypeOf","prototype"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@smithy/util-stream/dist-es/checksum/createChecksumStream.browser.js"],"sourcesContent":["import { toBase64 } from \"@smithy/util-base64\";\nimport { isReadableStream } from \"../stream-type-check\";\nimport { ChecksumStream } from \"./ChecksumStream.browser\";\nexport const createChecksumStream = ({ expectedChecksum, checksum, source, checksumSourceLocation, base64Encoder, }) => {\n    if (!isReadableStream(source)) {\n        throw new Error(`@smithy/util-stream: unsupported source type ${source?.constructor?.name ?? source} in ChecksumStream.`);\n    }\n    const encoder = base64Encoder ?? toBase64;\n    if (typeof TransformStream !== \"function\") {\n        throw new Error(\"@smithy/util-stream: unable to instantiate ChecksumStream because API unavailable: ReadableStream/TransformStream.\");\n    }\n    const transform = new TransformStream({\n        start() { },\n        async transform(chunk, controller) {\n            checksum.update(chunk);\n            controller.enqueue(chunk);\n        },\n        async flush(controller) {\n            const digest = await checksum.digest();\n            const received = encoder(digest);\n            if (expectedChecksum !== received) {\n                const error = new Error(`Checksum mismatch: expected \"${expectedChecksum}\" but received \"${received}\"` +\n                    ` in response header \"${checksumSourceLocation}\".`);\n                controller.error(error);\n            }\n            else {\n                controller.terminate();\n            }\n        },\n    });\n    source.pipeThrough(transform);\n    const readable = transform.readable;\n    Object.setPrototypeOf(readable, ChecksumStream.prototype);\n    return readable;\n};\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,gBAAgB,QAAQ,sBAAsB;AACvD,SAASC,cAAc,QAAQ,0BAA0B;AACzD,OAAO,MAAMC,oBAAoB,GAAGA,CAAC;EAAEC,gBAAgB;EAAEC,QAAQ;EAAEC,MAAM;EAAEC,sBAAsB;EAAEC;AAAe,CAAC,KAAK;EACpH,IAAI,CAACP,gBAAgB,CAACK,MAAM,CAAC,EAAE;IAC3B,MAAM,IAAIG,KAAK,CAAC,gDAAgDH,MAAM,EAAEI,WAAW,EAAEC,IAAI,IAAIL,MAAM,qBAAqB,CAAC;EAC7H;EACA,MAAMM,OAAO,GAAGJ,aAAa,IAAIR,QAAQ;EACzC,IAAI,OAAOa,eAAe,KAAK,UAAU,EAAE;IACvC,MAAM,IAAIJ,KAAK,CAAC,oHAAoH,CAAC;EACzI;EACA,MAAMK,SAAS,GAAG,IAAID,eAAe,CAAC;IAClCE,KAAKA,CAAA,EAAG,CAAE,CAAC;IACX,MAAMD,SAASA,CAACE,KAAK,EAAEC,UAAU,EAAE;MAC/BZ,QAAQ,CAACa,MAAM,CAACF,KAAK,CAAC;MACtBC,UAAU,CAACE,OAAO,CAACH,KAAK,CAAC;IAC7B,CAAC;IACD,MAAMI,KAAKA,CAACH,UAAU,EAAE;MACpB,MAAMI,MAAM,GAAG,MAAMhB,QAAQ,CAACgB,MAAM,CAAC,CAAC;MACtC,MAAMC,QAAQ,GAAGV,OAAO,CAACS,MAAM,CAAC;MAChC,IAAIjB,gBAAgB,KAAKkB,QAAQ,EAAE;QAC/B,MAAMC,KAAK,GAAG,IAAId,KAAK,CAAC,gCAAgCL,gBAAgB,mBAAmBkB,QAAQ,GAAG,GAClG,wBAAwBf,sBAAsB,IAAI,CAAC;QACvDU,UAAU,CAACM,KAAK,CAACA,KAAK,CAAC;MAC3B,CAAC,MACI;QACDN,UAAU,CAACO,SAAS,CAAC,CAAC;MAC1B;IACJ;EACJ,CAAC,CAAC;EACFlB,MAAM,CAACmB,WAAW,CAACX,SAAS,CAAC;EAC7B,MAAMY,QAAQ,GAAGZ,SAAS,CAACY,QAAQ;EACnCC,MAAM,CAACC,cAAc,CAACF,QAAQ,EAAExB,cAAc,CAAC2B,SAAS,CAAC;EACzD,OAAOH,QAAQ;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}