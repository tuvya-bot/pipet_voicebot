{"ast":null,"code":"import { collectBody, RpcProtocol } from \"@smithy/core/protocols\";\nimport { deref, NormalizedSchema, SCHEMA, TypeRegistry } from \"@smithy/core/schema\";\nimport { calculateBodyLength } from \"@smithy/util-body-length-browser\";\nimport { XmlShapeDeserializer } from \"../xml/XmlShapeDeserializer\";\nimport { QueryShapeSerializer } from \"./QueryShapeSerializer\";\nexport class AwsQueryProtocol extends RpcProtocol {\n  options;\n  serializer;\n  deserializer;\n  constructor(options) {\n    super({\n      defaultNamespace: options.defaultNamespace\n    });\n    this.options = options;\n    const settings = {\n      timestampFormat: {\n        useTrait: true,\n        default: SCHEMA.TIMESTAMP_DATE_TIME\n      },\n      httpBindings: false,\n      xmlNamespace: options.xmlNamespace,\n      serviceNamespace: options.defaultNamespace,\n      serializeEmptyLists: true\n    };\n    this.serializer = new QueryShapeSerializer(settings);\n    this.deserializer = new XmlShapeDeserializer(settings);\n  }\n  getShapeId() {\n    return \"aws.protocols#awsQuery\";\n  }\n  setSerdeContext(serdeContext) {\n    this.serializer.setSerdeContext(serdeContext);\n    this.deserializer.setSerdeContext(serdeContext);\n  }\n  getPayloadCodec() {\n    throw new Error(\"AWSQuery protocol has no payload codec.\");\n  }\n  async serializeRequest(operationSchema, input, context) {\n    const request = await super.serializeRequest(operationSchema, input, context);\n    if (!request.path.endsWith(\"/\")) {\n      request.path += \"/\";\n    }\n    Object.assign(request.headers, {\n      \"content-type\": `application/x-www-form-urlencoded`\n    });\n    if (deref(operationSchema.input) === \"unit\" || !request.body) {\n      request.body = \"\";\n    }\n    request.body = `Action=${operationSchema.name.split(\"#\")[1]}&Version=${this.options.version}` + request.body;\n    if (request.body.endsWith(\"&\")) {\n      request.body = request.body.slice(-1);\n    }\n    try {\n      request.headers[\"content-length\"] = String(calculateBodyLength(request.body));\n    } catch (e) {}\n    return request;\n  }\n  async deserializeResponse(operationSchema, context, response) {\n    const deserializer = this.deserializer;\n    const ns = NormalizedSchema.of(operationSchema.output);\n    const dataObject = {};\n    if (response.statusCode >= 300) {\n      const bytes = await collectBody(response.body, context);\n      if (bytes.byteLength > 0) {\n        Object.assign(dataObject, await deserializer.read(SCHEMA.DOCUMENT, bytes));\n      }\n      await this.handleError(operationSchema, context, response, dataObject, this.deserializeMetadata(response));\n    }\n    for (const header in response.headers) {\n      const value = response.headers[header];\n      delete response.headers[header];\n      response.headers[header.toLowerCase()] = value;\n    }\n    const awsQueryResultKey = ns.isStructSchema() && this.useNestedResult() ? operationSchema.name.split(\"#\")[1] + \"Result\" : undefined;\n    const bytes = await collectBody(response.body, context);\n    if (bytes.byteLength > 0) {\n      Object.assign(dataObject, await deserializer.read(ns, bytes, awsQueryResultKey));\n    }\n    const output = {\n      $metadata: this.deserializeMetadata(response),\n      ...dataObject\n    };\n    return output;\n  }\n  useNestedResult() {\n    return true;\n  }\n  async handleError(operationSchema, context, response, dataObject, metadata) {\n    const errorIdentifier = this.loadQueryErrorCode(response, dataObject) ?? \"Unknown\";\n    let namespace = this.options.defaultNamespace;\n    let errorName = errorIdentifier;\n    if (errorIdentifier.includes(\"#\")) {\n      [namespace, errorName] = errorIdentifier.split(\"#\");\n    }\n    const errorDataSource = this.loadQueryError(dataObject);\n    const registry = TypeRegistry.for(namespace);\n    let errorSchema;\n    try {\n      errorSchema = registry.find(schema => NormalizedSchema.of(schema).getMergedTraits().awsQueryError?.[0] === errorName);\n      if (!errorSchema) {\n        errorSchema = registry.getSchema(errorIdentifier);\n      }\n    } catch (e) {\n      const baseExceptionSchema = TypeRegistry.for(\"smithy.ts.sdk.synthetic.\" + namespace).getBaseException();\n      if (baseExceptionSchema) {\n        const ErrorCtor = baseExceptionSchema.ctor;\n        throw Object.assign(new ErrorCtor(errorName), errorDataSource);\n      }\n      throw new Error(errorName);\n    }\n    const ns = NormalizedSchema.of(errorSchema);\n    const message = this.loadQueryErrorMessage(dataObject);\n    const exception = new errorSchema.ctor(message);\n    const output = {};\n    for (const [name, member] of ns.structIterator()) {\n      const target = member.getMergedTraits().xmlName ?? name;\n      const value = errorDataSource[target] ?? dataObject[target];\n      output[name] = this.deserializer.readSchema(member, value);\n    }\n    Object.assign(exception, {\n      $metadata: metadata,\n      $response: response,\n      $fault: ns.getMergedTraits().error,\n      message,\n      ...output\n    });\n    throw exception;\n  }\n  loadQueryErrorCode(output, data) {\n    const code = (data.Errors?.[0]?.Error ?? data.Errors?.Error ?? data.Error)?.Code;\n    if (code !== undefined) {\n      return code;\n    }\n    if (output.statusCode == 404) {\n      return \"NotFound\";\n    }\n  }\n  loadQueryError(data) {\n    return data.Errors?.[0]?.Error ?? data.Errors?.Error ?? data.Error;\n  }\n  loadQueryErrorMessage(data) {\n    const errorData = this.loadQueryError(data);\n    return errorData?.message ?? errorData?.Message ?? data.message ?? data.Message ?? \"Unknown\";\n  }\n}","map":{"version":3,"names":["collectBody","RpcProtocol","deref","NormalizedSchema","SCHEMA","TypeRegistry","calculateBodyLength","XmlShapeDeserializer","QueryShapeSerializer","AwsQueryProtocol","options","serializer","deserializer","constructor","defaultNamespace","settings","timestampFormat","useTrait","default","TIMESTAMP_DATE_TIME","httpBindings","xmlNamespace","serviceNamespace","serializeEmptyLists","getShapeId","setSerdeContext","serdeContext","getPayloadCodec","Error","serializeRequest","operationSchema","input","context","request","path","endsWith","Object","assign","headers","body","name","split","version","slice","String","e","deserializeResponse","response","ns","of","output","dataObject","statusCode","bytes","byteLength","read","DOCUMENT","handleError","deserializeMetadata","header","value","toLowerCase","awsQueryResultKey","isStructSchema","useNestedResult","undefined","$metadata","metadata","errorIdentifier","loadQueryErrorCode","namespace","errorName","includes","errorDataSource","loadQueryError","registry","for","errorSchema","find","schema","getMergedTraits","awsQueryError","getSchema","baseExceptionSchema","getBaseException","ErrorCtor","ctor","message","loadQueryErrorMessage","exception","member","structIterator","target","xmlName","readSchema","$response","$fault","error","data","code","Errors","Code","errorData","Message"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@aws-sdk/core/dist-es/submodules/protocols/query/AwsQueryProtocol.js"],"sourcesContent":["import { collectBody, RpcProtocol } from \"@smithy/core/protocols\";\nimport { deref, NormalizedSchema, SCHEMA, TypeRegistry } from \"@smithy/core/schema\";\nimport { calculateBodyLength } from \"@smithy/util-body-length-browser\";\nimport { XmlShapeDeserializer } from \"../xml/XmlShapeDeserializer\";\nimport { QueryShapeSerializer } from \"./QueryShapeSerializer\";\nexport class AwsQueryProtocol extends RpcProtocol {\n    options;\n    serializer;\n    deserializer;\n    constructor(options) {\n        super({\n            defaultNamespace: options.defaultNamespace,\n        });\n        this.options = options;\n        const settings = {\n            timestampFormat: {\n                useTrait: true,\n                default: SCHEMA.TIMESTAMP_DATE_TIME,\n            },\n            httpBindings: false,\n            xmlNamespace: options.xmlNamespace,\n            serviceNamespace: options.defaultNamespace,\n            serializeEmptyLists: true,\n        };\n        this.serializer = new QueryShapeSerializer(settings);\n        this.deserializer = new XmlShapeDeserializer(settings);\n    }\n    getShapeId() {\n        return \"aws.protocols#awsQuery\";\n    }\n    setSerdeContext(serdeContext) {\n        this.serializer.setSerdeContext(serdeContext);\n        this.deserializer.setSerdeContext(serdeContext);\n    }\n    getPayloadCodec() {\n        throw new Error(\"AWSQuery protocol has no payload codec.\");\n    }\n    async serializeRequest(operationSchema, input, context) {\n        const request = await super.serializeRequest(operationSchema, input, context);\n        if (!request.path.endsWith(\"/\")) {\n            request.path += \"/\";\n        }\n        Object.assign(request.headers, {\n            \"content-type\": `application/x-www-form-urlencoded`,\n        });\n        if (deref(operationSchema.input) === \"unit\" || !request.body) {\n            request.body = \"\";\n        }\n        request.body = `Action=${operationSchema.name.split(\"#\")[1]}&Version=${this.options.version}` + request.body;\n        if (request.body.endsWith(\"&\")) {\n            request.body = request.body.slice(-1);\n        }\n        try {\n            request.headers[\"content-length\"] = String(calculateBodyLength(request.body));\n        }\n        catch (e) { }\n        return request;\n    }\n    async deserializeResponse(operationSchema, context, response) {\n        const deserializer = this.deserializer;\n        const ns = NormalizedSchema.of(operationSchema.output);\n        const dataObject = {};\n        if (response.statusCode >= 300) {\n            const bytes = await collectBody(response.body, context);\n            if (bytes.byteLength > 0) {\n                Object.assign(dataObject, await deserializer.read(SCHEMA.DOCUMENT, bytes));\n            }\n            await this.handleError(operationSchema, context, response, dataObject, this.deserializeMetadata(response));\n        }\n        for (const header in response.headers) {\n            const value = response.headers[header];\n            delete response.headers[header];\n            response.headers[header.toLowerCase()] = value;\n        }\n        const awsQueryResultKey = ns.isStructSchema() && this.useNestedResult() ? operationSchema.name.split(\"#\")[1] + \"Result\" : undefined;\n        const bytes = await collectBody(response.body, context);\n        if (bytes.byteLength > 0) {\n            Object.assign(dataObject, await deserializer.read(ns, bytes, awsQueryResultKey));\n        }\n        const output = {\n            $metadata: this.deserializeMetadata(response),\n            ...dataObject,\n        };\n        return output;\n    }\n    useNestedResult() {\n        return true;\n    }\n    async handleError(operationSchema, context, response, dataObject, metadata) {\n        const errorIdentifier = this.loadQueryErrorCode(response, dataObject) ?? \"Unknown\";\n        let namespace = this.options.defaultNamespace;\n        let errorName = errorIdentifier;\n        if (errorIdentifier.includes(\"#\")) {\n            [namespace, errorName] = errorIdentifier.split(\"#\");\n        }\n        const errorDataSource = this.loadQueryError(dataObject);\n        const registry = TypeRegistry.for(namespace);\n        let errorSchema;\n        try {\n            errorSchema = registry.find((schema) => NormalizedSchema.of(schema).getMergedTraits().awsQueryError?.[0] === errorName);\n            if (!errorSchema) {\n                errorSchema = registry.getSchema(errorIdentifier);\n            }\n        }\n        catch (e) {\n            const baseExceptionSchema = TypeRegistry.for(\"smithy.ts.sdk.synthetic.\" + namespace).getBaseException();\n            if (baseExceptionSchema) {\n                const ErrorCtor = baseExceptionSchema.ctor;\n                throw Object.assign(new ErrorCtor(errorName), errorDataSource);\n            }\n            throw new Error(errorName);\n        }\n        const ns = NormalizedSchema.of(errorSchema);\n        const message = this.loadQueryErrorMessage(dataObject);\n        const exception = new errorSchema.ctor(message);\n        const output = {};\n        for (const [name, member] of ns.structIterator()) {\n            const target = member.getMergedTraits().xmlName ?? name;\n            const value = errorDataSource[target] ?? dataObject[target];\n            output[name] = this.deserializer.readSchema(member, value);\n        }\n        Object.assign(exception, {\n            $metadata: metadata,\n            $response: response,\n            $fault: ns.getMergedTraits().error,\n            message,\n            ...output,\n        });\n        throw exception;\n    }\n    loadQueryErrorCode(output, data) {\n        const code = (data.Errors?.[0]?.Error ?? data.Errors?.Error ?? data.Error)?.Code;\n        if (code !== undefined) {\n            return code;\n        }\n        if (output.statusCode == 404) {\n            return \"NotFound\";\n        }\n    }\n    loadQueryError(data) {\n        return data.Errors?.[0]?.Error ?? data.Errors?.Error ?? data.Error;\n    }\n    loadQueryErrorMessage(data) {\n        const errorData = this.loadQueryError(data);\n        return errorData?.message ?? errorData?.Message ?? data.message ?? data.Message ?? \"Unknown\";\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}