{"ast":null,"code":"import { HttpRequest } from \"@smithy/protocol-http\";\nimport { SMITHY_CONTEXT_KEY } from \"@smithy/types\";\nimport { getSmithyContext } from \"@smithy/util-middleware\";\nconst defaultErrorHandler = signingProperties => error => {\n  throw error;\n};\nconst defaultSuccessHandler = (httpResponse, signingProperties) => {};\nexport const httpSigningMiddleware = config => (next, context) => async args => {\n  if (!HttpRequest.isInstance(args.request)) {\n    return next(args);\n  }\n  const smithyContext = getSmithyContext(context);\n  const scheme = smithyContext.selectedHttpAuthScheme;\n  if (!scheme) {\n    throw new Error(`No HttpAuthScheme was selected: unable to sign request`);\n  }\n  const {\n    httpAuthOption: {\n      signingProperties = {}\n    },\n    identity,\n    signer\n  } = scheme;\n  const output = await next({\n    ...args,\n    request: await signer.sign(args.request, identity, signingProperties)\n  }).catch((signer.errorHandler || defaultErrorHandler)(signingProperties));\n  (signer.successHandler || defaultSuccessHandler)(output.response, signingProperties);\n  return output;\n};","map":{"version":3,"names":["HttpRequest","SMITHY_CONTEXT_KEY","getSmithyContext","defaultErrorHandler","signingProperties","error","defaultSuccessHandler","httpResponse","httpSigningMiddleware","config","next","context","args","isInstance","request","smithyContext","scheme","selectedHttpAuthScheme","Error","httpAuthOption","identity","signer","output","sign","catch","errorHandler","successHandler","response"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@smithy/core/dist-es/middleware-http-signing/httpSigningMiddleware.js"],"sourcesContent":["import { HttpRequest } from \"@smithy/protocol-http\";\nimport { SMITHY_CONTEXT_KEY, } from \"@smithy/types\";\nimport { getSmithyContext } from \"@smithy/util-middleware\";\nconst defaultErrorHandler = (signingProperties) => (error) => {\n    throw error;\n};\nconst defaultSuccessHandler = (httpResponse, signingProperties) => { };\nexport const httpSigningMiddleware = (config) => (next, context) => async (args) => {\n    if (!HttpRequest.isInstance(args.request)) {\n        return next(args);\n    }\n    const smithyContext = getSmithyContext(context);\n    const scheme = smithyContext.selectedHttpAuthScheme;\n    if (!scheme) {\n        throw new Error(`No HttpAuthScheme was selected: unable to sign request`);\n    }\n    const { httpAuthOption: { signingProperties = {} }, identity, signer, } = scheme;\n    const output = await next({\n        ...args,\n        request: await signer.sign(args.request, identity, signingProperties),\n    }).catch((signer.errorHandler || defaultErrorHandler)(signingProperties));\n    (signer.successHandler || defaultSuccessHandler)(output.response, signingProperties);\n    return output;\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,uBAAuB;AACnD,SAASC,kBAAkB,QAAS,eAAe;AACnD,SAASC,gBAAgB,QAAQ,yBAAyB;AAC1D,MAAMC,mBAAmB,GAAIC,iBAAiB,IAAMC,KAAK,IAAK;EAC1D,MAAMA,KAAK;AACf,CAAC;AACD,MAAMC,qBAAqB,GAAGA,CAACC,YAAY,EAAEH,iBAAiB,KAAK,CAAE,CAAC;AACtE,OAAO,MAAMI,qBAAqB,GAAIC,MAAM,IAAK,CAACC,IAAI,EAAEC,OAAO,KAAK,MAAOC,IAAI,IAAK;EAChF,IAAI,CAACZ,WAAW,CAACa,UAAU,CAACD,IAAI,CAACE,OAAO,CAAC,EAAE;IACvC,OAAOJ,IAAI,CAACE,IAAI,CAAC;EACrB;EACA,MAAMG,aAAa,GAAGb,gBAAgB,CAACS,OAAO,CAAC;EAC/C,MAAMK,MAAM,GAAGD,aAAa,CAACE,sBAAsB;EACnD,IAAI,CAACD,MAAM,EAAE;IACT,MAAM,IAAIE,KAAK,CAAC,wDAAwD,CAAC;EAC7E;EACA,MAAM;IAAEC,cAAc,EAAE;MAAEf,iBAAiB,GAAG,CAAC;IAAE,CAAC;IAAEgB,QAAQ;IAAEC;EAAQ,CAAC,GAAGL,MAAM;EAChF,MAAMM,MAAM,GAAG,MAAMZ,IAAI,CAAC;IACtB,GAAGE,IAAI;IACPE,OAAO,EAAE,MAAMO,MAAM,CAACE,IAAI,CAACX,IAAI,CAACE,OAAO,EAAEM,QAAQ,EAAEhB,iBAAiB;EACxE,CAAC,CAAC,CAACoB,KAAK,CAAC,CAACH,MAAM,CAACI,YAAY,IAAItB,mBAAmB,EAAEC,iBAAiB,CAAC,CAAC;EACzE,CAACiB,MAAM,CAACK,cAAc,IAAIpB,qBAAqB,EAAEgB,MAAM,CAACK,QAAQ,EAAEvB,iBAAiB,CAAC;EACpF,OAAOkB,MAAM;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}