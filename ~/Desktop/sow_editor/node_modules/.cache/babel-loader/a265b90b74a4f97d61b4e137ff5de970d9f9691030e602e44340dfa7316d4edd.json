{"ast":null,"code":"import { AlgorithmId } from \"@smithy/types\";\nexport { AlgorithmId };\nexport const getChecksumConfiguration = runtimeConfig => {\n  const checksumAlgorithms = [];\n  for (const id in AlgorithmId) {\n    const algorithmId = AlgorithmId[id];\n    if (runtimeConfig[algorithmId] === undefined) {\n      continue;\n    }\n    checksumAlgorithms.push({\n      algorithmId: () => algorithmId,\n      checksumConstructor: () => runtimeConfig[algorithmId]\n    });\n  }\n  return {\n    addChecksumAlgorithm(algo) {\n      checksumAlgorithms.push(algo);\n    },\n    checksumAlgorithms() {\n      return checksumAlgorithms;\n    }\n  };\n};\nexport const resolveChecksumRuntimeConfig = clientConfig => {\n  const runtimeConfig = {};\n  clientConfig.checksumAlgorithms().forEach(checksumAlgorithm => {\n    runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();\n  });\n  return runtimeConfig;\n};","map":{"version":3,"names":["AlgorithmId","getChecksumConfiguration","runtimeConfig","checksumAlgorithms","id","algorithmId","undefined","push","checksumConstructor","addChecksumAlgorithm","algo","resolveChecksumRuntimeConfig","clientConfig","forEach","checksumAlgorithm"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@smithy/smithy-client/dist-es/extensions/checksum.js"],"sourcesContent":["import { AlgorithmId } from \"@smithy/types\";\nexport { AlgorithmId };\nexport const getChecksumConfiguration = (runtimeConfig) => {\n    const checksumAlgorithms = [];\n    for (const id in AlgorithmId) {\n        const algorithmId = AlgorithmId[id];\n        if (runtimeConfig[algorithmId] === undefined) {\n            continue;\n        }\n        checksumAlgorithms.push({\n            algorithmId: () => algorithmId,\n            checksumConstructor: () => runtimeConfig[algorithmId],\n        });\n    }\n    return {\n        addChecksumAlgorithm(algo) {\n            checksumAlgorithms.push(algo);\n        },\n        checksumAlgorithms() {\n            return checksumAlgorithms;\n        },\n    };\n};\nexport const resolveChecksumRuntimeConfig = (clientConfig) => {\n    const runtimeConfig = {};\n    clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {\n        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();\n    });\n    return runtimeConfig;\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,eAAe;AAC3C,SAASA,WAAW;AACpB,OAAO,MAAMC,wBAAwB,GAAIC,aAAa,IAAK;EACvD,MAAMC,kBAAkB,GAAG,EAAE;EAC7B,KAAK,MAAMC,EAAE,IAAIJ,WAAW,EAAE;IAC1B,MAAMK,WAAW,GAAGL,WAAW,CAACI,EAAE,CAAC;IACnC,IAAIF,aAAa,CAACG,WAAW,CAAC,KAAKC,SAAS,EAAE;MAC1C;IACJ;IACAH,kBAAkB,CAACI,IAAI,CAAC;MACpBF,WAAW,EAAEA,CAAA,KAAMA,WAAW;MAC9BG,mBAAmB,EAAEA,CAAA,KAAMN,aAAa,CAACG,WAAW;IACxD,CAAC,CAAC;EACN;EACA,OAAO;IACHI,oBAAoBA,CAACC,IAAI,EAAE;MACvBP,kBAAkB,CAACI,IAAI,CAACG,IAAI,CAAC;IACjC,CAAC;IACDP,kBAAkBA,CAAA,EAAG;MACjB,OAAOA,kBAAkB;IAC7B;EACJ,CAAC;AACL,CAAC;AACD,OAAO,MAAMQ,4BAA4B,GAAIC,YAAY,IAAK;EAC1D,MAAMV,aAAa,GAAG,CAAC,CAAC;EACxBU,YAAY,CAACT,kBAAkB,CAAC,CAAC,CAACU,OAAO,CAAEC,iBAAiB,IAAK;IAC7DZ,aAAa,CAACY,iBAAiB,CAACT,WAAW,CAAC,CAAC,CAAC,GAAGS,iBAAiB,CAACN,mBAAmB,CAAC,CAAC;EAC5F,CAAC,CAAC;EACF,OAAON,aAAa;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}