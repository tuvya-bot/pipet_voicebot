{"ast":null,"code":"import { fromHex, toHex } from \"@smithy/util-hex-encoding\";\nimport { Int64 } from \"./Int64\";\nexport class HeaderMarshaller {\n  constructor(toUtf8, fromUtf8) {\n    this.toUtf8 = toUtf8;\n    this.fromUtf8 = fromUtf8;\n  }\n  format(headers) {\n    const chunks = [];\n    for (const headerName of Object.keys(headers)) {\n      const bytes = this.fromUtf8(headerName);\n      chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));\n    }\n    const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));\n    let position = 0;\n    for (const chunk of chunks) {\n      out.set(chunk, position);\n      position += chunk.byteLength;\n    }\n    return out;\n  }\n  formatHeaderValue(header) {\n    switch (header.type) {\n      case \"boolean\":\n        return Uint8Array.from([header.value ? 0 : 1]);\n      case \"byte\":\n        return Uint8Array.from([2, header.value]);\n      case \"short\":\n        const shortView = new DataView(new ArrayBuffer(3));\n        shortView.setUint8(0, 3);\n        shortView.setInt16(1, header.value, false);\n        return new Uint8Array(shortView.buffer);\n      case \"integer\":\n        const intView = new DataView(new ArrayBuffer(5));\n        intView.setUint8(0, 4);\n        intView.setInt32(1, header.value, false);\n        return new Uint8Array(intView.buffer);\n      case \"long\":\n        const longBytes = new Uint8Array(9);\n        longBytes[0] = 5;\n        longBytes.set(header.value.bytes, 1);\n        return longBytes;\n      case \"binary\":\n        const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));\n        binView.setUint8(0, 6);\n        binView.setUint16(1, header.value.byteLength, false);\n        const binBytes = new Uint8Array(binView.buffer);\n        binBytes.set(header.value, 3);\n        return binBytes;\n      case \"string\":\n        const utf8Bytes = this.fromUtf8(header.value);\n        const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));\n        strView.setUint8(0, 7);\n        strView.setUint16(1, utf8Bytes.byteLength, false);\n        const strBytes = new Uint8Array(strView.buffer);\n        strBytes.set(utf8Bytes, 3);\n        return strBytes;\n      case \"timestamp\":\n        const tsBytes = new Uint8Array(9);\n        tsBytes[0] = 8;\n        tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);\n        return tsBytes;\n      case \"uuid\":\n        if (!UUID_PATTERN.test(header.value)) {\n          throw new Error(`Invalid UUID received: ${header.value}`);\n        }\n        const uuidBytes = new Uint8Array(17);\n        uuidBytes[0] = 9;\n        uuidBytes.set(fromHex(header.value.replace(/\\-/g, \"\")), 1);\n        return uuidBytes;\n    }\n  }\n  parse(headers) {\n    const out = {};\n    let position = 0;\n    while (position < headers.byteLength) {\n      const nameLength = headers.getUint8(position++);\n      const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));\n      position += nameLength;\n      switch (headers.getUint8(position++)) {\n        case 0:\n          out[name] = {\n            type: BOOLEAN_TAG,\n            value: true\n          };\n          break;\n        case 1:\n          out[name] = {\n            type: BOOLEAN_TAG,\n            value: false\n          };\n          break;\n        case 2:\n          out[name] = {\n            type: BYTE_TAG,\n            value: headers.getInt8(position++)\n          };\n          break;\n        case 3:\n          out[name] = {\n            type: SHORT_TAG,\n            value: headers.getInt16(position, false)\n          };\n          position += 2;\n          break;\n        case 4:\n          out[name] = {\n            type: INT_TAG,\n            value: headers.getInt32(position, false)\n          };\n          position += 4;\n          break;\n        case 5:\n          out[name] = {\n            type: LONG_TAG,\n            value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))\n          };\n          position += 8;\n          break;\n        case 6:\n          const binaryLength = headers.getUint16(position, false);\n          position += 2;\n          out[name] = {\n            type: BINARY_TAG,\n            value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)\n          };\n          position += binaryLength;\n          break;\n        case 7:\n          const stringLength = headers.getUint16(position, false);\n          position += 2;\n          out[name] = {\n            type: STRING_TAG,\n            value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))\n          };\n          position += stringLength;\n          break;\n        case 8:\n          out[name] = {\n            type: TIMESTAMP_TAG,\n            value: new Date(new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())\n          };\n          position += 8;\n          break;\n        case 9:\n          const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);\n          position += 16;\n          out[name] = {\n            type: UUID_TAG,\n            value: `${toHex(uuidBytes.subarray(0, 4))}-${toHex(uuidBytes.subarray(4, 6))}-${toHex(uuidBytes.subarray(6, 8))}-${toHex(uuidBytes.subarray(8, 10))}-${toHex(uuidBytes.subarray(10))}`\n          };\n          break;\n        default:\n          throw new Error(`Unrecognized header type tag`);\n      }\n    }\n    return out;\n  }\n}\nvar HEADER_VALUE_TYPE;\n(function (HEADER_VALUE_TYPE) {\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolTrue\"] = 0] = \"boolTrue\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolFalse\"] = 1] = \"boolFalse\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byte\"] = 2] = \"byte\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"short\"] = 3] = \"short\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"integer\"] = 4] = \"integer\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"long\"] = 5] = \"long\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byteArray\"] = 6] = \"byteArray\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"string\"] = 7] = \"string\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"timestamp\"] = 8] = \"timestamp\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"uuid\"] = 9] = \"uuid\";\n})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));\nconst BOOLEAN_TAG = \"boolean\";\nconst BYTE_TAG = \"byte\";\nconst SHORT_TAG = \"short\";\nconst INT_TAG = \"integer\";\nconst LONG_TAG = \"long\";\nconst BINARY_TAG = \"binary\";\nconst STRING_TAG = \"string\";\nconst TIMESTAMP_TAG = \"timestamp\";\nconst UUID_TAG = \"uuid\";\nconst UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;","map":{"version":3,"names":["fromHex","toHex","Int64","HeaderMarshaller","constructor","toUtf8","fromUtf8","format","headers","chunks","headerName","Object","keys","bytes","push","Uint8Array","from","byteLength","formatHeaderValue","out","reduce","carry","position","chunk","set","header","type","value","shortView","DataView","ArrayBuffer","setUint8","setInt16","buffer","intView","setInt32","longBytes","binView","setUint16","binBytes","utf8Bytes","strView","strBytes","tsBytes","fromNumber","valueOf","UUID_PATTERN","test","Error","uuidBytes","replace","parse","nameLength","getUint8","name","byteOffset","BOOLEAN_TAG","BYTE_TAG","getInt8","SHORT_TAG","getInt16","INT_TAG","getInt32","LONG_TAG","binaryLength","getUint16","BINARY_TAG","stringLength","STRING_TAG","TIMESTAMP_TAG","Date","UUID_TAG","subarray","HEADER_VALUE_TYPE"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@smithy/eventstream-codec/dist-es/HeaderMarshaller.js"],"sourcesContent":["import { fromHex, toHex } from \"@smithy/util-hex-encoding\";\nimport { Int64 } from \"./Int64\";\nexport class HeaderMarshaller {\n    constructor(toUtf8, fromUtf8) {\n        this.toUtf8 = toUtf8;\n        this.fromUtf8 = fromUtf8;\n    }\n    format(headers) {\n        const chunks = [];\n        for (const headerName of Object.keys(headers)) {\n            const bytes = this.fromUtf8(headerName);\n            chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));\n        }\n        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));\n        let position = 0;\n        for (const chunk of chunks) {\n            out.set(chunk, position);\n            position += chunk.byteLength;\n        }\n        return out;\n    }\n    formatHeaderValue(header) {\n        switch (header.type) {\n            case \"boolean\":\n                return Uint8Array.from([header.value ? 0 : 1]);\n            case \"byte\":\n                return Uint8Array.from([2, header.value]);\n            case \"short\":\n                const shortView = new DataView(new ArrayBuffer(3));\n                shortView.setUint8(0, 3);\n                shortView.setInt16(1, header.value, false);\n                return new Uint8Array(shortView.buffer);\n            case \"integer\":\n                const intView = new DataView(new ArrayBuffer(5));\n                intView.setUint8(0, 4);\n                intView.setInt32(1, header.value, false);\n                return new Uint8Array(intView.buffer);\n            case \"long\":\n                const longBytes = new Uint8Array(9);\n                longBytes[0] = 5;\n                longBytes.set(header.value.bytes, 1);\n                return longBytes;\n            case \"binary\":\n                const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));\n                binView.setUint8(0, 6);\n                binView.setUint16(1, header.value.byteLength, false);\n                const binBytes = new Uint8Array(binView.buffer);\n                binBytes.set(header.value, 3);\n                return binBytes;\n            case \"string\":\n                const utf8Bytes = this.fromUtf8(header.value);\n                const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));\n                strView.setUint8(0, 7);\n                strView.setUint16(1, utf8Bytes.byteLength, false);\n                const strBytes = new Uint8Array(strView.buffer);\n                strBytes.set(utf8Bytes, 3);\n                return strBytes;\n            case \"timestamp\":\n                const tsBytes = new Uint8Array(9);\n                tsBytes[0] = 8;\n                tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);\n                return tsBytes;\n            case \"uuid\":\n                if (!UUID_PATTERN.test(header.value)) {\n                    throw new Error(`Invalid UUID received: ${header.value}`);\n                }\n                const uuidBytes = new Uint8Array(17);\n                uuidBytes[0] = 9;\n                uuidBytes.set(fromHex(header.value.replace(/\\-/g, \"\")), 1);\n                return uuidBytes;\n        }\n    }\n    parse(headers) {\n        const out = {};\n        let position = 0;\n        while (position < headers.byteLength) {\n            const nameLength = headers.getUint8(position++);\n            const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));\n            position += nameLength;\n            switch (headers.getUint8(position++)) {\n                case 0:\n                    out[name] = {\n                        type: BOOLEAN_TAG,\n                        value: true,\n                    };\n                    break;\n                case 1:\n                    out[name] = {\n                        type: BOOLEAN_TAG,\n                        value: false,\n                    };\n                    break;\n                case 2:\n                    out[name] = {\n                        type: BYTE_TAG,\n                        value: headers.getInt8(position++),\n                    };\n                    break;\n                case 3:\n                    out[name] = {\n                        type: SHORT_TAG,\n                        value: headers.getInt16(position, false),\n                    };\n                    position += 2;\n                    break;\n                case 4:\n                    out[name] = {\n                        type: INT_TAG,\n                        value: headers.getInt32(position, false),\n                    };\n                    position += 4;\n                    break;\n                case 5:\n                    out[name] = {\n                        type: LONG_TAG,\n                        value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)),\n                    };\n                    position += 8;\n                    break;\n                case 6:\n                    const binaryLength = headers.getUint16(position, false);\n                    position += 2;\n                    out[name] = {\n                        type: BINARY_TAG,\n                        value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength),\n                    };\n                    position += binaryLength;\n                    break;\n                case 7:\n                    const stringLength = headers.getUint16(position, false);\n                    position += 2;\n                    out[name] = {\n                        type: STRING_TAG,\n                        value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength)),\n                    };\n                    position += stringLength;\n                    break;\n                case 8:\n                    out[name] = {\n                        type: TIMESTAMP_TAG,\n                        value: new Date(new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf()),\n                    };\n                    position += 8;\n                    break;\n                case 9:\n                    const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);\n                    position += 16;\n                    out[name] = {\n                        type: UUID_TAG,\n                        value: `${toHex(uuidBytes.subarray(0, 4))}-${toHex(uuidBytes.subarray(4, 6))}-${toHex(uuidBytes.subarray(6, 8))}-${toHex(uuidBytes.subarray(8, 10))}-${toHex(uuidBytes.subarray(10))}`,\n                    };\n                    break;\n                default:\n                    throw new Error(`Unrecognized header type tag`);\n            }\n        }\n        return out;\n    }\n}\nvar HEADER_VALUE_TYPE;\n(function (HEADER_VALUE_TYPE) {\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolTrue\"] = 0] = \"boolTrue\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolFalse\"] = 1] = \"boolFalse\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byte\"] = 2] = \"byte\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"short\"] = 3] = \"short\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"integer\"] = 4] = \"integer\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"long\"] = 5] = \"long\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byteArray\"] = 6] = \"byteArray\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"string\"] = 7] = \"string\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"timestamp\"] = 8] = \"timestamp\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"uuid\"] = 9] = \"uuid\";\n})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));\nconst BOOLEAN_TAG = \"boolean\";\nconst BYTE_TAG = \"byte\";\nconst SHORT_TAG = \"short\";\nconst INT_TAG = \"integer\";\nconst LONG_TAG = \"long\";\nconst BINARY_TAG = \"binary\";\nconst STRING_TAG = \"string\";\nconst TIMESTAMP_TAG = \"timestamp\";\nconst UUID_TAG = \"uuid\";\nconst UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}