{"ast":null,"code":"import { create } from 'zustand';\nimport { immer } from 'zustand/middleware/immer';\nimport { subscribeWithSelector } from 'zustand/middleware';\nexport const useSOWStore = create(subscribeWithSelector(immer((set, get) => ({\n  // Document state\n  sections: [],\n  currentSection: null,\n  documentTitle: 'Untitled SOW',\n  // Session state\n  currentSession: null,\n  sessionHistory: [],\n  changeLog: [],\n  // Template state\n  currentTemplate: null,\n  availableTemplates: [],\n  // Chat state\n  chatMessages: [],\n  isClaudeTyping: false,\n  pendingClarifications: [],\n  // UI state\n  selectedText: null,\n  inlineControls: {\n    visible: false,\n    position: {\n      x: 0,\n      y: 0\n    },\n    suggestions: []\n  },\n  // Pending suggestions (Cursor-style)\n  pendingSuggestion: null,\n  suggestionHistory: [],\n  // Export state\n  exportInProgress: false,\n  // Actions\n  addSection: section => set(state => {\n    state.sections.push({\n      id: Date.now().toString(),\n      ...section,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    });\n    state.changeLog.push({\n      type: 'ADD_SECTION',\n      sectionId: section.id,\n      timestamp: new Date().toISOString(),\n      data: section\n    });\n  }),\n  updateSection: (sectionId, updates) => set(state => {\n    const sectionIndex = state.sections.findIndex(s => s.id === sectionId);\n    if (sectionIndex !== -1) {\n      const oldSection = {\n        ...state.sections[sectionIndex]\n      };\n      state.sections[sectionIndex] = {\n        ...state.sections[sectionIndex],\n        ...updates,\n        updatedAt: new Date().toISOString()\n      };\n      state.changeLog.push({\n        type: 'UPDATE_SECTION',\n        sectionId,\n        timestamp: new Date().toISOString(),\n        oldData: oldSection,\n        newData: state.sections[sectionIndex]\n      });\n    }\n  }),\n  deleteSection: sectionId => set(state => {\n    const sectionIndex = state.sections.findIndex(s => s.id === sectionId);\n    if (sectionIndex !== -1) {\n      const deletedSection = state.sections[sectionIndex];\n      state.sections.splice(sectionIndex, 1);\n      state.changeLog.push({\n        type: 'DELETE_SECTION',\n        sectionId,\n        timestamp: new Date().toISOString(),\n        data: deletedSection\n      });\n    }\n  }),\n  setCurrentSection: sectionId => set(state => {\n    state.currentSection = sectionId;\n  }),\n  addChatMessage: message => set(state => {\n    state.chatMessages.push({\n      id: Date.now().toString(),\n      ...message,\n      timestamp: new Date().toISOString()\n    });\n  }),\n  setClaudeTyping: isTyping => set(state => {\n    state.isClaudeTyping = isTyping;\n  }),\n  showInlineControls: (position, suggestions) => set(state => {\n    state.inlineControls = {\n      visible: true,\n      position,\n      suggestions\n    };\n  }),\n  hideInlineControls: () => set(state => {\n    state.inlineControls.visible = false;\n  }),\n  acceptSuggestion: suggestionId => set(state => {\n    const suggestion = state.inlineControls.suggestions.find(s => s.id === suggestionId);\n    if (suggestion && state.currentSection) {\n      const sectionIndex = state.sections.findIndex(s => s.id === state.currentSection);\n      if (sectionIndex !== -1) {\n        state.sections[sectionIndex].content = suggestion.content;\n        state.sections[sectionIndex].updatedAt = new Date().toISOString();\n        state.changeLog.push({\n          type: 'ACCEPT_SUGGESTION',\n          sectionId: state.currentSection,\n          suggestionId,\n          timestamp: new Date().toISOString(),\n          data: suggestion\n        });\n      }\n    }\n    state.inlineControls.visible = false;\n  }),\n  rejectSuggestion: suggestionId => set(state => {\n    state.changeLog.push({\n      type: 'REJECT_SUGGESTION',\n      suggestionId,\n      timestamp: new Date().toISOString()\n    });\n    state.inlineControls.visible = false;\n  }),\n  loadTemplate: template => set(state => {\n    state.currentTemplate = template;\n    state.sections = template.sections || [];\n    state.documentTitle = template.title || 'Untitled SOW';\n  }),\n  undo: () => set(state => {\n    // Implement undo logic based on changeLog\n    const lastChange = state.changeLog[state.changeLog.length - 1];\n    if (lastChange) {\n      // Reverse the last change\n      switch (lastChange.type) {\n        case 'ADD_SECTION':\n          state.sections = state.sections.filter(s => s.id !== lastChange.sectionId);\n          break;\n        case 'UPDATE_SECTION':\n          const sectionIndex = state.sections.findIndex(s => s.id === lastChange.sectionId);\n          if (sectionIndex !== -1) {\n            state.sections[sectionIndex] = lastChange.oldData;\n          }\n          break;\n        case 'DELETE_SECTION':\n          state.sections.push(lastChange.data);\n          break;\n      }\n      state.changeLog.pop();\n    }\n  }),\n  exportDocument: async format => {\n    set(state => {\n      state.exportInProgress = true;\n    });\n    try {\n      // Export logic will be implemented in services\n      const {\n        exportService\n      } = await import('../services/exportService');\n      const result = await exportService.export(get().sections, format);\n      return result;\n    } finally {\n      set(state => {\n        state.exportInProgress = false;\n      });\n    }\n  },\n  // Pending suggestion actions\n  setPendingSuggestion: suggestion => set(state => {\n    state.pendingSuggestion = suggestion;\n  }),\n  acceptSuggestion: () => set(state => {\n    if (state.pendingSuggestion) {\n      // Add to history\n      state.suggestionHistory.push({\n        ...state.pendingSuggestion,\n        status: 'accepted',\n        acceptedAt: new Date().toISOString()\n      });\n\n      // Clear pending\n      state.pendingSuggestion = null;\n    }\n  }),\n  rejectSuggestion: () => set(state => {\n    if (state.pendingSuggestion) {\n      // Add to history\n      state.suggestionHistory.push({\n        ...state.pendingSuggestion,\n        status: 'rejected',\n        rejectedAt: new Date().toISOString()\n      });\n\n      // Clear pending\n      state.pendingSuggestion = null;\n    }\n  }),\n  clearPendingSuggestion: () => set(state => {\n    state.pendingSuggestion = null;\n  })\n}))));","map":{"version":3,"names":["create","immer","subscribeWithSelector","useSOWStore","set","get","sections","currentSection","documentTitle","currentSession","sessionHistory","changeLog","currentTemplate","availableTemplates","chatMessages","isClaudeTyping","pendingClarifications","selectedText","inlineControls","visible","position","x","y","suggestions","pendingSuggestion","suggestionHistory","exportInProgress","addSection","section","state","push","id","Date","now","toString","createdAt","toISOString","updatedAt","type","sectionId","timestamp","data","updateSection","updates","sectionIndex","findIndex","s","oldSection","oldData","newData","deleteSection","deletedSection","splice","setCurrentSection","addChatMessage","message","setClaudeTyping","isTyping","showInlineControls","hideInlineControls","acceptSuggestion","suggestionId","suggestion","find","content","rejectSuggestion","loadTemplate","template","title","undo","lastChange","length","filter","pop","exportDocument","format","exportService","result","export","setPendingSuggestion","status","acceptedAt","rejectedAt","clearPendingSuggestion"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/src/stores/sowStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport { immer } from 'zustand/middleware/immer';\nimport { subscribeWithSelector } from 'zustand/middleware';\n\nexport const useSOWStore = create(\n    subscribeWithSelector(\n        immer((set, get) => ({\n            // Document state\n            sections: [],\n            currentSection: null,\n            documentTitle: 'Untitled SOW',\n\n            // Session state\n            currentSession: null,\n            sessionHistory: [],\n            changeLog: [],\n\n            // Template state\n            currentTemplate: null,\n            availableTemplates: [],\n\n            // Chat state\n            chatMessages: [],\n            isClaudeTyping: false,\n            pendingClarifications: [],\n\n            // UI state\n            selectedText: null,\n            inlineControls: {\n                visible: false,\n                position: { x: 0, y: 0 },\n                suggestions: []\n            },\n\n            // Pending suggestions (Cursor-style)\n            pendingSuggestion: null,\n            suggestionHistory: [],\n\n            // Export state\n            exportInProgress: false,\n\n            // Actions\n            addSection: (section) => set((state) => {\n                state.sections.push({\n                    id: Date.now().toString(),\n                    ...section,\n                    createdAt: new Date().toISOString(),\n                    updatedAt: new Date().toISOString()\n                });\n                state.changeLog.push({\n                    type: 'ADD_SECTION',\n                    sectionId: section.id,\n                    timestamp: new Date().toISOString(),\n                    data: section\n                });\n            }),\n\n            updateSection: (sectionId, updates) => set((state) => {\n                const sectionIndex = state.sections.findIndex(s => s.id === sectionId);\n                if (sectionIndex !== -1) {\n                    const oldSection = { ...state.sections[sectionIndex] };\n                    state.sections[sectionIndex] = {\n                        ...state.sections[sectionIndex],\n                        ...updates,\n                        updatedAt: new Date().toISOString()\n                    };\n                    state.changeLog.push({\n                        type: 'UPDATE_SECTION',\n                        sectionId,\n                        timestamp: new Date().toISOString(),\n                        oldData: oldSection,\n                        newData: state.sections[sectionIndex]\n                    });\n                }\n            }),\n\n            deleteSection: (sectionId) => set((state) => {\n                const sectionIndex = state.sections.findIndex(s => s.id === sectionId);\n                if (sectionIndex !== -1) {\n                    const deletedSection = state.sections[sectionIndex];\n                    state.sections.splice(sectionIndex, 1);\n                    state.changeLog.push({\n                        type: 'DELETE_SECTION',\n                        sectionId,\n                        timestamp: new Date().toISOString(),\n                        data: deletedSection\n                    });\n                }\n            }),\n\n            setCurrentSection: (sectionId) => set((state) => {\n                state.currentSection = sectionId;\n            }),\n\n            addChatMessage: (message) => set((state) => {\n                state.chatMessages.push({\n                    id: Date.now().toString(),\n                    ...message,\n                    timestamp: new Date().toISOString()\n                });\n            }),\n\n            setClaudeTyping: (isTyping) => set((state) => {\n                state.isClaudeTyping = isTyping;\n            }),\n\n            showInlineControls: (position, suggestions) => set((state) => {\n                state.inlineControls = {\n                    visible: true,\n                    position,\n                    suggestions\n                };\n            }),\n\n            hideInlineControls: () => set((state) => {\n                state.inlineControls.visible = false;\n            }),\n\n            acceptSuggestion: (suggestionId) => set((state) => {\n                const suggestion = state.inlineControls.suggestions.find(s => s.id === suggestionId);\n                if (suggestion && state.currentSection) {\n                    const sectionIndex = state.sections.findIndex(s => s.id === state.currentSection);\n                    if (sectionIndex !== -1) {\n                        state.sections[sectionIndex].content = suggestion.content;\n                        state.sections[sectionIndex].updatedAt = new Date().toISOString();\n                        state.changeLog.push({\n                            type: 'ACCEPT_SUGGESTION',\n                            sectionId: state.currentSection,\n                            suggestionId,\n                            timestamp: new Date().toISOString(),\n                            data: suggestion\n                        });\n                    }\n                }\n                state.inlineControls.visible = false;\n            }),\n\n            rejectSuggestion: (suggestionId) => set((state) => {\n                state.changeLog.push({\n                    type: 'REJECT_SUGGESTION',\n                    suggestionId,\n                    timestamp: new Date().toISOString()\n                });\n                state.inlineControls.visible = false;\n            }),\n\n            loadTemplate: (template) => set((state) => {\n                state.currentTemplate = template;\n                state.sections = template.sections || [];\n                state.documentTitle = template.title || 'Untitled SOW';\n            }),\n\n            undo: () => set((state) => {\n                // Implement undo logic based on changeLog\n                const lastChange = state.changeLog[state.changeLog.length - 1];\n                if (lastChange) {\n                    // Reverse the last change\n                    switch (lastChange.type) {\n                        case 'ADD_SECTION':\n                            state.sections = state.sections.filter(s => s.id !== lastChange.sectionId);\n                            break;\n                        case 'UPDATE_SECTION':\n                            const sectionIndex = state.sections.findIndex(s => s.id === lastChange.sectionId);\n                            if (sectionIndex !== -1) {\n                                state.sections[sectionIndex] = lastChange.oldData;\n                            }\n                            break;\n                        case 'DELETE_SECTION':\n                            state.sections.push(lastChange.data);\n                            break;\n                    }\n                    state.changeLog.pop();\n                }\n            }),\n\n            exportDocument: async (format) => {\n                set((state) => {\n                    state.exportInProgress = true;\n                });\n\n                try {\n                    // Export logic will be implemented in services\n                    const { exportService } = await import('../services/exportService');\n                    const result = await exportService.export(get().sections, format);\n                    return result;\n                } finally {\n                    set((state) => {\n                        state.exportInProgress = false;\n                    });\n                }\n            },\n\n            // Pending suggestion actions\n            setPendingSuggestion: (suggestion) => set((state) => {\n                state.pendingSuggestion = suggestion;\n            }),\n\n            acceptSuggestion: () => set((state) => {\n                if (state.pendingSuggestion) {\n                    // Add to history\n                    state.suggestionHistory.push({\n                        ...state.pendingSuggestion,\n                        status: 'accepted',\n                        acceptedAt: new Date().toISOString()\n                    });\n                    \n                    // Clear pending\n                    state.pendingSuggestion = null;\n                }\n            }),\n\n            rejectSuggestion: () => set((state) => {\n                if (state.pendingSuggestion) {\n                    // Add to history\n                    state.suggestionHistory.push({\n                        ...state.pendingSuggestion,\n                        status: 'rejected',\n                        rejectedAt: new Date().toISOString()\n                    });\n                    \n                    // Clear pending\n                    state.pendingSuggestion = null;\n                }\n            }),\n\n            clearPendingSuggestion: () => set((state) => {\n                state.pendingSuggestion = null;\n            })\n        }))\n    )\n);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}