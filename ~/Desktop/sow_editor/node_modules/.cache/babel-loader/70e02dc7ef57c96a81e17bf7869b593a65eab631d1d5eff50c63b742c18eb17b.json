{"ast":null,"code":"import { isArrayBuffer } from \"@smithy/is-array-buffer\";\nimport { toHex } from \"@smithy/util-hex-encoding\";\nimport { toUint8Array } from \"@smithy/util-utf8\";\nimport { SHA256_HEADER, UNSIGNED_PAYLOAD } from \"./constants\";\nexport const getPayloadHash = async ({\n  headers,\n  body\n}, hashConstructor) => {\n  for (const headerName of Object.keys(headers)) {\n    if (headerName.toLowerCase() === SHA256_HEADER) {\n      return headers[headerName];\n    }\n  }\n  if (body == undefined) {\n    return \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\n  } else if (typeof body === \"string\" || ArrayBuffer.isView(body) || isArrayBuffer(body)) {\n    const hashCtor = new hashConstructor();\n    hashCtor.update(toUint8Array(body));\n    return toHex(await hashCtor.digest());\n  }\n  return UNSIGNED_PAYLOAD;\n};","map":{"version":3,"names":["isArrayBuffer","toHex","toUint8Array","SHA256_HEADER","UNSIGNED_PAYLOAD","getPayloadHash","headers","body","hashConstructor","headerName","Object","keys","toLowerCase","undefined","ArrayBuffer","isView","hashCtor","update","digest"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/node_modules/@smithy/signature-v4/dist-es/getPayloadHash.js"],"sourcesContent":["import { isArrayBuffer } from \"@smithy/is-array-buffer\";\nimport { toHex } from \"@smithy/util-hex-encoding\";\nimport { toUint8Array } from \"@smithy/util-utf8\";\nimport { SHA256_HEADER, UNSIGNED_PAYLOAD } from \"./constants\";\nexport const getPayloadHash = async ({ headers, body }, hashConstructor) => {\n    for (const headerName of Object.keys(headers)) {\n        if (headerName.toLowerCase() === SHA256_HEADER) {\n            return headers[headerName];\n        }\n    }\n    if (body == undefined) {\n        return \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\n    }\n    else if (typeof body === \"string\" || ArrayBuffer.isView(body) || isArrayBuffer(body)) {\n        const hashCtor = new hashConstructor();\n        hashCtor.update(toUint8Array(body));\n        return toHex(await hashCtor.digest());\n    }\n    return UNSIGNED_PAYLOAD;\n};\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,yBAAyB;AACvD,SAASC,KAAK,QAAQ,2BAA2B;AACjD,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,aAAa,EAAEC,gBAAgB,QAAQ,aAAa;AAC7D,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAO;EAAEC,OAAO;EAAEC;AAAK,CAAC,EAAEC,eAAe,KAAK;EACxE,KAAK,MAAMC,UAAU,IAAIC,MAAM,CAACC,IAAI,CAACL,OAAO,CAAC,EAAE;IAC3C,IAAIG,UAAU,CAACG,WAAW,CAAC,CAAC,KAAKT,aAAa,EAAE;MAC5C,OAAOG,OAAO,CAACG,UAAU,CAAC;IAC9B;EACJ;EACA,IAAIF,IAAI,IAAIM,SAAS,EAAE;IACnB,OAAO,kEAAkE;EAC7E,CAAC,MACI,IAAI,OAAON,IAAI,KAAK,QAAQ,IAAIO,WAAW,CAACC,MAAM,CAACR,IAAI,CAAC,IAAIP,aAAa,CAACO,IAAI,CAAC,EAAE;IAClF,MAAMS,QAAQ,GAAG,IAAIR,eAAe,CAAC,CAAC;IACtCQ,QAAQ,CAACC,MAAM,CAACf,YAAY,CAACK,IAAI,CAAC,CAAC;IACnC,OAAON,KAAK,CAAC,MAAMe,QAAQ,CAACE,MAAM,CAAC,CAAC,CAAC;EACzC;EACA,OAAOd,gBAAgB;AAC3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}