{"ast":null,"code":"import { BedrockRuntimeClient, InvokeModelCommand } from '@aws-sdk/client-bedrock-runtime';\nexport class BedrockService {\n  constructor() {\n    var _process$env$REACT_AP;\n    // Debug: Log environment variables\n    console.log('Environment check:', {\n      region: process.env.REACT_APP_AWS_REGION,\n      hasAccessKey: !!process.env.REACT_APP_AWS_ACCESS_KEY_ID,\n      hasSecretKey: !!process.env.REACT_APP_AWS_SECRET_ACCESS_KEY,\n      hasSessionToken: !!process.env.REACT_APP_AWS_SESSION_TOKEN,\n      accessKeyPrefix: ((_process$env$REACT_AP = process.env.REACT_APP_AWS_ACCESS_KEY_ID) === null || _process$env$REACT_AP === void 0 ? void 0 : _process$env$REACT_AP.substring(0, 4)) + '...'\n    });\n\n    // Check if AWS credentials are configured\n    this.isConfigured = !!(process.env.REACT_APP_AWS_ACCESS_KEY_ID && process.env.REACT_APP_AWS_SECRET_ACCESS_KEY);\n    if (this.isConfigured) {\n      // Initialize Bedrock client with environment variables\n      const credentials = {\n        accessKeyId: process.env.REACT_APP_AWS_ACCESS_KEY_ID,\n        secretAccessKey: process.env.REACT_APP_AWS_SECRET_ACCESS_KEY\n      };\n\n      // Add session token if available (for temporary credentials)\n      if (process.env.REACT_APP_AWS_SESSION_TOKEN) {\n        credentials.sessionToken = process.env.REACT_APP_AWS_SESSION_TOKEN;\n      }\n      this.client = new BedrockRuntimeClient({\n        region: process.env.REACT_APP_AWS_REGION || 'us-east-1',\n        credentials: credentials\n      });\n      this.modelId = process.env.REACT_APP_BEDROCK_MODEL_ID || 'anthropic.claude-3-sonnet-20240229-v1:0';\n      console.log('BedrockService initialized with AWS credentials for region:', process.env.REACT_APP_AWS_REGION || 'us-east-1');\n    } else {\n      console.log('BedrockService initialized in placeholder mode - AWS credentials not configured');\n      console.log('To configure: Set REACT_APP_AWS_ACCESS_KEY_ID and REACT_APP_AWS_SECRET_ACCESS_KEY environment variables');\n    }\n  }\n  async sendMessage(userMessage, context = {}) {\n    if (!this.isConfigured) {\n      // Placeholder implementation when AWS is not configured\n      console.log('Sending message to Claude (placeholder):', userMessage);\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      return `I understand you said: \"${userMessage}\". This is a placeholder response. Configure AWS credentials in .env file to enable real Claude responses.`;\n    }\n    try {\n      // Prepare the system prompt with SOW-specific context\n      const systemPrompt = this.buildSystemPrompt(context);\n\n      // Prepare the request payload for Claude\n      const payload = {\n        anthropic_version: 'bedrock-2023-05-31',\n        max_tokens: 4000,\n        system: systemPrompt,\n        messages: [{\n          role: 'user',\n          content: userMessage\n        }],\n        temperature: 0.7,\n        top_p: 0.9\n      };\n      console.log('Sending request to Bedrock with model:', this.modelId);\n      const command = new InvokeModelCommand({\n        modelId: this.modelId,\n        contentType: 'application/json',\n        accept: 'application/json',\n        body: JSON.stringify(payload)\n      });\n      const response = await this.client.send(command);\n      const responseBody = JSON.parse(new TextDecoder().decode(response.body));\n      console.log('Received response from Claude');\n      return responseBody.content[0].text;\n    } catch (error) {\n      console.error('Error calling Bedrock:', error);\n      throw new Error(`Failed to get response from Claude: ${error.message}`);\n    }\n  }\n  buildSystemPrompt(context) {\n    var _context$sections;\n    return `You are Claude, an expert AI assistant specializing in helping users write professional Statements of Work (SOW). You have deep knowledge of:\n\n1. SOW structure and best practices\n2. Technical writing and clarity\n3. Project management principles\n4. Industry standards and compliance requirements\n5. Risk assessment and mitigation strategies\n\nCurrent Document Context:\n- Title: ${context.documentTitle || 'Untitled SOW'}\n- Sections: ${((_context$sections = context.sections) === null || _context$sections === void 0 ? void 0 : _context$sections.length) || 0} sections\n- Current Content: ${JSON.stringify(context.currentContent || [])}\n- Selected Text: ${context.selectedText || 'None'}\n- Has Selection: ${context.hasSelection || false}\n\nIMPORTANT: When users give you actionable instructions (like \"write\", \"add\", \"create\", \"improve\", \"fix\", etc.), provide ONLY the content that should be inserted/replaced in the document. Do not include explanations, introductions, or meta-commentary in your response - just the clean, professional content.\n\nFor example:\n- If asked \"write a project scope section\", respond with just the scope content\n- If asked \"improve this paragraph\", respond with just the improved paragraph\n- If asked \"add a risk assessment\", respond with just the risk assessment content\n\nYour role is to:\n- Provide clean, ready-to-use content for actionable requests\n- Help structure sections logically and professionally\n- Identify missing elements or potential issues\n- Suggest industry best practices and standards\n- Clarify ambiguous requirements when asked\n- Ensure completeness and professional tone\n\nGuidelines for actionable responses:\n- Provide only the content to be inserted/replaced\n- Use professional SOW language and formatting\n- Be specific and actionable\n- Include relevant details and structure\n- Maintain consistency with existing document style\n\nGuidelines for conversational responses:\n- Be helpful and explanatory\n- Ask clarifying questions when needed\n- Provide guidance and recommendations\n- Explain best practices and reasoning`;\n  }\n  async generateSuggestions(selectedText, sectionType = 'general') {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    return `Here are suggestions for improving this ${sectionType} section: \"${selectedText}\". (Placeholder response)`;\n  }\n  async clarifyRequirements(ambiguousText) {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    return `This section needs clarification: \"${ambiguousText}\". (Placeholder response)`;\n  }\n  async validateSection(sectionContent, sectionType) {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    return `Validation results for ${sectionType} section: \"${sectionContent}\". (Placeholder response)`;\n  }\n}\nexport default BedrockService;","map":{"version":3,"names":["BedrockRuntimeClient","InvokeModelCommand","BedrockService","constructor","_process$env$REACT_AP","console","log","region","process","env","REACT_APP_AWS_REGION","hasAccessKey","REACT_APP_AWS_ACCESS_KEY_ID","hasSecretKey","REACT_APP_AWS_SECRET_ACCESS_KEY","hasSessionToken","REACT_APP_AWS_SESSION_TOKEN","accessKeyPrefix","substring","isConfigured","credentials","accessKeyId","secretAccessKey","sessionToken","client","modelId","REACT_APP_BEDROCK_MODEL_ID","sendMessage","userMessage","context","Promise","resolve","setTimeout","systemPrompt","buildSystemPrompt","payload","anthropic_version","max_tokens","system","messages","role","content","temperature","top_p","command","contentType","accept","body","JSON","stringify","response","send","responseBody","parse","TextDecoder","decode","text","error","Error","message","_context$sections","documentTitle","sections","length","currentContent","selectedText","hasSelection","generateSuggestions","sectionType","clarifyRequirements","ambiguousText","validateSection","sectionContent"],"sources":["/Users/tuvyakhatter/Desktop/pipecat_voicebot/~/Desktop/sow_editor/src/services/bedrockService.js"],"sourcesContent":["import { \n  BedrockRuntimeClient, \n  InvokeModelCommand \n} from '@aws-sdk/client-bedrock-runtime';\n\nexport class BedrockService {\n  constructor() {\n    // Debug: Log environment variables\n    console.log('Environment check:', {\n      region: process.env.REACT_APP_AWS_REGION,\n      hasAccessKey: !!process.env.REACT_APP_AWS_ACCESS_KEY_ID,\n      hasSecretKey: !!process.env.REACT_APP_AWS_SECRET_ACCESS_KEY,\n      hasSessionToken: !!process.env.REACT_APP_AWS_SESSION_TOKEN,\n      accessKeyPrefix: process.env.REACT_APP_AWS_ACCESS_KEY_ID?.substring(0, 4) + '...'\n    });\n\n    // Check if AWS credentials are configured\n    this.isConfigured = !!(\n      process.env.REACT_APP_AWS_ACCESS_KEY_ID && \n      process.env.REACT_APP_AWS_SECRET_ACCESS_KEY\n    );\n\n    if (this.isConfigured) {\n      // Initialize Bedrock client with environment variables\n      const credentials = {\n        accessKeyId: process.env.REACT_APP_AWS_ACCESS_KEY_ID,\n        secretAccessKey: process.env.REACT_APP_AWS_SECRET_ACCESS_KEY,\n      };\n\n      // Add session token if available (for temporary credentials)\n      if (process.env.REACT_APP_AWS_SESSION_TOKEN) {\n        credentials.sessionToken = process.env.REACT_APP_AWS_SESSION_TOKEN;\n      }\n\n      this.client = new BedrockRuntimeClient({\n        region: process.env.REACT_APP_AWS_REGION || 'us-east-1',\n        credentials: credentials,\n      });\n      \n      this.modelId = process.env.REACT_APP_BEDROCK_MODEL_ID || 'anthropic.claude-3-sonnet-20240229-v1:0';\n      console.log('BedrockService initialized with AWS credentials for region:', process.env.REACT_APP_AWS_REGION || 'us-east-1');\n    } else {\n      console.log('BedrockService initialized in placeholder mode - AWS credentials not configured');\n      console.log('To configure: Set REACT_APP_AWS_ACCESS_KEY_ID and REACT_APP_AWS_SECRET_ACCESS_KEY environment variables');\n    }\n  }\n\n  async sendMessage(userMessage, context = {}) {\n    if (!this.isConfigured) {\n      // Placeholder implementation when AWS is not configured\n      console.log('Sending message to Claude (placeholder):', userMessage);\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      return `I understand you said: \"${userMessage}\". This is a placeholder response. Configure AWS credentials in .env file to enable real Claude responses.`;\n    }\n\n    try {\n      // Prepare the system prompt with SOW-specific context\n      const systemPrompt = this.buildSystemPrompt(context);\n      \n      // Prepare the request payload for Claude\n      const payload = {\n        anthropic_version: 'bedrock-2023-05-31',\n        max_tokens: 4000,\n        system: systemPrompt,\n        messages: [\n          {\n            role: 'user',\n            content: userMessage\n          }\n        ],\n        temperature: 0.7,\n        top_p: 0.9\n      };\n\n      console.log('Sending request to Bedrock with model:', this.modelId);\n\n      const command = new InvokeModelCommand({\n        modelId: this.modelId,\n        contentType: 'application/json',\n        accept: 'application/json',\n        body: JSON.stringify(payload)\n      });\n\n      const response = await this.client.send(command);\n      const responseBody = JSON.parse(new TextDecoder().decode(response.body));\n      \n      console.log('Received response from Claude');\n      return responseBody.content[0].text;\n    } catch (error) {\n      console.error('Error calling Bedrock:', error);\n      throw new Error(`Failed to get response from Claude: ${error.message}`);\n    }\n  }\n\n  buildSystemPrompt(context) {\n    return `You are Claude, an expert AI assistant specializing in helping users write professional Statements of Work (SOW). You have deep knowledge of:\n\n1. SOW structure and best practices\n2. Technical writing and clarity\n3. Project management principles\n4. Industry standards and compliance requirements\n5. Risk assessment and mitigation strategies\n\nCurrent Document Context:\n- Title: ${context.documentTitle || 'Untitled SOW'}\n- Sections: ${context.sections?.length || 0} sections\n- Current Content: ${JSON.stringify(context.currentContent || [])}\n- Selected Text: ${context.selectedText || 'None'}\n- Has Selection: ${context.hasSelection || false}\n\nIMPORTANT: When users give you actionable instructions (like \"write\", \"add\", \"create\", \"improve\", \"fix\", etc.), provide ONLY the content that should be inserted/replaced in the document. Do not include explanations, introductions, or meta-commentary in your response - just the clean, professional content.\n\nFor example:\n- If asked \"write a project scope section\", respond with just the scope content\n- If asked \"improve this paragraph\", respond with just the improved paragraph\n- If asked \"add a risk assessment\", respond with just the risk assessment content\n\nYour role is to:\n- Provide clean, ready-to-use content for actionable requests\n- Help structure sections logically and professionally\n- Identify missing elements or potential issues\n- Suggest industry best practices and standards\n- Clarify ambiguous requirements when asked\n- Ensure completeness and professional tone\n\nGuidelines for actionable responses:\n- Provide only the content to be inserted/replaced\n- Use professional SOW language and formatting\n- Be specific and actionable\n- Include relevant details and structure\n- Maintain consistency with existing document style\n\nGuidelines for conversational responses:\n- Be helpful and explanatory\n- Ask clarifying questions when needed\n- Provide guidance and recommendations\n- Explain best practices and reasoning`;\n  }\n\n  async generateSuggestions(selectedText, sectionType = 'general') {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    return `Here are suggestions for improving this ${sectionType} section: \"${selectedText}\". (Placeholder response)`;\n  }\n\n  async clarifyRequirements(ambiguousText) {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    return `This section needs clarification: \"${ambiguousText}\". (Placeholder response)`;\n  }\n\n  async validateSection(sectionContent, sectionType) {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    return `Validation results for ${sectionType} section: \"${sectionContent}\". (Placeholder response)`;\n  }\n}\n\nexport default BedrockService;"],"mappings":"AAAA,SACEA,oBAAoB,EACpBC,kBAAkB,QACb,iCAAiC;AAExC,OAAO,MAAMC,cAAc,CAAC;EAC1BC,WAAWA,CAAA,EAAG;IAAA,IAAAC,qBAAA;IACZ;IACAC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE;MAChCC,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,oBAAoB;MACxCC,YAAY,EAAE,CAAC,CAACH,OAAO,CAACC,GAAG,CAACG,2BAA2B;MACvDC,YAAY,EAAE,CAAC,CAACL,OAAO,CAACC,GAAG,CAACK,+BAA+B;MAC3DC,eAAe,EAAE,CAAC,CAACP,OAAO,CAACC,GAAG,CAACO,2BAA2B;MAC1DC,eAAe,EAAE,EAAAb,qBAAA,GAAAI,OAAO,CAACC,GAAG,CAACG,2BAA2B,cAAAR,qBAAA,uBAAvCA,qBAAA,CAAyCc,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,IAAG;IAC9E,CAAC,CAAC;;IAEF;IACA,IAAI,CAACC,YAAY,GAAG,CAAC,EACnBX,OAAO,CAACC,GAAG,CAACG,2BAA2B,IACvCJ,OAAO,CAACC,GAAG,CAACK,+BAA+B,CAC5C;IAED,IAAI,IAAI,CAACK,YAAY,EAAE;MACrB;MACA,MAAMC,WAAW,GAAG;QAClBC,WAAW,EAAEb,OAAO,CAACC,GAAG,CAACG,2BAA2B;QACpDU,eAAe,EAAEd,OAAO,CAACC,GAAG,CAACK;MAC/B,CAAC;;MAED;MACA,IAAIN,OAAO,CAACC,GAAG,CAACO,2BAA2B,EAAE;QAC3CI,WAAW,CAACG,YAAY,GAAGf,OAAO,CAACC,GAAG,CAACO,2BAA2B;MACpE;MAEA,IAAI,CAACQ,MAAM,GAAG,IAAIxB,oBAAoB,CAAC;QACrCO,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,oBAAoB,IAAI,WAAW;QACvDU,WAAW,EAAEA;MACf,CAAC,CAAC;MAEF,IAAI,CAACK,OAAO,GAAGjB,OAAO,CAACC,GAAG,CAACiB,0BAA0B,IAAI,yCAAyC;MAClGrB,OAAO,CAACC,GAAG,CAAC,6DAA6D,EAAEE,OAAO,CAACC,GAAG,CAACC,oBAAoB,IAAI,WAAW,CAAC;IAC7H,CAAC,MAAM;MACLL,OAAO,CAACC,GAAG,CAAC,iFAAiF,CAAC;MAC9FD,OAAO,CAACC,GAAG,CAAC,yGAAyG,CAAC;IACxH;EACF;EAEA,MAAMqB,WAAWA,CAACC,WAAW,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC3C,IAAI,CAAC,IAAI,CAACV,YAAY,EAAE;MACtB;MACAd,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEsB,WAAW,CAAC;MACpE,MAAM,IAAIE,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;MACvD,OAAO,2BAA2BH,WAAW,4GAA4G;IAC3J;IAEA,IAAI;MACF;MACA,MAAMK,YAAY,GAAG,IAAI,CAACC,iBAAiB,CAACL,OAAO,CAAC;;MAEpD;MACA,MAAMM,OAAO,GAAG;QACdC,iBAAiB,EAAE,oBAAoB;QACvCC,UAAU,EAAE,IAAI;QAChBC,MAAM,EAAEL,YAAY;QACpBM,QAAQ,EAAE,CACR;UACEC,IAAI,EAAE,MAAM;UACZC,OAAO,EAAEb;QACX,CAAC,CACF;QACDc,WAAW,EAAE,GAAG;QAChBC,KAAK,EAAE;MACT,CAAC;MAEDtC,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAE,IAAI,CAACmB,OAAO,CAAC;MAEnE,MAAMmB,OAAO,GAAG,IAAI3C,kBAAkB,CAAC;QACrCwB,OAAO,EAAE,IAAI,CAACA,OAAO;QACrBoB,WAAW,EAAE,kBAAkB;QAC/BC,MAAM,EAAE,kBAAkB;QAC1BC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACd,OAAO;MAC9B,CAAC,CAAC;MAEF,MAAMe,QAAQ,GAAG,MAAM,IAAI,CAAC1B,MAAM,CAAC2B,IAAI,CAACP,OAAO,CAAC;MAChD,MAAMQ,YAAY,GAAGJ,IAAI,CAACK,KAAK,CAAC,IAAIC,WAAW,CAAC,CAAC,CAACC,MAAM,CAACL,QAAQ,CAACH,IAAI,CAAC,CAAC;MAExE1C,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAC5C,OAAO8C,YAAY,CAACX,OAAO,CAAC,CAAC,CAAC,CAACe,IAAI;IACrC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdpD,OAAO,CAACoD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAM,IAAIC,KAAK,CAAC,uCAAuCD,KAAK,CAACE,OAAO,EAAE,CAAC;IACzE;EACF;EAEAzB,iBAAiBA,CAACL,OAAO,EAAE;IAAA,IAAA+B,iBAAA;IACzB,OAAO;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW/B,OAAO,CAACgC,aAAa,IAAI,cAAc;AAClD,cAAc,EAAAD,iBAAA,GAAA/B,OAAO,CAACiC,QAAQ,cAAAF,iBAAA,uBAAhBA,iBAAA,CAAkBG,MAAM,KAAI,CAAC;AAC3C,qBAAqBf,IAAI,CAACC,SAAS,CAACpB,OAAO,CAACmC,cAAc,IAAI,EAAE,CAAC;AACjE,mBAAmBnC,OAAO,CAACoC,YAAY,IAAI,MAAM;AACjD,mBAAmBpC,OAAO,CAACqC,YAAY,IAAI,KAAK;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;EACrC;EAEA,MAAMC,mBAAmBA,CAACF,YAAY,EAAEG,WAAW,GAAG,SAAS,EAAE;IAC/D,MAAM,IAAItC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IACtD,OAAO,2CAA2CqC,WAAW,cAAcH,YAAY,2BAA2B;EACpH;EAEA,MAAMI,mBAAmBA,CAACC,aAAa,EAAE;IACvC,MAAM,IAAIxC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IACtD,OAAO,sCAAsCuC,aAAa,2BAA2B;EACvF;EAEA,MAAMC,eAAeA,CAACC,cAAc,EAAEJ,WAAW,EAAE;IACjD,MAAM,IAAItC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IACtD,OAAO,0BAA0BqC,WAAW,cAAcI,cAAc,2BAA2B;EACrG;AACF;AAEA,eAAetE,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}